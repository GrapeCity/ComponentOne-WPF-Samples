<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Expander" xml:space="preserve">
    <value>C1Expander allows you to create an expandable and collapsible information panel that can include text, images, and controls. Choose from four expand directions and position of the expand button.</value>
  </data>
  <data name="ExpanderTitle" xml:space="preserve">
    <value>Expander</value>
  </data>
  <data name="Input" xml:space="preserve">
    <value>This library includes several WPF input controls for any data entry scenario. Format and parse numbers, dates, colors, and masked text. Select multiple items from a checklist or enter items like a tag editor. Edit a numeric range visually using a slider. Design a custom drop-down UI with ease. Select files from the user's machine.</value>
  </data>
  <data name="InputTitle" xml:space="preserve">
    <value>Overview</value>
  </data>
  <data name="RangeSlider" xml:space="preserve">
    <value>The C1RangeSlider control extends the basic slider control and provides two thumbs, making it possible for users to select a range. Users can drag each thumb individually or drag the center to modify both at the same time.</value>
  </data>
  <data name="RangeSliderTitle" xml:space="preserve">
    <value>Range Slider</value>
  </data>
  <data name="MaskedDemoDes" xml:space="preserve">
    <value>Shows how to use C1MaskedTextBox with different settings of Mask and TextMaskFormat.</value>
  </data>
  <data name="MaskedDemoTitle" xml:space="preserve">
    <value>Masked TextBox</value>
  </data>
  <data name="AddTag" xml:space="preserve">
    <value>Add Tag</value>
  </data>
  <data name="AddTagButton" xml:space="preserve">
    <value>AddTag</value>
  </data>
  <data name="AddText" xml:space="preserve">
    <value>Add Text</value>
  </data>
  <data name="InputTagContent" xml:space="preserve">
    <value>Input tag's content:</value>
  </data>
  <data name="InputText" xml:space="preserve">
    <value>Input text:</value>
  </data>
  <data name="TagEditorDemoDes" xml:space="preserve">
    <value>Shows how to use C1TagEditor.</value>
  </data>
  <data name="TagEditorDemoTitle" xml:space="preserve">
    <value>Tag Editor</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>InputExplorer</value>
  </data>
  <data name="AddItemsEvent" xml:space="preserve">
    <value>AddItems</value>
  </data>
  <data name="CheckListDes" xml:space="preserve">
    <value>Shows how to use C1CheckList</value>
  </data>
  <data name="CheckListTitle" xml:space="preserve">
    <value>CheckList</value>
  </data>
  <data name="EventsTabHeader" xml:space="preserve">
    <value>Events</value>
  </data>
  <data name="MethodsTabHeader" xml:space="preserve">
    <value>Methods</value>
  </data>
  <data name="PropertiesTabHeader" xml:space="preserve">
    <value>Properties</value>
  </data>
  <data name="RemoveItemsEvent" xml:space="preserve">
    <value>RemoveItems</value>
  </data>
  <data name="SelectAllMethod" xml:space="preserve">
    <value>Select All</value>
  </data>
  <data name="SelectedItemsEvent" xml:space="preserve">
    <value>SelectedItems</value>
  </data>
  <data name="SelectionChangedEventExpenderHeader" xml:space="preserve">
    <value>SelectionChangedEvent</value>
  </data>
  <data name="UnselectAllMethod" xml:space="preserve">
    <value>Unselect All</value>
  </data>
  <data name="MultiSelect" xml:space="preserve">
    <value>MultiSelect</value>
  </data>
  <data name="MultiSelectDes" xml:space="preserve">
    <value>Shows how to use C1MultiSelect</value>
  </data>
  <data name="EnterTag" xml:space="preserve">
    <value>Enter Tag</value>
  </data>
  <data name="ValidationFormDescription" xml:space="preserve">
    <value>Show how to use built-in validation through standard INotifyDataErrorInfo</value>
  </data>
  <data name="ValidationFormTitle" xml:space="preserve">
    <value>Validation Form</value>
  </data>
  <data name="AgeRequirement" xml:space="preserve">
    <value>{0} must be someone at least {1} years of age</value>
    <comment>{0} must be someone at least {1} years of age</comment>
  </data>
  <data name="CanNotWorkMoreThan" xml:space="preserve">
    <value>Can not work more than 8 hours</value>
    <comment>Can not work more than 8 hours</comment>
  </data>
  <data name="CharactersNotAllowed" xml:space="preserve">
    <value>Characters are not allowed.</value>
    <comment>Characters are not allowed.</comment>
  </data>
  <data name="DateOfBirth" xml:space="preserve">
    <value>Date Of Birth</value>
    <comment>Date Of Birth</comment>
  </data>
  <data name="Email" xml:space="preserve">
    <value>e-mail</value>
    <comment>e-mail</comment>
  </data>
  <data name="FavoriteColor" xml:space="preserve">
    <value>Favorite Color</value>
    <comment>Favorite Color</comment>
  </data>
  <data name="Female" xml:space="preserve">
    <value>Female</value>
    <comment>Female</comment>
  </data>
  <data name="FieldMustBeBetween" xml:space="preserve">
    <value>The field {0} must be between {1} and {2}</value>
    <comment>The field {0} must be between {1} and {2}</comment>
  </data>
  <data name="FieldRequired" xml:space="preserve">
    <value>The {0} field is required.</value>
    <comment>The {0} field is required.</comment>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>First Name</value>
    <comment>First Name</comment>
  </data>
  <data name="FormWasValidated" xml:space="preserve">
    <value>The form was validated!</value>
    <comment>The form was validated!</comment>
  </data>
  <data name="Gender" xml:space="preserve">
    <value>Gender</value>
    <comment>Gender</comment>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>Last Name</value>
    <comment>Last Name</comment>
  </data>
  <data name="Male" xml:space="preserve">
    <value>Male</value>
    <comment>Male</comment>
  </data>
  <data name="OtherGender" xml:space="preserve">
    <value>Other</value>
    <comment>Other</comment>
  </data>
  <data name="Picture" xml:space="preserve">
    <value>Picture</value>
    <comment>Picture</comment>
  </data>
  <data name="Stars" xml:space="preserve">
    <value>Stars</value>
    <comment>Stars</comment>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Submit</value>
    <comment>Submit</comment>
  </data>
  <data name="WorkingHours" xml:space="preserve">
    <value>Working hours</value>
    <comment>Working hours</comment>
  </data>
  <data name="StopsSliderDescription" xml:space="preserve">
    <value>Shows a stops slider control allowing to drag the thumbs as well as adding new ones by clicking in the track and remove them with Del key.</value>
  </data>
  <data name="StopsSliderTitle" xml:space="preserve">
    <value>Stops Slider</value>
  </data>
</root>