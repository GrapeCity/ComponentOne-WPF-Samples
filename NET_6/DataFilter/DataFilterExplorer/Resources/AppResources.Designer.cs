//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataFilterExplorer.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class AppResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AppResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DataFilterExplorer.Resources.AppResources", typeof(AppResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply filter.
        /// </summary>
        public static string ApplyFilter {
            get {
                return ResourceManager.GetString("ApplyFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto apply filter.
        /// </summary>
        public static string AutoApplyFilter {
            get {
                return ResourceManager.GetString("AutoApplyFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample demonstrates how to use C1DataFilter control to filter the C1FlexGrid control. Also demonstrates how to modify automatically generated filters, save and restore filter expressions..
        /// </summary>
        public static string CarListDescription {
            get {
                return ResourceManager.GetString("CarListDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cars List.
        /// </summary>
        public static string CarListTitle {
            get {
                return ResourceManager.GetString("CarListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Demonstrate using new conditional filters that accept multiple conditions and a new full text filter..
        /// </summary>
        public static string ConditionalFiltersDescription {
            get {
                return ResourceManager.GetString("ConditionalFiltersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conditional Filters.
        /// </summary>
        public static string ConditionalFiltersTitle {
            get {
                return ResourceManager.GetString("ConditionalFiltersTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating {0:N0} records....
        /// </summary>
        public static string CreatingRecordsMessage {
            get {
                return ResourceManager.GetString("CreatingRecordsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Demonstrates using C1DataFilter control to show custom filters.
        ///There is C1TreeView and C1DataFilter on the window.
        ///The C1TreeView uses CustomContentPresenter to shows data.
        ///The C1DataFilter uses next custom filters:
        ///ColorFilter based on CustomFilter, allows to choose the color of the car;
        ///MapFilter based on CustomFilter, allows to choose the store on map;
        ///ModelFilter based on CustomFilter, allows to choose the model of the car;
        ///PriceFilter based on ChecklistFilter, allows to choose the price range o [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CustomFiltersDescription {
            get {
                return ResourceManager.GetString("CustomFiltersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom Filters.
        /// </summary>
        public static string CustomFilterTitle {
            get {
                return ResourceManager.GetString("CustomFilterTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows the basic features of C1FilterEditor.
        ///This sample demonstrates basic functionality of the C1FilterEditor control. 
        ///The FilterEditor control represents a filter in the form of a tree.Tree nodes can be logical conditions &quot;And&quot; and &quot;Or&quot; or a filter for a data source property. 
        ///The C1FilterEditor.SetExpression method is used to load predefined filter. 
        ///You can use the GetExpression method to get the current filter expression, which you can use for xml serialization.
        ///In this sample FlexGri [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FilterEditorDescription {
            get {
                return ResourceManager.GetString("FilterEditorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter Editor.
        /// </summary>
        public static string FilterEditorTitle {
            get {
                return ResourceManager.GetString("FilterEditorTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample demonstrates how to use the FilterSummary for the Checklist filter. Also shows how to use different aggregate expressions and custom format of filter summaries..
        /// </summary>
        public static string FilterSummaryDescription {
            get {
                return ResourceManager.GetString("FilterSummaryDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter Summary.
        /// </summary>
        public static string FilterSummaryTitle {
            get {
                return ResourceManager.GetString("FilterSummaryTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading records....
        /// </summary>
        public static string LoadingMessage {
            get {
                return ResourceManager.GetString("LoadingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Load or generate Source.
        /// </summary>
        public static string LoadOrGenerate {
            get {
                return ResourceManager.GetString("LoadOrGenerate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset filter.
        /// </summary>
        public static string ResetFilter {
            get {
                return ResourceManager.GetString("ResetFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save filter.
        /// </summary>
        public static string SaveFilter {
            get {
                return ResourceManager.GetString("SaveFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataFilterExplorer.
        /// </summary>
        public static string Title {
            get {
                return ResourceManager.GetString("Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample demonstrate how C1DataFilter can be used with a virtualized source..
        /// </summary>
        public static string VirtualSourceDescription {
            get {
                return ResourceManager.GetString("VirtualSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Virtual Source.
        /// </summary>
        public static string VirtualSourceTitle {
            get {
                return ResourceManager.GetString("VirtualSourceTitle", resourceCulture);
            }
        }
    }
}
