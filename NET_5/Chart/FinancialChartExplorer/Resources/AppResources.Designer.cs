//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FinancialChartExplorer.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class AppResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AppResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FinancialChartExplorer.Resources.AppResources", typeof(AppResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analytics.
        /// </summary>
        internal static string Analytics {
            get {
                return ResourceManager.GetString("Analytics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Created by Richard Arms, Arms CandleVolume charts are a combination of EquiVolume and CandleVolume charts..
        /// </summary>
        internal static string ArmsCandleTag {
            get {
                return ResourceManager.GetString("ArmsCandleTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arms CandleVolume.
        /// </summary>
        internal static string ArmsCandleVolume {
            get {
                return ResourceManager.GetString("ArmsCandleVolume", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CandleVolume.
        /// </summary>
        internal static string CandleVolume {
            get {
                return ResourceManager.GetString("CandleVolume", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CandleVolume charts are identical to standard Candlestick charts, except that the width of each bar is determined by a fifth value, volume..
        /// </summary>
        internal static string CandleVolumeTag {
            get {
                return ResourceManager.GetString("CandleVolumeTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chart Types.
        /// </summary>
        internal static string ChartTypesTitle {
            get {
                return ResourceManager.GetString("ChartTypesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ColumnVolume.
        /// </summary>
        internal static string ColumnVolume {
            get {
                return ResourceManager.GetString("ColumnVolume", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ColumnVolume charts are similar to Column charts, except that they accept a second value, volume, which dictates the width of each bar..
        /// </summary>
        internal static string ColumnVolumeTag {
            get {
                return ResourceManager.GetString("ColumnVolumeTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EquiVolume.
        /// </summary>
        internal static string EquiVolume {
            get {
                return ResourceManager.GetString("EquiVolume", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EquiVolume charts are similar to Candlestick charts, but they only show the high and low values. In addition, the width of each bar is determined by a fifth value, volume..
        /// </summary>
        internal static string EquiVolumeTag {
            get {
                return ResourceManager.GetString("EquiVolumeTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event Annotations.
        /// </summary>
        internal static string EventAnnotations {
            get {
                return ResourceManager.GetString("EventAnnotations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event annotations are used to mark important events that can be attached to a specific data point on the FinancialChart. Hovering over the event annotation will reveal the full details of the event..
        /// </summary>
        internal static string EventAnnotationsTag {
            get {
                return ResourceManager.GetString("EventAnnotationsTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fibonacci Tool.
        /// </summary>
        internal static string FibonacciTool {
            get {
                return ResourceManager.GetString("FibonacciTool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fibonacci tool is used for trend analysis in financial charts. With the help of range selector, you can choose data range for calculation..
        /// </summary>
        internal static string FibonacciToolTag {
            get {
                return ResourceManager.GetString("FibonacciToolTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Heikin-Ashi charts are a variation of Japanese candlestick charts that were designed to remove noise from candlesticks and behave much like a moving average. These charts can be used to identify trends, potential reversal points, and other technical analysis patterns..
        /// </summary>
        internal static string HeikinAshiTag {
            get {
                return ResourceManager.GetString("HeikinAshiTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Heikin-Ashi.
        /// </summary>
        internal static string HeikinAshiTitle {
            get {
                return ResourceManager.GetString("HeikinAshiTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicators.
        /// </summary>
        internal static string Indicators {
            get {
                return ResourceManager.GetString("Indicators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A technical indicator is a set of derived data that is calculated by applying one or more formulas to the original set of data. Technical indicators are generally used to forecast the asset&apos;s market direction and generally plotted separately from the original data since the Y-axis scales differ..
        /// </summary>
        internal static string IndicatorsTag {
            get {
                return ResourceManager.GetString("IndicatorsTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interaction.
        /// </summary>
        internal static string Interaction {
            get {
                return ResourceManager.GetString("Interaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Kagi.
        /// </summary>
        internal static string Kagi {
            get {
                return ResourceManager.GetString("Kagi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Kagi chart displays supply and demand trends using a sequence of linked vertical lines. The thickness and direction of the lines vary depending on the price movement. If closing prices go in the direction of the previous Kagi line, then that Kagi line is extended. However, if the closing price reverses by the preset reversal amount, a new Kagi line is charted in the next column in the opposite direction. Thin lines indicate that the price breaks the previous low (supply) while thick lines indicate that th [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KagiTag {
            get {
                return ResourceManager.GetString("KagiTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line Break.
        /// </summary>
        internal static string LineBreak {
            get {
                return ResourceManager.GetString("LineBreak", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Line Break or Three Line Break chart uses vertical boxes or lines to illustrate the price changes of an asset or market. Movements are depicted with box colors and styles; movements that continue the trend of the previous box are colored similarly while movements that trend oppositely are indicated with a different color and/or style. The opposite trend is only drawn if its value exceeds the extreme value of the previous n number of boxes or lines, which is determined by the newLineBreaks option..
        /// </summary>
        internal static string LineBreakTag {
            get {
                return ResourceManager.GetString("LineBreakTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Markers.
        /// </summary>
        internal static string Markers {
            get {
                return ResourceManager.GetString("Markers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Markers display a text area on the FinancialChart that displays the data values based on the mouse cursor&apos;s position on the chart. Markers also support optional vertical and horizontal lines to enable a cross-hair effect..
        /// </summary>
        internal static string MarkersTag {
            get {
                return ResourceManager.GetString("MarkersTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moving Average.
        /// </summary>
        internal static string MovingAverage {
            get {
                return ResourceManager.GetString("MovingAverage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moving average trend lines are used to analyze data by creating a series of averages of the original data set..
        /// </summary>
        internal static string MovingAveragesTag {
            get {
                return ResourceManager.GetString("MovingAveragesTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overlays.
        /// </summary>
        internal static string Overlays {
            get {
                return ResourceManager.GetString("Overlays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overlays, like technical indicators, are a set of derived data that is calculated by applying one or more formulas to the original set of data. Overlays are generally used to forecast an asset&apos;s market direction and generally plotted with the original data set since the the Y-axis scales are the same..
        /// </summary>
        internal static string OverlaysTag {
            get {
                return ResourceManager.GetString("OverlaysTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Point&amp;Figure.
        /// </summary>
        internal static string PointFigure {
            get {
                return ResourceManager.GetString("PointFigure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Point and Figure chart consists of columns of X&apos;s and O&apos;s that represent filtered price movements. X-Columns represent rising prices and O-Columns represent falling prices..
        /// </summary>
        internal static string PointFigureTag {
            get {
                return ResourceManager.GetString("PointFigureTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Range Selector.
        /// </summary>
        internal static string RangeSelector {
            get {
                return ResourceManager.GetString("RangeSelector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RangeSelector allows end users to adjust the FinancialChart&apos;s visible range of data at runtime. The example below demonstrates the typical use case for the RangeSelector and how to apply a custom style..
        /// </summary>
        internal static string RangeSelectorTag {
            get {
                return ResourceManager.GetString("RangeSelectorTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Renko.
        /// </summary>
        internal static string Renko {
            get {
                return ResourceManager.GetString("Renko", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Renko chart uses bricks of uniform size to chart the price movement. When a price moves to a greater or lesser value than the preset boxSize option required to draw a new brick, a new brick is drawn in the succeeding column. The change in box color and direction signifies a trend reversal..
        /// </summary>
        internal static string RenkoTag {
            get {
                return ResourceManager.GetString("RenkoTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trend Lines.
        /// </summary>
        internal static string TrendLines {
            get {
                return ResourceManager.GetString("TrendLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trend lines are used to visualize trends in data and to help analyze the problems of prediction..
        /// </summary>
        internal static string TrendLinesTag {
            get {
                return ResourceManager.GetString("TrendLinesTag", resourceCulture);
            }
        }
    }
}
