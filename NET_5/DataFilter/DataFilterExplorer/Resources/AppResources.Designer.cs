//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataFilterExplorer.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class AppResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AppResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DataFilterExplorer.Resources.AppResources", typeof(AppResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cars List.
        /// </summary>
        internal static string CarListDescription {
            get {
                return ResourceManager.GetString("CarListDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample demonstrates how to use C1DataFilter control to filter the C1FlexGrid control. Also demonstrates how to modify automatically generated filters, save and restore filter expressions..
        /// </summary>
        internal static string CarListTag {
            get {
                return ResourceManager.GetString("CarListTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cars List.
        /// </summary>
        internal static string CarListTitle {
            get {
                return ResourceManager.GetString("CarListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom Filters.
        /// </summary>
        internal static string CustomFilterDescription {
            get {
                return ResourceManager.GetString("CustomFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Demonstrates using C1DataFilter control to show custom filters.\r There is C1TreeView and C1DataFilter on the window.\r The C1TreeView uses CustomContentPresenter to shows data.\r The C1DataFilter uses three custom filters:\r ColorFilter based on CustomFilter, allows to choose the color of the car;\r MapFilter based on CustomFilter, allows to choose the store on map;\r ModelFilter based on CustomFilter, allows to choose the model of the car;\r PriceFilter based on ChecklistFilter, allows to choose the price [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CustomFiltersTag {
            get {
                return ResourceManager.GetString("CustomFiltersTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom Filters.
        /// </summary>
        internal static string CustomFilterTitle {
            get {
                return ResourceManager.GetString("CustomFilterTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter Editor.
        /// </summary>
        internal static string FilterEditorDescription {
            get {
                return ResourceManager.GetString("FilterEditorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows the basic features of C1FilterEditor. \r This sample demonstrates basic functionality of the C1FilterEditor control. \r The FilterEditor control represents a filter in the form of a tree.Tree nodes can be logical conditions \&quot;And\&quot; and \&quot;Or\&quot; or a filter for a data source property. \r The C1FilterEditor.SetExpression method is used to load predefined filter. \r You can use the GetExpression method to get the current filter expression, which you can use for xml serialization. \r In this sam [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FilterEditorTag {
            get {
                return ResourceManager.GetString("FilterEditorTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter Editor.
        /// </summary>
        internal static string FilterEditorTitle {
            get {
                return ResourceManager.GetString("FilterEditorTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter Summary.
        /// </summary>
        internal static string FilterSummaryDescription {
            get {
                return ResourceManager.GetString("FilterSummaryDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample demonstrates how to use the FilterSummary for the Checklist filter. Also shows how to use different aggregate expressions and custom format of filter summaries..
        /// </summary>
        internal static string FilterSummaryTag {
            get {
                return ResourceManager.GetString("FilterSummaryTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter Summary.
        /// </summary>
        internal static string FilterSummaryTitle {
            get {
                return ResourceManager.GetString("FilterSummaryTitle", resourceCulture);
            }
        }
    }
}
