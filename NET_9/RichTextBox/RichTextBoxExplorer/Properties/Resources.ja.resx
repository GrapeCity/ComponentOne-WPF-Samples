<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Demo" xml:space="preserve">
    <value>C1RichTextBox コントロールを使用して、複数のフォント、装飾、サイズ、色、および画像や表などの他の基本的な HTML および RTF 機能を含むリッチテキストを編集およびフォーマットします。</value>
    <comment>Edit and format rich text containing multiple fonts, decorations, sizes, colors, and other basic HTML and RTF features such as pictures and tables using the C1RichTextBox control.</comment>
  </data>
  <data name="DemoFilter" xml:space="preserve">
    <value>C1RichTexBox は、HTML および RTF コンテンツを独自の内部ドキュメント構造に変換することで機能します。コントロールはこれらの形式をインポートおよびエクスポートできるため、HTML を RTF に、またはその逆に変換できるツールとしても機能します。</value>
    <comment>C1RichTexBox works by converting HTML and RTF content to its own internal document structure. The control can import and export these formats, and therefore, also work as a tool that can convert HTML to RTF and vice versa.</comment>
  </data>
  <data name="DemoFilterTitle" xml:space="preserve">
    <value>インポート＆エクスポート</value>
    <comment>Import &amp; Export</comment>
  </data>
  <data name="DemoTitle" xml:space="preserve">
    <value>概要</value>
    <comment>Overview</comment>
  </data>
  <data name="Format" xml:space="preserve">
    <value>C1RichTextBox コントロールは、フォント、段落の配置、リスト、クリップボード、画像、リンク、表などのオブジェクトの挿入など、リッチテキストエディターで必要なすべてのリッチフォーマット機能をサポートします。</value>
    <comment>The C1RichTextBox control supports all of the rich formatting features you need in a rich text editor such as fonts, paragraph alignment, lists, clipboard, inserting objects like pictures, links, tables, and more.</comment>
  </data>
  <data name="FormatTitle" xml:space="preserve">
    <value>書式</value>
    <comment>Formatting</comment>
  </data>
  <data name="ToolStrip" xml:space="preserve">
    <value>このサンプルは、よりシンプルな編集ツールストリップを備えた C1RichTextBox を示しています。</value>
    <comment>This sample shows C1RichTextBox with a simpler editing toolstrip.</comment>
  </data>
  <data name="ToolStripTitle" xml:space="preserve">
    <value>ツールストリップ</value>
    <comment>ToolStrip</comment>
  </data>
  <data name="Title" xml:space="preserve">
    <value>RichTextBoxエクスプローラー</value>
  </data>
  <data name="Menu_Home" xml:space="preserve">
    <value>ホーム</value>
    <comment>Home</comment>
  </data>
  <data name="Menu_Tables" xml:space="preserve">
    <value>表</value>
    <comment>Tables</comment>
  </data>
  <data name="SubMenu_Edit" xml:space="preserve">
    <value>編集</value>
    <comment>Edit</comment>
  </data>
  <data name="SubMenu_Font" xml:space="preserve">
    <value>フォント</value>
    <comment>Font</comment>
  </data>
  <data name="SubMenu_Paragraph" xml:space="preserve">
    <value>段落</value>
    <comment>Paragraph</comment>
  </data>
  <data name="SubMenu_Insert" xml:space="preserve">
    <value>挿入</value>
    <comment>Insert</comment>
  </data>
  <data name="SubMenu_Tools" xml:space="preserve">
    <value>ツール</value>
    <comment>Tools</comment>
  </data>
  <data name="SubMenu_Table" xml:space="preserve">
    <value>表</value>
    <comment>Table</comment>
  </data>
  <data name="SubMenu_RowsAndColumns" xml:space="preserve">
    <value>行と列</value>
    <comment>Rows And Columns</comment>
  </data>
  <data name="SubMenu_Merge" xml:space="preserve">
    <value>結合</value>
    <comment>Merge</comment>
  </data>
  <data name="SubMenu_Cell" xml:space="preserve">
    <value>セル</value>
    <comment>Cell</comment>
  </data>
  <data name="Menu_View" xml:space="preserve">
    <value>表示</value>
    <comment>View</comment>
  </data>
  <data name="SubMenu_Document" xml:space="preserve">
    <value>文書</value>
    <comment>Document</comment>
  </data>
  <data name="SubMenu_Zoom" xml:space="preserve">
    <value>ズーム</value>
    <comment>Zoom</comment>
  </data>
  <data name="SubMenu_LineNumber" xml:space="preserve">
    <value>行番号</value>
    <comment>Line Number</comment>
  </data>
</root>