<?xml version="1.0" encoding="utf-8"?>
<Controls>
  <Group name="Data Management" isExpanded="true">
    <Control name="DataGrid" isTop="true" 
         assembly="C1.WPF.DataGrid">
      <Feature assemblyName="DataGridSamples.4.exe" type="DataGridSamples.DemoGrid" source="C1.WPF.DataGrid\CS\DataGridSamples\DataGrid\DataGridPage.xaml">
        <Description>The C1DataGrid control makes it easy to display, edit and analyze tabular data. This demo shows all the functionality supported by default including sorting, filtering, grouping, frozen columns and column/row resizing.</Description>
        <Properties>
          <Property name="HeadersVisibility" />
          <Property name="SelectionMode" />
          <Property name="CanUserSort" />
          <Property name="CanUserFilter" />
          <Property name="IsReadOnly" />
          <Property name="CanUserRemoveRows" />
          <Property name="CanUserAddRows" />
          <Property name="CanUserEditRows" />
          <Property name="CanUserGroup"
                    value="true" />
          <Property name="CanUserResizeColumns" />
          <Property name="CanUserResizeRows" />
          <Property name="ShowGroupingPanel" />
          <Property name="CanUserFreezeColumns"
                    value="Left" />
          <Property name="GridLinesVisibility"/>
          <Property name="ShowVerticalFreezingSeparator" />
          <Property name="FrozenColumnCount"
                    value="1"
                    minimumValue="0"
                    maximumValue="11" />
          <Property name="IsLoading" />
        </Properties>
      </Feature>
      <Feature name="Selection" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Selection\SelectionPage.xaml"
               type="DataGridSamples.Selection">
        <Description>C1DataGrid supports several selection modes enabling multiple ways to provide Microsoft Excel-like cell selection.</Description>
        <Properties>
          <Property name="SelectionMode" />
          <Property name="ColumnHeaderClickAction" />
        </Properties>
      </Feature>
      <Feature name="Data Input" assemblyName="DataGridSamples.4.exe"
               type="DataGridSamples.DataInput">
        <SubFeatures>
          <SubFeature name="Add &amp; Remove" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\DataInput\AddRemoveRows\AddRemoveRowsPage.xaml"
                      type="DataGridSamples.AddRemoveRows">
            <Description>C1DataGrid is specially designed for data input with support of &quot;new row&quot; and deletion.</Description>
          </SubFeature>
          <SubFeature name="Validation" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\DataInput\Validation\Validation.xaml"
                      type="DataGridSamples.Validation">
            <Description>C1DataGrid also supports the built-in WPF validation framework.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Filters" isExpanded="true">
        <Description>Shows how filters can be easily customized in the C1DataGrid.</Description>
        <SubFeatures>
          <SubFeature name="Filter Row" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Filters\FilterRow\FilterRowPage.xaml"
                      type="DataGridSamples.FilterRow" />
          <SubFeature name="Full Text search" assemblyName="DataGridSamples.4.exe" 
                      source="C1.WPF.DataGrid\CS\DataGridSamples\Filters\FullTextSearch\FullTextSearchPage.xaml"
                      type="DataGridSamples.FullTextSearch" />
          <SubFeature name="Auto Filter" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Filters\AutoFilter\AutoFilterPage.xaml"
                      type="DataGridSamples.AutoFilter" />
          <SubFeature name="Custom Filters" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Filters\CustomFilters\CustomFilters.xaml"
                      type="DataGridSamples.CustomFilters" />
          <SubFeature name="Default - Excel Like" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Filters\DefaultFilter\DefaultFilterPage.xaml"
                      type="DataGridSamples.DefaultFilter" />
        </SubFeatures>
      </Feature>
      <Feature name="Grouping" assemblyName="DataGridSamples.4.exe"
               type="DataGridSamples.Grouping">
        <Description>Shows how to group the data in the grid and show customized summary rows.</Description>
        <SubFeatures>
          <SubFeature name="Group Summary" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Grouping\GroupSummary\GroupSummaryPage.xaml"
                      type="DataGridSamples.GroupSummary" />
          <SubFeature name="Grand Total" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Grouping\GrandTotal\GrandTotalPage.xaml"
                      type="DataGridSamples.GrandTotal" />
        </SubFeatures>
      </Feature>
      <Feature name="Hierarchical">
        <Description>There are many ways to achieve hierarchical scenarios, and we support different alternatives. This sample shows how to hide rows using the Row.Visibility property.</Description>
        <SubFeatures>
          <SubFeature name="Using Row.Visibility" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Hierarchical\HierarchicalTasks\HierarchicalTasksPage.xaml"
                      type="DataGridSamples.HierarchicalTasks" />
          <SubFeature name="Nested grids" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Hierarchical\NestedGrids\NestedGridsPage.xaml"
                      type="DataGridSamples.Hierarchical">
            <Description>This sample shows nesting C1DataGrids for parent/child scenarios.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="ClearStyle" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Appearance\AppearancePage.xaml"
               type="DataGridSamples.Appearance">
        <Description>Just change a few brush properties to quickly create a custom style for the C1DataGrid control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush" />
          <Property name="GridLinesVisibility" />
          <Property name="VerticalGridLinesBrush" />
          <Property name="HorizontalGridLinesBrush" />
          <Property name="RowBackground" />
          <Property name="AlternatingRowBackground" />
          <Property name="RowForeground" />
          <Property name="AlternatingRowForeground" />
          <Property name="SelectedBackground" />
          <Property name="MouseOverBrush" />
          <Property name="PressedBrush" />
          <Property name="ValidationBackground" />
          <Property name="ValidationForeground" />
          <Property name="GroupingPanelBackground" />
          <Property name="GroupingPanelForeground" />
          <Property name="HeaderBackground" />
          <Property name="HeaderForeground" />
          <Property name="DEMO_BorderThickness"
                    caption="BorderThickness" />
        </Properties>
      </Feature>
      <Feature name="More" assemblyName="DataGridSamples.4.exe"
               type="DataGridSamples.Advanced">
        <Description>Looking for more scenarios? No problem with the C1DataGrid control, which was designed from scratch to support both simple and complex scenarios. You can customize rows and columns, localize it, export data and much more.</Description>
        <SubFeatures>
          <SubFeature name="Export Formats" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\ExportFormats\ExportFormatsPage.xaml"
                      type="DataGridSamples.ExportFormats">
            <Description>C1DataGrid can easily export its content to several standard formats: HTML, PDF and Excel (through both clipboard or file export).</Description>
          </SubFeature>
          <SubFeature name="Custom Columns" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Advanced\CustomColumns\CustomColumnsPage.xaml"
                      type="DataGridSamples.CustomColumns" />
          <SubFeature name="Hyperlinks" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Advanced\Hyperlinks.xaml"
                      type="DataGridSamples.Hyperlinks">
            <Description>See how to use hyperlink columns.</Description>
          </SubFeature>
          <SubFeature name="Custom Rows" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Advanced\CustomRows\CustomRowsPage.xaml"
                      type="DataGridSamples.CustomRows" />
          <SubFeature name="Conditional Format" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Advanced\ConditionalFormat\ConditionalFormatPage.xaml"
                      type="DataGridSamples.ConditionalFormat" />
          <SubFeature name="Drag &amp; Drop Rows" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Advanced\DragAndDropRows\DragAndDropRows.xaml"
                      type="DataGridSamples.DragAndDropRows" />
        </SubFeatures>
      </Feature>
    </Control>
    <Control name="FlexGrid" isTop="true" isNew="true" assembly="C1.WPF.FlexGrid.4">
      <Feature type="ShowCase.ShowCaseSample"  name="ShowCase"  assemblyName="ShowCase.exe" source="C1.WPF.FlexGrid\CS\ShowCase\ShowCase\ShowCaseSample.xaml" isNew="true">
        <Description>
          The modern, high-performance FlexGrid control comes with flexible data binding and an easy-to-use API for maximum configuration and customization.
        </Description>
      </Feature>
      <Feature type="MainTestApplication.Financial" assemblyName="FlexGridSamples.exe" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Financial\Financial.xaml">
        <Description>
          C1FlexGrid is a DataGrid control with a lightweight, flexible object model. C1FlexGrid offers many unique features such as unbound mode, flexible cell merging, and multi-cell row and column headers.&#10;
          Drag the freezing line to change the number of frozen columns or rows.
        </Description>
      </Feature>
      <Feature name="Filtering" assemblyName="FlexGridSamples.exe" isExpanded="true">
        <SubFeatures>
          <SubFeature name="Filtering" assemblyName="FlexGridSamples.exe"
               type="MainTestApplication.Filtering" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Filtering\Filtering.xaml" >
            <Description>This demo shows how to enable column filtering. Users may click a drop-down on the column headers to set up filters. Active filters are indicated by an icon on the column header. Filters may be used in bound and unbound modes.</Description>
          </SubFeature>
          <SubFeature name="Full Text Filter" assemblyName="FlexGridSamples.exe" 
               type="MainTestApplication.FullTextFilter" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Filtering\FullTextFilter.xaml" >
            <Description>This demo shows how to use FullTextFilter to filter and highlight the data across all columns.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Grouping" assemblyName="FlexGridSamples.exe">
        <SubFeatures>
          <SubFeature name="Grouping" assemblyName="FlexGridSamples.exe" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Grouping\Grouping.xaml"
                      type="MainTestApplication.Grouping">
            <Description>This demo shows how the C1FlexGrid supports ICollectionView data grouping. It also shows how you can use the AllowMerging property to merge adjacent cells that have the same content.</Description>
          </SubFeature>
          <SubFeature name="Grouping Panel" assemblyName="FlexGridSamples.exe" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Grouping\GroupingPanel.xaml"
                      type="MainTestApplication.GroupingPanel">
            <Description>Create groups by dragging column headers into the grouping areas. Once you have created the groups, drag the markers to re-order the groups, or click them to remove or sort the groups.</Description>
          </SubFeature>
          <SubFeature name="Custom Grouping" assemblyName="FlexGridSamples.exe" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Grouping\CustomGrouping.xaml"
                      type="MainTestApplication.CustomGrouping">
            <Description>This demo shows how to define custom grouping logic using simple value converters. Group by Price, Cost or Introduced to see custom groups.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="iTunes"
               type="MainTestApplication.iTunes" source="C1.WPF.FlexGrid\CS\FlexGridSamples\iTunes\iTunes.xaml"
               assemblyName="FlexGridSamples.exe">
        <Description>This demo displays a library of about 10,000 songs grouped by artist and album. It includes a search box that allows users to find songs, albums, or artists quickly and easily. The filtering is done on the data view. This demo showcases the C1FlexGrid&#39;s CellFactory interface used for customizing cells. We use custom cells to display images next to the artists, albums, songs, collapse/expand icons, and ratings. We can easily create custom cells by inheriting the ICellFactory interface and providing the FrameworkElement objects used to represent the cells.</Description>
      </Feature>
      <Feature name="Selection"
               type="MainTestApplication.SelectionMode" source="C1.WPF.FlexGrid\CS\FlexGridSamples\SelectionMode\SelectionMode.xaml"
               assemblyName="FlexGridSamples.exe">
        <Description>The C1FlexGrid has a rich selection model controlled by the SelectionMode property. You can set the selection mode to single cell, cell range (block of adjacent cells), single row, row range, or list box (not necessarily contiguous). Regardless of the selection mode, the C1FlexGrid always returns the selected cells as a CellRange object so you can easily monitor and work with the selected data.</Description>
      </Feature>
      <Feature name="Unbound"
               type="MainTestApplication.Unbound" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Unbound\Unbound.xaml"
               assemblyName="FlexGridSamples.exe">
        <Description>In addition to working with IEnumerable data sources, the C1FlexGrid also supports an unbound mode, where cell values are stored in the grid itself and are accessed using familiar indexing notation. This demo also shows how you can set up merged multi-cell row and column headers.</Description>
      </Feature>
      <Feature name="Editing"
               type="MainTestApplication.Editing" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Editing\Editing.xaml"
               assemblyName="FlexGridSamples.exe">
        <Description>The C1FlexGrid supports Excel-style editing. Just type values into cells and use the enter or arrow keys to move to the next one. Or press F2 and enter full-edit mode, where arrow keys navigate within the editor. Auto-complete and value-mapped columns are also built-in: simply create a ColumnValueConverter and assign it to the columns ValueConverter property and you're done. Transactioned edits are supported too. The Customer class used here implements IEditableObject, so you can undo changes by pressing the Escape key before you move to a new row. (Note: the gray columns are read-only).</Description>
      </Feature>
    </Control>
    <Control name="FlexSheet"
         assembly="C1.WPF.FlexSheet">
      <Feature assemblyName="FlexSheetSample.exe" type="FlexSheetSample.FlexSheetDemo" source="C1.WPF.FlexGrid.FlexSheet\CS\FlexSheetSample\FlexSheetSample\FlexSheetDemo.xaml" >
        <Description>C1FlexSheet provides Microsoft Excel-like spreadsheet functionality for WPF applications, including support for multiple sheets, formulas, cell formatting and more.</Description>
      </Feature>
    </Control>
    <Control name="ListBox"
         assembly="C1.Silverlight">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.ListBoxSample" source="C1.WPF\CS\BasicControls\ItemsControls\ListBoxSample.xaml">
        <Description>The C1ListBox control is a high performance list box that has zoom functionality built-in. To zoom, hold CTRL while using the mouse wheel or perform a pinch gesture if you're on a touch-enabled device.</Description>
        <Properties>
          <Property name="Orientation" />
          <Property name="ZoomMode"/>
          <Property name="SelectionMode"/>
          <Property name="HorizontalScrollBarVisibility"/>
          <Property name="VerticalScrollBarVisibility"/>
        </Properties>
      </Feature>
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.ListBoxSample" source="C1.WPF\CS\BasicControls\ItemsControls\ListBoxSample.xaml"
           name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the C1ListBox control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush" />
          <Property name="SelectedBackground"/>
          <Property name="ButtonBackground"/>
          <Property name="ButtonForeground"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
          <Property name="DEMO_BorderThickness"
                    caption="BorderThickness" />
          <Property name="CornerRadius"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="OLAP" assembly="C1.WPF.Olap">
      <Feature name="See it in action"
               type="OlapSamples.OlapDemo" assemblyName="OlapSamples.exe" source="C1.WPF.Olap\CS\OlapSamples\OlapSamples\Samples\OlapDemo.xaml" >
        <Description>Create pivot grids and charts that slice and dice your tabular and cube data to give you real-time information, insights, and results in seconds. The easy to use controls are modeled after Microsoft Excel® Pivot Tables, so they’re powerful and familiar for all users.</Description>
      </Feature>
    </Control>
    <Control name="DataFilter" assembly="C1.WPF.DataFilter" isNew="true">
      <Feature
        name="Employee list with filter" type="EmployeesListWithFilter.DataFilterSample" assemblyName="EmployeesListWithFilter.exe"
        source="C1.WPF.DataFilter\CS\EmployeesListWithFilter\Samples\DataFilterSample.xaml">
        <Description>The DataFilter lets users filter data based on criteria's. It makes it easy to create filters from data sources, filters can be auto generated or created manually. 
The Accordion based filtering UI can be attached to any control or information screen to provide intuitive filtering experience.</Description>
      </Feature>
      <Feature
        name="Cars list with filter" type="CarsListWithFilter.CarsListControl" assemblyName="CarsListWithFilter.exe"
         source="C1.WPF.DataFilter\CS\CarsListWithFilter\Samples\CarsListControl.xaml">
        <Description>This sample shows how to modify automatically generated filters, save and restore filter expressions.</Description>
      </Feature>
      <Feature
        name="Filter summary" type="FilterSummary.FilterSummarySample" assemblyName="FilterSummary.exe"
        source="C1.WPF.DataFilter\CS\FilterSummary\Samples\FilterSummaryControl.xaml">
        <Description>This sample shows how to use different aggregate expressions and custom format of filter summaries.</Description>
      </Feature>
      <Feature
        name="Filter Editor" type="FilterEditor.FilterEditorSample" isNew="true" assemblyName="FilterEditor.exe"
        source="C1.WPF.DataFilter\CS\FilterEditor\Samples\FilterEditorControl.xaml">
        <Description>The FilterEditor allows end-users to create complex filter criteria. The TreeView based filtering UI can be attached to any control or information screen. For every operation control shows drop-down hints with available options.</Description>
      </Feature>
    </Control>
  </Group>
  <Group name="Data Visualization" isExpanded="true">
    <Control name="Chart3D"
            assembly="C1.WPF.Chart3D">
      <Feature assemblyName="ChartSamples.4.exe" type="ChartSamples.Function3D" source="C1.WPF.Chart\CS\ChartSamples\3D\Function3D.xaml" >
        <Description>Graph your data in three dimensions. With the C1Chart3D control you can create surface charts with options for contour levels, zones, a legend and more.</Description>
      </Feature>
      <Feature name="Interaction and labels" assemblyName="ChartSamples.4.exe" type="ChartSamples.Elevation" source="C1.WPF.Chart\CS\ChartSamples\3D\Elevation.xaml" >
        <Description>Display tooltips that contain point information as you interact with the chart by dragging the plot area.</Description>
      </Feature>
    </Control>
    <Control name="Chart"
     assembly="C1.WPF.Chart">
      <Description>The C1Chart control supports all common chart types including Bar, Column, Area, Line, Pie and Scatter. Customize the appearance with 12 built-in themes and 22 color palettes.</Description>
      <Feature assemblyName="ChartSamples.4.exe" type="ChartSamples.Gallery" source="C1.WPF.Chart\CS\ChartSamples\Basics\Gallery.xaml">
        <Description>This demo displays all 2D and 3D chart types supported by C1Chart.</Description>
      </Feature>
      <Feature name="Special Charts" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.Labels">
        <SubFeatures>
          <SubFeature name="Financial" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Combination\FinancialChart.xaml"
                      type="ChartSamples.FinancialChart">
            <Description>This demo shows a financial chart with two Y axes.</Description>
          </SubFeature>
          <SubFeature name="Radar" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Basics\Radar.xaml"
                      type="ChartSamples.Radar">
            <Description>This demo shows a radar chart.</Description>
          </SubFeature>
          <SubFeature name="Range Bar Chart" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Basics\RangeBarChart.xaml"
                      type="ChartSamples.RangeBarChart">
            <Description>This demo displays a Gantt chart to visualize high and low temperatures.</Description>
          </SubFeature>
          <SubFeature name="Bubble" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Appearance\Bubble.xaml"
                      type="ChartSamples.Bubble">
            <Description>This demo shows a bubble chart with a custom style applied to the plot elements.</Description>
          </SubFeature>
          <SubFeature name="Stacked Pie" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Appearance\StackedPie.xaml"
                      type="ChartSamples.StackedPie">
            <Description>Shows stacked pie chart.</Description>
          </SubFeature>
          <SubFeature name="Complex Column" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Combination\ComplexChart.xaml"
                      type="ChartSamples.ComplexChart">
            <Description>Combine different chart types with different data series. This demo shows a complex stacked bar chart.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Markers &amp; Labels" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.Labels">
        <SubFeatures>
          <SubFeature name="Simple Marker" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\SimpleMarker.xaml"
                      type="ChartSamples.SimpleMarker">
            <Description>This demo shows how to create a simple marker using the ChartPanelObject class. Hover over the chart to see the marker.</Description>
          </SubFeature>
          <SubFeature name="Mouse Marker" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\MouseMarker.xaml"
                      type="ChartSamples.MouseMarker">
            <Description>This demo shows a marker that moves with the mouse cursor.</Description>
          </SubFeature>
          <SubFeature name="Crosshairs" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\Markers.xaml"
                      type="ChartSamples.Markers">
            <Description>This demo shows horizontal and vertical line markers like crosshairs.</Description>
          </SubFeature>
          <SubFeature name="Static Labels" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Basics\Labels.xaml"
                      type="ChartSamples.Labels">
            <Description>This demo shows static labels and tooltips for data points. It also shows the built-in percentage series label. Any UIElement can be placed inside tooltips and labels.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Interaction" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.InteractiveChart">
        <SubFeatures>
          <SubFeature name="Interactive Zoom" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\InteractiveChart.xaml"
                      type="ChartSamples.InteractiveChart">
            <Description>Enhance the end-user experience by allowing users to zoom, scale, and scroll the chart. The C1Chart control includes built-in zooming, panning (translate) and scaling actions.</Description>
          </SubFeature>
          <SubFeature name="Overview Plus Detail" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\ZoomChartControl.xaml"
                      type="ChartSamples.ZoomChartControl">
            <Description>Select a range on the top chart and see the detail on the bottom chart. This demo also uses C1RangeSlider.</Description>
          </SubFeature>
          <SubFeature name="Drag and Drop" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\DragDrop.xaml"
                      type="ChartSamples.DragDrop">
            <Description>With C1Chart you have complete control over each visual plot element. This demo uses the C1DragDropManager class to implement drag and drop between two charts.</Description>
          </SubFeature>
          <SubFeature name="Selection" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\Selection.xaml"
                      type="ChartSamples.Selection">
            <Description>Selection support for data source implementing ICollectionView interface. This demo also uses C1FlexGrid.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Grouping &amp; Aggregation" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.AggregateCategoryAxis">
        <SubFeatures>
          <SubFeature name="Category Grouping" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Aggregation\AggregateCategoryAxis.xaml"
                      type="ChartSamples.AggregateCategoryAxis">
            <Description>This demo shows how you can group on some property from your data object such as a name or category.</Description>
          </SubFeature>
          <SubFeature name="Date Axis" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Aggregation\AggregateDateAxis.xaml"
                      type="ChartSamples.AggregateDateAxis">
            <Description>This demo shows how to group items by dates to show summarized plots for years, months, weeks and so on.</Description>
          </SubFeature>
          <SubFeature name="Range Distribution" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Aggregation\AggregateRange.xaml"
                      type="ChartSamples.AggregateRange">
            <Description>This demo shows how you can count items by value range. This chart shows the number of items that meet the criteria of each value range.</Description>
          </SubFeature>
          <SubFeature name="Series Aggregation" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Aggregation\AggregateChart.xaml"
                              type="ChartSamples.AggregateChart">
            <Description>This demo shows how you can aggregate each data series into one total sum, count, average and so on.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Appearance" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.VisualEffects">
        <SubFeatures>
          <SubFeature name="Plot Areas" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Combination\PlotAreasHorizontal.xaml"
                      type="ChartSamples.PlotAreasHorizontal">
            <Description>C1Chart supports multiple plot areas you can stack horizontally and vertically.</Description>
          </SubFeature>
          <SubFeature name="Load Animation" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Appearance\LoadAnimation.xaml"
                      type="ChartSamples.LoadAnimation">
            <Description>C1Chart provides an easier API to provide loading animations that are very customizable.</Description>
          </SubFeature>
          <SubFeature name="Transition Animation" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Appearance\Animation.xaml"
                      type="ChartSamples.Animation">
            <Description>This demo shows a transitional animation when loading new data.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Performance" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.MainPage">
        <SubFeatures>
          <SubFeature name="Live" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Performance\Dynamic.xaml"
                      type="ChartSamples.Dynamic">
            <Description>When C1Chart is bound to an ObservableCollection any changes to the data are automatically reflected in the control. This demo shows a dynamic line chart with automatic calculation of min, max and average values.</Description>
          </SubFeature>
          <SubFeature name="Large data" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Performance\LargeData.xaml"
                      type="ChartSamples.LargeData">
            <Description>Scrollable line chart with 50,000 data points demonstrating optimization radius technique.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Axes" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.LogAxes">
        <SubFeatures>
          <SubFeature name="Logarithmic" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Axes\LogAxes.xaml"
                      type="ChartSamples.LogAxes">
            <Description>Shows various options of logarithmic chart axes.</Description>
          </SubFeature>
          <SubFeature name="Dependent" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Axes\DependentAxes.xaml"
                      type="ChartSamples.DependentAxes">
            <Description>C1Chart supports multiple Y-axes with different units of measurement.</Description>
          </SubFeature>
          <SubFeature name="Origin" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Axes\AxisOrigin.xaml"
                      type="ChartSamples.AxisOrigin">
            <Description>Position the axis by changing its origin.</Description>
          </SubFeature>
          <SubFeature name="Custom labels" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Axes\CustomLabels.xaml"
                      type="ChartSamples.CustomLabels">
            <Description>Display custom labels on the axes.</Description>
          </SubFeature>
          <SubFeature name="Ticks" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Axes\AxisTicks.xaml"
                      type="ChartSamples.AxisTicks">
            <Description>Customize the length and overlap of axis tick marks.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Extended" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.AggregateChart">
        <SubFeatures>
          <SubFeature name="Image export" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Basics\ImageExport.xaml"
                      type="ChartSamples.ImageExport">
            <Description>This demo shows how you can save the chart locally as an image.</Description>
          </SubFeature>
          <SubFeature name="Parametric" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Advanced\Parametric.xaml"
                      type="ChartSamples.Parametric">
            <Description>Shows plotting of a parametric function.</Description>
          </SubFeature>
          <SubFeature name="Trendlines" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Advanced\TrendLines.xaml"
                      type="ChartSamples.TrendLines">
            <Description>Analyze your charted data with support for automatic trend lines. C1Chart supports several different types including polynomial, exponential, logarithmic, power, Fourier, average, moving average, minimum and maximum.</Description>
          </SubFeature>
          <SubFeature name="Moving Average" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Advanced\MovAverage.xaml"
                      type="ChartSamples.MovAverage">
            <Description>Shows a moving average trend line.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
    </Control>
    <Control name="FinancialChart"
      assembly="C1.WPF.FinancialChart" >
      <Feature name="Chart Types">
        <SubFeatures>
          <SubFeature name="Heikin-Ashi" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.HeikinAshi" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\HeikinAshi.xaml" >
            <Description>Heikin-Ashi charts are a variation of Japanese candlestick charts that were designed to remove noise from candlesticks and behave much like a moving average. These charts can be used to identify trends, potential reversal points, and other technical analysis patterns.</Description>
          </SubFeature>
          <SubFeature name="Line Break" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.LineBreak" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\LineBreak.xaml" >
            <Description>A Line Break or Three Line Break chart uses vertical boxes or lines to illustrate the price changes of an asset or market. Movements are depicted with box colors and styles; movements that continue the trend of the previous box are colored similarly while movements that trend oppositely are indicated with a different color and/or style. The opposite trend is only drawn if its value exceeds the extreme value of the previous n number of boxes or lines, which is determined by the newLineBreaks option.</Description>
          </SubFeature>
          <SubFeature name="Renko" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.Renko" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\Renko.xaml" >
            <Description>The Renko chart uses bricks of uniform size to chart the price movement. When a price moves to a greater or lesser value than the preset boxSize option required to draw a new brick, a new brick is drawn in the succeeding column. The change in box color and direction signifies a trend reversal.</Description>
          </SubFeature>
          <SubFeature name="Kagi" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.Kagi" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\Kagi.xaml" >
            <Description>A Kagi chart displays supply and demand trends using a sequence of linked vertical lines. The thickness and direction of the lines vary depending on the price movement. If closing prices go in the direction of the previous Kagi line, then that Kagi line is extended. However, if the closing price reverses by the preset reversal amount, a new Kagi line is charted in the next column in the opposite direction. Thin lines indicate that the price breaks the previous low (supply) while thick lines indicate that the price breaks the previous high (demand).</Description>
          </SubFeature>
          <SubFeature name="ColumnVolume" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.ColumnVolume" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\ColumnVolume.xaml" >
            <Description>ColumnVolume charts are similar to Column charts, except that they accept a second value, volume, which dictates the width of each bar.</Description>
          </SubFeature>
          <SubFeature name="EquiVolume" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.EquiVolume" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\EquiVolume.xaml" >
            <Description>EquiVolume charts are similar to Candlestick charts, but they only show the high and low values. In addition, the width of each bar is determined by a fifth value, volume.</Description>
          </SubFeature>
          <SubFeature name="CandleVolume" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.CandleVolume" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\CandleVolume.xaml" >
            <Description>CandleVolume charts are identical to standard Candlestick charts, except that the width of each bar is determined by a fifth value, volume.</Description>
          </SubFeature>
          <SubFeature name="Arms CandleVolume" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.ArmsCandleVolume" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\ArmsCandleVolume.xaml" >
            <Description>Created by Richard Arms, Arms CandleVolume charts are a combination of EquiVolume and CandleVolume charts.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Interaction">
        <SubFeatures>
          <SubFeature name="Markers" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.Markers" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\Markers.xaml" >
            <Description>Markers display a text area on the FinancialChart that displays the data values based on the mouse cursor's position on the chart. Markers also support optional vertical and horizontal lines to enable a cross-hair effect.</Description>
          </SubFeature>
          <SubFeature name="Range Selector" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.RangeSelector" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\RangeSelector.xaml" >
            <Description>The RangeSelector allows end users to adjust the FinancialChart's visible range of data at runtime. The example below demonstrates the typical use case for the RangeSelector and how to apply a custom style.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Analytics">
        <SubFeatures>
          <SubFeature name="Trend Lines" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.TrendLines" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\TrendLines.xaml" >
            <Description>Trend lines are used to visualize trends in data and to help analyze the problems of prediction.</Description>
          </SubFeature>
          <SubFeature  name="Moving Averages" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.MovingAverages" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\MovingAverages.xaml" >
            <Description>Moving average trend lines are used to analyze data by creating a series of averages of the original data set.</Description>
          </SubFeature>
          <SubFeature name="Overlays" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.Overlays" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\Overlays.xaml" >
            <Description>Overlays, like technical indicators, are a set of derived data that is calculated by applying one or more formulas to the original set of data. Overlays are generally used to forecast an asset's market direction and generally plotted with the original data set since the the Y-axis scales are the same.</Description>
          </SubFeature>
          <SubFeature name="Indicators" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.Indicators" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\Indicators.xaml" >
            <Description>A technical indicator is a set of derived data that is calculated by applying one or more formulas to the original set of data. Technical indicators are generally used to forecast the asset's market direction and generally plotted separately from the original data since the Y-axis scales differ.</Description>
          </SubFeature>
          <SubFeature name="Event Annotations" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.EventAnnotations" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\EventAnnotations.xaml" >
            <Description>Event annotations are used to mark important events that can be attached to a specific data point on the FinancialChart. Hovering over the event annotation will reveal the full details of the event.</Description>
          </SubFeature>
          <SubFeature name="Fibonacci Tool" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.FibonacciTool" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\FibonacciTool.xaml" >
            <Description>Fibonacci tool is used for trend analysis in financial charts. With the help of range selector, you can choose data range for calculation.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
    </Control>
    <Control name="FlexChart" isTop="true"
       assembly="C1.WPF.FlexChart">
      <Feature name="Flex Chart" isExpanded="true">
        <SubFeatures>
          <SubFeature name="Showcase" isNew="true" assemblyName="FlexChartShowcase.exe" type="FlexChartShowcase.ShowcaseControl" source="C1.WPF.FlexChart\CS\FlexChartShowcase\Samples\ShowcaseControl.xaml">
            <Description>The modern, high-performance FlexChart control comes with flexible data binding and an easy-to-use API for maximum configuration and customization. Chart types range from basic to complex to support all your data visualization needs.</Description>
          </SubFeature>
          <SubFeature name="Introduction" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Introduction" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Introduction.xaml">
            <Description>This view shows the FlexChart's basic features. It binds the chart to a data source and allows you to select the chart type, series stacking, and rotation.</Description>
          </SubFeature>
          <SubFeature name="Animation" assemblyName="AnimationDemoWPF.exe" 
                      type="AnimationDemo.Views.FlexChartAnimation" source="C1.WPF.FlexChart\CS\AnimationDemo\Views\FlexChartAnimation.xaml">
            <Description>FlexChart comes with advanced animation options for loading, updating, and adding new data.</Description>
          </SubFeature>
          <SubFeature name="Custom animation" assemblyName="AnimationDemoWPF.exe" 
                      type="AnimationDemo.Views.CustomAnimation" source="C1.WPF.FlexChart\CS\AnimationDemo\Views\CustomAnimation.xaml">
            <Description>This view shows how to customize chart animation with AnimationTransform event.</Description>
          </SubFeature>
          <SubFeature name="Binding" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Binding" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Binding.xaml" >
            <Description>This view shows how you can use the FlexChart to show two sets of values from a single array of data. This is the most common usage scenario for the FlexChart.</Description>
          </SubFeature>
          <SubFeature name="Series Binding" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.SeriesBinding" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\SeriesBinding.xaml">
            <Description>This view shows how you can use the FlexChart to show data from multiple data sources, one per series.</Description>
          </SubFeature>
          <SubFeature name="Header And Footer" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.HeaderAndFooter" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\HeaderAndFooter.xaml">
            <Description>This view shows how you can add a header and a footer to the chart.</Description>
          </SubFeature>
          <SubFeature name="Selection" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Selection" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Selection.xaml">
            <Description>This view demonstrates the FlexChart's selection feature.</Description>
          </SubFeature>
          <SubFeature name="Labels" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Labels" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Labels.xaml">
            <Description>This view demonstrates how you can use the FlexChart's dataLabel property to add labels to each data point.</Description>
          </SubFeature>
          <SubFeature name="Hit Test" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.HitTest" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\HitTest.xaml">
            <Description>This view demonstrates the use of the FlexChart's hitTest method. The hitTest method takes a point and returns the nearest chart element. </Description>
          </SubFeature>
          <SubFeature name="Zoom" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Zoom" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Zoom.xaml">
            <Description>This view shows how to implement a custom zoom for the FlexChart control.</Description>
          </SubFeature>
          <SubFeature name="Bubble" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Bubble" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Bubble.xaml" >
            <Description>This view shows how to create bubble charts using the FlexChart control.</Description>
          </SubFeature>
          <SubFeature name="Financial Chart" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Financial" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Financial.xaml" >
            <Description>This view shows how to create financial charts with the FlexChart control.</Description>
          </SubFeature>
          <SubFeature  name="Axes" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Axes" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Axes.xaml" >
            <Description>This view shows the FlexChart with two y-axes.</Description>
          </SubFeature>
          <SubFeature  name="Plot areas" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.PlotAreas" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\PlotAreas.xaml" >
            <Description>This view shows the FlexChart with several plot areas.</Description>
          </SubFeature>
          <SubFeature  name="Axis binding" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.AxisBinding" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\AxisBinding.xaml" >
            <Description>This view shows the FlexChart's axis binding feature.</Description>
          </SubFeature>
          <SubFeature name="Zones" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Zones" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Zones.xaml" >
            <Description>The view creates a scatter chart of student grades, highlighting each grade range using zones.</Description>
          </SubFeature>
          <SubFeature name="Trend Line" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.TrendLine" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\TrendLine.xaml" >
            <Description>This view shows TrendLine in FlexChart.</Description>
          </SubFeature>
          <SubFeature name="Waterfall" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Waterfall" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Waterfall.xaml" >
            <Description>This view shows Waterfall Series in FlexChart.</Description>
          </SubFeature>
          <SubFeature name="Box &amp; Whisker" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.BoxWhisker" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\BoxWhisker.xaml" >
            <Description>The Box &amp; Whisker series is normally used to compare distributions between different sets of numerical data.</Description>
          </SubFeature>
          <SubFeature name="ErrorBar" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.ErrorBar" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\ErrorBar.xaml" >
            <Description>The Error bar helps you see margins of error and standard deviations at a glance.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Flex Pie">
        <SubFeatures>
          <SubFeature name="See it in action" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.PieIntroduction" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\PieIntroduction.xaml">
            <Description>This view shows the FlexPie's basic features.</Description>
          </SubFeature>
          <SubFeature name="Animation" assemblyName="AnimationDemoWPF.exe" 
                     type="AnimationDemo.Views.FlexPieAnimation" source="C1.WPF.FlexChart\CS\AnimationDemo\Views\FlexPieAnimation.xaml">
            <Description>FlexPie comes with advanced animation options for loading, updating, and adding new data.</Description>
          </SubFeature>
          <SubFeature name="Selection" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.PieSelection" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\PieSelection.xaml">
            <Description>This view shows the FlexPie's selection feature.</Description>
          </SubFeature>
          <SubFeature name="Multiple Pie Charts" assemblyName="FlexChartExplorer.4.exe" 
                      type="FlexChartExplorer.MultiPie" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\MultiPie.xaml">
            <Description>Draw multiple pie charts when several comma-separated fields are specified in binding.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Sunburst">
        <SubFeatures>
          <SubFeature name="See it in action" assemblyName="SunburstIntro.4.exe" type="SunburstIntro.GettingStarted" source="C1.WPF.FlexChart\CS\SunburstIntro\View\GettingStarted.xaml">
            <Description>Steps for getting started with Sunburst control.</Description>
          </SubFeature>
          <SubFeature name="Basic Features" assemblyName="SunburstIntro.4.exe" type="SunburstIntro.BasicFeatures" source="C1.WPF.FlexChart\CS\SunburstIntro\View\BasicFeatures.xaml">
            <Description>This view shows the Sunburst's basic features.</Description>
          </SubFeature>
          <SubFeature name="Legend And Titles" assemblyName="SunburstIntro.4.exe" type="SunburstIntro.LegendTitles" source="C1.WPF.FlexChart\CS\SunburstIntro\View\LegendTitles.xaml">
            <Description>This view alows you to change the Sunburst's LegendPosition, Header and Footer properties.</Description>
          </SubFeature>
          <SubFeature name="Selection" assemblyName="SunburstIntro.4.exe" type="SunburstIntro.SunburstSelection" source="C1.WPF.FlexChart\CS\SunburstIntro\View\SunburstSelection.xaml">
            <Description>This view shows the Sunburst's selection feature.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Flex Radar">
        <SubFeatures>
          <SubFeature name="Radar Chart" assemblyName="FlexRadarIntro.4.exe" type="FlexRadarIntro.RadarChart" source="C1.WPF.FlexChart\CS\FlexRadarIntro\View\RadarChart.xaml">
            <Description>The demo shows how to create radar chart with FlexRadar control.</Description>
          </SubFeature>
          <SubFeature name="Polar Chart" assemblyName="FlexRadarIntro.4.exe" type="FlexRadarIntro.PolarChart" source="C1.WPF.FlexChart\CS\FlexRadarIntro\View\PolarChart.xaml">
            <Description>The FlexRadar control represents a polar chart when x-values are numbers that specifies angular values in degrees.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="TreeMap" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.TreeMap" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\TreeMap.xaml" >
        <Description>C1TreeMap displays hierarchical data as a set of nested rectangles. A node's rectangle has an area proportional to a value of data item's property which is specified by Binding property. The BindingName property specifies data item's property that is shown in rectangle label.</Description>
      </Feature>
    </Control>
    <Control name="GanttView" assembly="C1.WPF.GanttView">
      <Feature name="Introduction" assemblyName="GanttViewSample.exe" type="GanttViewSample.GanttViewDemo" source="C1.WPF.GanttView\CS\GanttViewSample\GanttViewSample\GanttViewDemo.xaml" >
        <Description>Explore the basic GanttView features: change timescale, grid or project properties; edit task in a dialog or drag task bar; filter or sort tasks.</Description>
      </Feature>
      <Feature name="CustomColumn" assemblyName="GanttViewSample.exe" type="GanttViewSample.CustomColumn" source="C1.WPF.GanttView\CS\GanttViewSample\GanttViewSample\CustomColumn.xaml">
        <Description>This sample adds the special custom column (Actual Cost) that is calculated as a full cost of the resource multiplied by the amount of the resource usage. The value in the "Actual Cost" column is recalculated each time when any of its source values (such as resource cost or task duration) is changed.</Description>
      </Feature>
      <Feature name="Filter" assemblyName="GanttViewSample.exe" type="GanttViewSample.Filter" source="C1.WPF.GanttView\CS\GanttViewSample\GanttViewSample\Filter.xaml">
        <Description>This sample represents how to create the custom filters by combining various existent filters or using advanced filter with multiple conditions.</Description>
      </Feature>
    </Control>
    <Control name="Gauges"
         assembly="C1.WPF.Gauge">
      <Feature name="Radial Gauges" assemblyName="GaugeSamples.4.exe"
               source="C1.WPF.Gauge\CS\GaugeSamples\RadialGauge\C1RadialGaugePage.xaml"
               type="GaugeSamples.DemoRadialGauge">
        <Description>Gauges includes several types of radial gauges are included out-of-the-box. Common radial gauges include dials and speedometers.</Description>
        <SubFeatures>
          <SubFeature name="C1RadialGauge" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\RadialGauge\C1RadialGaugePage.xaml"
                      type="GaugeSamples.DemoRadialGauge" />
          <SubFeature name="C1SpeedometerGauge" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\RadialGauge\C1SpeedometerGaugePage.xaml"
                      type="GaugeSamples.C1SpeedometerGaugePage" />
          <SubFeature name="C1VolumeGauge" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\RadialGauge\C1VolumeGaugePage.xaml"
                      type="GaugeSamples.C1VolumeGaugePage" />
        </SubFeatures>
      </Feature>
      <Feature name="Linear Gauges" assemblyName="GaugeSamples.4.exe"
               type="GaugeSamples.LinearGauge">
        <Description>Gauges includes several types of linear gauges are included out-of-the-box. Common linear gauges include rulers and thermometers.</Description>
        <SubFeatures>
          <SubFeature name="C1LinearGauge" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\LinearGauge\C1LinearGaugePage.xaml"
                      type="GaugeSamples.DemoLinearGauge" />
          <SubFeature name="C1RulerGauge" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\LinearGauge\C1RulerGaugePage.xaml"
                      type="GaugeSamples.C1RulerGaugePage" />
        </SubFeatures>
      </Feature>
      <Feature name="Knobs" assemblyName="GaugeSamples.4.exe"
               type="GaugeSamples.Knob">
        <Description>The C1Knob control allows users to drag the pointer to a value. Also included is the unique C1RegionKnob with customizable regions. Knob gauges offer an alternative to text-based editors or sliders.</Description>
        <SubFeatures>
          <SubFeature name="C1Knob" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\Knob\C1KnobPage.xaml"
                      type="GaugeSamples.C1KnobPage" />
          <SubFeature name="C1RegionKnob" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\Knob\C1RegionKnobPage.xaml"
                      type="GaugeSamples.C1RegionKnobPage" />
        </SubFeatures>
      </Feature>
      <Feature name="Advanced Customization" assemblyName="GaugeSamples.4.exe"
               type="GaugeSamples.Linears">
        <Description>You can fully customize the entire gauge. Create thermometers, imitate an automobile dashboard, and more.</Description>
        <SubFeatures>
          <SubFeature name="Thermometer" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\LinearGauge\CustomLinearGauges\ThermometerUserControl.xaml"
                      type="GaugeSamples.ThermometerUserControl" />
          <SubFeature name="Rule" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\LinearGauge\CustomLinearGauges\RuleUserControl.xaml"
                      type="GaugeSamples.RuleUserControl" />
          <SubFeature name="Clock" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\RadialGauge\ClockPage.xaml"
                      type="GaugeSamples.ClockPage" />
          <SubFeature name="Automobile" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\RadialGauge\SpeedometersPage.xaml"
                      type="GaugeSamples.SpeedometersPage" />
        </SubFeatures>
      </Feature>
    </Control>
    <Control name="Maps"
         assembly="C1.WPF.Maps">
      <Feature assemblyName="MapsSamples.4.exe" type="MapsSamples.DemoMaps" source="C1.WPF.Maps\CS\MapsSamples\C1MapsPage.xaml">
        <Description>Get smooth zooming, panning, and mapping between screen and geographical coordinates with C1Maps. Display information from various sources, including Microsoft Live Maps. You can even superimpose your own custom elements to the maps.</Description>
      </Feature>
      <Feature assemblyName="MapsSamples.4.exe" type="MapsSamples.DemoMaps" source="C1.WPF.Maps\CS\MapsSamples\C1MapsPage.xaml"
               name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the C1Maps control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush" />
          <Property name="MouseOverBrush" />
          <Property name="PressedBrush" />
        </Properties>
      </Feature>
    </Control>
    <Control name="OrgChart"
         assembly="C1.WPF.OrgChart">
      <Feature name="Basic"
               type="TestWPF.OrgChartSample" assemblyName="C1OrgChart_Demo2010.4.exe" source="C1.WPF.OrgChart\CS\C1OrgChart_Demo\C1OrgChart_Demo\OrgChartSample.xaml">
        <Description>Create hierarchical diagrams that show structure and relationships of your data. The C1OrgChart control leverages the rich data binding mechanisms of the platform.</Description>
      </Feature>
      <Feature name="Hierarchical" source="C1.WPF.OrgChart\CS\HierarchicalDataTemplate\HierarchicalDataTemplate\HierarchicalDataTemplateSample.xaml"
               type="HierarchicalDataTemplateWPF.HierarchicalDataTemplateSample" assemblyName="HierarchicalDataTemplate2010.4.exe">
        <Description>
          Demonstrates advanced binding scenarios for C1OrgChart using the DataTemplateSelector and HierarchicalDataTemplate classes.
        </Description>
      </Feature>
    </Control>
    <Control name="Sparkline"
         assembly="C1.WPF.Sparkline">
      <Feature name="See it in Action" assemblyName="SparklineSamples.4.exe" type="SparklineSamples.SparklineDemo" source="C1.WPF.Sparkline\CS\SparklineSamples\SparklineDemo.xaml">
        <Description>Based on Microsoft Excel, the C1SparkLine control supports three different types of sparklines.</Description>
      </Feature>
      <Feature name="Customization" assemblyName="SparklineSamples.4.exe" type="SparklineSamples.AppearanceSample" source="C1.WPF.Sparkline\CS\SparklineSamples\AppearanceSample.xaml">
        <Description>This demo shows the variety of properties you can set to customize the appearance of your sparklines.</Description>
      </Feature>
      <Feature name="Data Binding" assemblyName="SparklineSamples.4.exe" type="SparklineSamples.RegionSales" source="C1.WPF.Sparkline\CS\SparklineSamples\RegionSales.xaml">
        <Description>This demo shows sparklines in a data bound ListBox.</Description>
      </Feature>
       <Feature name="FlexGrid Integration" assemblyName="SparklineSamples.4.exe" type="SparklineSamples.FlexGridIntegration" 
                source="C1.WPF.Sparkline\CS\SparklineSamples\FlexGridIntegration.xaml">
        <Description>This demo shows how to use sparklines in CellTemplates for FlexGrid columns.</Description>
      </Feature>
   </Control>
  </Group>
  <Group name="Input and Editing">
    <Control name="ColorPicker"
         assembly="C1.WPF.Extended">
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoColorPicker" source="C1.WPF.Extended\CS\ExtendedSamples\C1ColorPicker\C1ColorPickerPage.xaml">
        <Description>Select colors from professionally-designed palettes or build your own custom colors including support for transparency.</Description>
        <Properties>
          <Property name="Palette"
                    value="Standard" />
          <Property name="Mode"
                    value="Both" />
          <Property name="ShowRecentColors"
                    value="True" />
          <Property name="ShowAlphaChannel" />
          <Property name="ShowTransparentColor" />
          <Property name="CornerRadius"/>
        </Properties>
      </Feature>
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoColorPicker" source="C1.WPF.Extended\CS\ExtendedSamples\C1ColorPicker\C1ColorPickerPage.xaml"
               name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the C1ColorPicker control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush" />
          <Property name="MouseOverBrush" />
          <Property name="PressedBrush" />
          <Property name="FocusBrush" />
          <Property name="InputBackground" />
          <Property name="InputForeground" />
        </Properties>
      </Feature>
    </Control>
    <Control name="ComboBox"
         assembly="C1.WPF">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoComboBox" source="C1.WPF\CS\BasicControls\Input\C1ComboBoxPage.xaml">
        <Description>The C1ComboBox control allows users to type text in an editable textbox or select text from an auto-searchable drop-down list.</Description>
        <Properties>
          <Property name="AutoComplete"
                    value="true" />
          <Property name="Condition" />
          <Property name="DropDownDirection" />
          <Property name="IsEnabled"
                    value="true" />
          <Property name="IsEditable"
                    value="false" />
          <Property name="DropDownHeight"
                    nullable="true"
                    minimumValue="0"
                    maximumValue="400" />
          <Property name="DropDownWidth"
                    nullable="true"
                    minimumValue="0"
                    maximumValue="400" />
          <Property name="CornerRadius"/>
        </Properties>
        <Event>SelectedItemChanged</Event>
      </Feature>
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoComboBox" source="C1.WPF\CS\BasicControls\Input\C1ComboBoxPage.xaml"
               name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the C1ComboBox control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush" />
          <Property name="MouseOverBrush" />
          <Property name="PressedBrush" />
          <Property name="SelectedBackground" />
          <Property name="FocusBrush" />
          <Property name="CaretBrush" />
          <Property name="SelectionBackground" />
          <Property name="SelectionForeground" />
          <Property name="ButtonBackground" />
          <Property name="ButtonForeground" />
          <Property name="HorizontalAlignment"
                    display="false"
                    value="Center" />
          <Property name="VerticalAlignment"
                    display="false"
                    value="Center" />
        </Properties>
      </Feature>
    </Control>
    <Control name="DateTime Editors"
         assembly="C1.WPF.DateTimeEditors">
      <Feature name="C1DateTimePicker" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\Input\C1DateTimePickerPage.xaml"
               type="BasicControls.DemoDateTimePicker">
        <Description>C1DateTimePicker can handle a date input, a time input, or both at the same time.</Description>
        <Properties>
          <Property name="EditMode" />
          <Property name="DateFormat" />
          <Property name="TimeFormat" />
          <Property name="FirstDayOfWeek" />
          <Property name="MinDate" />
          <Property name="MaxDate" />
          <Property name="IsReadOnly" />
          <Property name="IsEnabled" />
          <Property name="AllowNull" />
        </Properties>
      </Feature>
      <Feature name="C1TimeEditor" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\Input\C1TimeEditorPage.xaml"
               type="BasicControls.DemoTimeEditor">
        <Description>The C1TimeEditor control provides a simple editor for time values.</Description>
        <Properties>
          <Property name="Format" />
          <Property name="Increment"
                    nullable="false" />
          <Property name="Minimum" />
          <Property name="Maximum" />
          <Property name="ShowButtons" />
          <Property name="IsReadOnly" />
          <Property name="IsEnabled" />
          <Property name="AllowNull" />
          <Property name="Delay"
                    minimumValue="0"
                    maximumValue="1000" />
          <Property name="Interval"
                    minimumValue="1"
                    maximumValue="500" />
        </Properties>
      </Feature>
      <Feature name="C1DatePicker" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\Input\C1DatePickerPage.xaml"
           type="BasicControls.DemoDatePicker">
        <Description>The C1DatePicker control provides editor for date values.</Description>
        <Properties>
          <Property name="IsReadOnly" />
          <Property name="AllowNull" />
          <Property name="FirstDayOfWeek" caption="First Day of Week"/>
          <Property name="SelectedDateFormat" caption="Selected Date Format"/>
          <Property name="CustomFormat"
                    caption="Custom Format" />
          <Property name="Watermark"
                    type="String" />
        </Properties>
      </Feature>
      <Feature name="Advanced Settings" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\Input\DateTimePickerAdvanced.xaml"
               type="BasicControls.DateTimePickerAdvanced">
        <Description>This sample shows using date and time masks to input values in custom formats.</Description>
      </Feature>
      <Feature type="BasicControls.DemoDateTimePicker" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\Input\C1DateTimePickerPage.xaml"
               name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the DateTime Editor controls. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush" />
          <Property name="MouseOverBrush" />
          <Property name="PressedBrush" />
          <Property name="FocusBrush" />
          <Property name="ButtonBackground" />
          <Property name="ButtonForeground" />
          <Property name="HorizontalAlignment"
                    display="false"
                    value="Center" />
          <Property name="VerticalAlignment"
                    display="false"
                    value="Center" />
        </Properties>
      </Feature>
    </Control>
    <Control name="DropDown"
         assembly="C1.WPF">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoDropDown" source="C1.WPF\CS\BasicControls\Input\C1DropDownPage.xaml" >
        <Description>C1DropDown can host any UIElement in its drop-down portion. It can be used to solve the more general dropdown requirements, such as displaying a TreeView in a drop-down or a SearchBox or AutoCompleteBox.</Description>
        <Properties>
          <Property name="DropDownDirection" />
          <Property name="AutoClose"
                    value="true" />
          <Property name="DropDownWidth"
                    nullable="true"
                    minimumValue="0"
                    maximumValue="200" />
          <Property name="DropDownHeight"
                    nullable="true"
                    minimumValue="0"
                    maximumValue="200" />
          <Property name="IsDropDownOpen" />
        </Properties>
      </Feature>
    </Control>
    <Control name="Input" assembly="C1.WPF.Input" >
      <Feature name="C1MultiSelect" assemblyName="InputSamples.4.exe" type="InputSamples.C1MultiSelectPage" source="C1.WPF.Input\CS\InputSamples\InputSamples\C1MultiSelect\C1MultiSelectPage.xaml">
        <Description>The MultiSelect control allows users to select multiple objects from either a drop-down checklist or by a editing list of tags. Both DropDown and Header are customizable, and data can range from simple strings to custom objects.</Description>
      </Feature>
      <Feature name="C1CheckList" assemblyName="InputSamples.4.exe" type="InputSamples.C1CheckListPage" source="C1.WPF.Input\CS\InputSamples\InputSamples\C1MultiSelect\C1CheckListPage.xaml">
        <Description>The CheckList control allows users to select multiple items from a list with check boxes. The control supports options for databinding and UI customization.</Description>
      </Feature>
      <Feature name="C1TagEditor" assemblyName="InputSamples.4.exe" type="InputSamples.C1TagEditorPage" source="C1.WPF.Input\CS\InputSamples\InputSamples\C1MultiSelect\C1TagEditorPage.xaml">
        <Description>Use the TagEditor control to edit a collection of tags by either adding or removing them. It can represent tags as either text with separators or as button-like UI elements.</Description>
      </Feature>
      <Feature name="C1MaskedTextBox" assemblyName="BasicControls.4.exe" type="BasicControls.DemoMaskedTextBox" source="C1.WPF\CS\BasicControls\Input\C1MaskedTextBoxPage.xaml">
        <Description>The C1MaskedTextBox control allows users to type text that conforms to a given mask.</Description>
        <Properties>
          <Property name="Text" />
          <Property name="Mask"
                    value="(###) 999-9999" />
          <Property name="Value" />
          <Property name="PromptChar" />
          <Property name="TextMaskFormat" />
          <Property name="IsReadOnly" />
          <Property name="IsEnabled" />
          <Property name="ReplaceMode" />
          <Property name="TextAlignment" />
          <Property name="Watermark"
                    value="enter text here" />
          <Property name="CornerRadius"/>
        </Properties>
        <Event>TextChanged</Event>
        <Text>(555) 555-1212</Text>
      </Feature>
      <Feature name="C1NumericBox" assemblyName="BasicControls.4.exe" type="BasicControls.DemoNumericBox" source="C1.WPF\CS\BasicControls\Input\C1NumericBoxPage.xaml">
        <Description>The C1NumericBox control allows users to type numeric values with flexible formatting, increments and up/down buttons.</Description>
        <Properties>
          <Property name="Value" />
          <Property name="Format"
                    value="N2" />
          <Property name="Increment" />
          <Property name="Minimum"
                    value="-10000"
                    nullable="true" />
          <Property name="Maximum"
                    value="10000"
                    nullable="true" />
          <Property name="IsReadOnly" />
          <Property name="IsEnabled" />
          <Property name="AllowNull" />
          <Property name="ShowButtons" />
          <Property name="TextAlignment" />
          <Property name="Delay"
                    minimumValue="0"
                    maximumValue="1000" />
          <Property name="Interval"
                    minimumValue="1"
                    maximumValue="500" />
        </Properties>
        <Event>ValueChanged</Event>
      </Feature>
      <Feature name="C1RangeSlider" assemblyName="BasicControls.4.exe" type="BasicControls.DemoRangeSlider" source="C1.WPF\CS\BasicControls\Input\C1RangeSliderPage.xaml">
        <Description>C1RangeSlider extends the basic slider control and provides two thumb elements instead of one, allowing users to select ranges instead of single values.</Description>
        <Properties>
          <Property name="Minimum" />
          <Property name="Maximum" />
          <Property name="LowerValue" />
          <Property name="UpperValue" />
          <Property name="Width"
                    value="300"
                    minimumValue="0"
                    maximumValue="800"
                    nullable="true" />
          <Property name="Height"
                    minimumValue="0"
                    maximumValue="800"
                    nullable="true" />
          <Property name="Orientation"
                    value="Horizontal" />
          <Property name="HorizontalAlignment"
                    value="Center" />
          <Property name="VerticalAlignment"
                    value="Center" />
        </Properties>
        <Event>UpperValueChanged,LowerValueChanged</Event>
      </Feature>
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoNumericBox" source="C1.WPF\CS\BasicControls\Input\C1NumericBoxPage.xaml"
               name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the C1NumericBox control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="Background"
                    caption="Background" />
          <Property name="Foreground"
                    caption="Foreground" />
          <Property name="BorderBrush"
                    caption="BorderBrush" />
          <Property name="MouseOverBrush" />
          <Property name="PressedBrush" />
          <Property name="FocusBrush" />
          <Property name="ButtonBackground" />
          <Property name="ButtonForeground" />
        </Properties>
      </Feature>
    </Control>
    <Control name="InputPanel" assembly="C1.WPF.InputPanel">
      <Feature name="Use with MS DataGrid" assemblyName="InputPanelSample.4.exe" type="InputPanelSample.MSDataGridDemo" source="C1.WPF.InputPanel\CS\InputPanelSample\InputPanelSample\MSDataGrid\MSDataGridDemo.xaml" >
        <Description>This sample shows how to use C1InputPanel along with MS DataGrid.</Description>
      </Feature>
      <Feature name="Use with C1DataGrid" assemblyName="InputPanelSample.4.exe" type="InputPanelSample.C1DataGridDemo" source="C1.WPF.InputPanel\CS\InputPanelSample\InputPanelSample\C1DataGrid\C1DataGridDemo.xaml" >
        <Description>This sample shows how to use C1InputPanel along with C1DataGrid.</Description>
      </Feature>
      <Feature name="Use with C1FlexGrid" assemblyName="InputPanelSample.4.exe" type="InputPanelSample.FlexGridDemo" source="C1.WPF.InputPanel\CS\InputPanelSample\InputPanelSample\C1FlexGrid\FlexGridDemo.xaml" >
        <Description>This sample shows how to use C1InputPanel along with C1FlexGrid.</Description>
      </Feature>
      <Feature name="Custom Template" assemblyName="InputPanelSample.4.exe" type="InputPanelSample.CustomTemplate" source="C1.WPF.InputPanel\CS\InputPanelSample\InputPanelSample\CustomTemplate\CustomTemplate.xaml" >
        <Description>This sample shows how to set custom ItemsTemplate for the C1InputPanel control.</Description>
      </Feature>
      <Feature name="Row Details" assemblyName="InputPanelSample.4.exe" type="InputPanelSample.Integration" source="C1.WPF.InputPanel\CS\InputPanelSample\InputPanelSample\Integration\Integration.xaml" >
        <Description>This sample shows how to use C1InputPanel to display row details in different DataGrid controls.</Description>
      </Feature>
    </Control>
    <Control name="PropertyGrid"
         assembly="C1.WPF.Extended">
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoPropertyGrid" source="C1.WPF.Extended\CS\ExtendedSamples\C1PropertyGrid\C1PropertyGridPage.xaml">
        <Description>The C1PropertyGrid allows you to edit any object, using specialized editing controls.</Description>
        <Properties>
          <Property name="AutoGenerateMethods"
                    value="false" />
          <Property name="AutoGenerateProperties"
                    value="false" />
          <Property name="ShowDescription"
                    value="true" />
          <Property name="ShowResetButton"
                    value="true" />
        </Properties>
      </Feature>
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoPropertyGrid" source="C1.WPF.Extended\CS\ExtendedSamples\C1PropertyGrid\C1PropertyGridPage.xaml"
               name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the C1PropertyGrid control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="AutoGenerateMethods"
                    value="false" />
          <Property name="AutoGenerateProperties"
                    value="false" />
          <Property name="ShowDescription"
                    value="true" />
          <Property name="ShowResetButton"
                    value="true" />
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush" />
          <Property name="MouseOverBrush" />
          <Property name="PressedBrush" />
          <Property name="CategoryBackground" />
          <Property name="CategoryForeground" />
        </Properties>
      </Feature>
    </Control>
    <Control name="Rating"
         assembly="C1.WPF.Extended">
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoRating" source="C1.WPF.Extended\CS\ExtendedSamples\C1Rating\C1RatingPage.xaml" >
        <Description>This sample shows how to display C1Rating control and customize the icon.</Description>
      </Feature>
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoCustomAnimation" source="C1.WPF.Extended\CS\ExtendedSamples\C1Rating\CustomAnimation.xaml"
               name="Custom Animation">
        <Description>This sample shows how to use custom animation in C1Rating control.</Description>
      </Feature>
    </Control>
    <Control name="RichTextBox" isNew="true"
         assembly="C1.WPF.RichTextBox">
      <Feature assemblyName="RichTextBoxSamples.4.exe" isNew="true"
               type="RichTextBoxSamples.DemoRichTextBox" source="C1.WPF.RichTextBox\CS\RichTextBoxSamples\DemoRichTextBox.xaml" >
        <Description>Load, edit and save formatted text as HTML documents.&#10;
Use the new SimplifiedRichTextBoxToolbar to get Office 365 look and feel.&#10;
Toggle the line numbers visibility in the View tab. 
      </Description>
        <Properties>
          <Property name="Width"
                    minimumValue="0"
                    maximumValue="800"
                    nullable="true" />
          <Property name="Height"
                    minimumValue="0"
                    maximumValue="600"
                    nullable="true" />
          <Property name="IsEnabled" />
          <Property name="IsReadOnly" />
          <Property name="SelectionBackground" />
          <Property name="SelectionForeground" />
        </Properties>
        <Event>RequestNavigate</Event>
      </Feature>
      <Feature name="Formatting" assemblyName="RichTextBoxSamples.4.exe"
               type="RichTextBoxSamples.MainPage" source="C1.WPF.RichTextBox\CS\RichTextBoxSamples\Formatting.xaml" >
        <Description>This demo shows most of the formatting options available in C1RichTextBox.</Description>
      </Feature>
      <Feature name="Spell checking" assemblyName="RichTextBoxSamples.4.exe"
               type="RichTextBoxSamples.AsYouTypeSpellCheck" source="C1.WPF.RichTextBox\CS\RichTextBoxSamples\AsYouTypeSpellCheck.xaml" >
        <Description>C1RichTextBox supports modal and as-you-type spell-checking using the C1SpellChecker component. Click the Spell Check button or type a misspelled word in the text box to see this feature in action.</Description>
      </Feature>
      <Feature name="Import &amp; export" assemblyName="RichTextBoxSamples.4.exe"
               type="RichTextBoxSamples.DemoRichTextBoxFilter" source="C1.WPF.RichTextBox\CS\RichTextBoxSamples\DemoRichTextBoxFilter.xaml" >
        <Description>Import or export HTML and RTF content directly to C1RichTextBox.</Description>
      </Feature>
      <Feature name="Custom ContextMenu" assemblyName="RichTextBoxSamples.4.exe"
              type="RichTextBoxSamples.CustomContextMenu" source="C1.WPF.RichTextBox\CS\RichTextBoxSamples\CustomContextMenu.xaml" >
        <Description>Shows how to use C1RadialMenu as custom contextMenu with the C1RichTextBox control.</Description>
      </Feature>
    </Control>
  </Group>
  <Group name="Reporting and Documents">
    <Control name="Excel"
     assembly="C1.WPF.Excel">
      <Feature assemblyName="ExcelSamples.4.exe" type="ExcelSamples.ExcelCreator" source="C1.WPF.Excel\CS\ExcelSamples\ExcelCreator.xaml">
        <Description>Demonstrates the basic functionality of the C1Excel component.</Description>
      </Feature>
    </Control>
    <Control name="FlexReport"
       assembly="C1.WPF.FlexReport">
      <Feature name="FlexReport Viewer" assemblyName="FlexReportSamples.4.exe"
               type="FlexReportSamples.ViewerPage" source="C1.WPF.FlexReport\CS\FlexReportSamples\ViewerPage.xaml" >
        <Description>The samples demonstrates how we can use C1FlexViewerPane to display reports generated with FlexReport.</Description>
      </Feature>
      <Feature name="Export" assemblyName="FlexReportSamples.4.exe"
               type="FlexReportSamples.ExportPage" source="C1.WPF.FlexReport\CS\FlexReportSamples\ExportPage.xaml" >
        <Description>This sample allows to select a report from a .flxr FlexReport report definition file, or pick a report from the list of predefined reports, and generates the report. The report then can be exported to any of the supported external formats.</Description>
      </Feature>
      <Feature name="Printing" assemblyName="FlexReportSamples.4.exe"
               type="FlexReportSamples.PrintPage" source="C1.WPF.FlexReport\CS\FlexReportSamples\PrintPage.xaml" >
        <Description>This sample allows to select a report from a .flxr FlexReport report definition file, or pick a report from the list of predefined reports, and generates the report. The report then can be printed.</Description>
      </Feature>
    </Control>
    <Control name="FlexViewer" isTop="true" assembly="C1.WPF.FlexViewer">
      <Feature name="Pdf Viewer" assemblyName="PdfDocumentSourceSamples.4.exe"
               type="PdfDocumentSourceSamples.PdfViewPage" source="C1.WPF.Document\CS\PdfDocumentSourceSamples\PdfViewPage.xaml" >
        <Description>Demonstrates how to use C1FlexViewer and C1PdfDocumentSource to create simple PDF viewer.</Description>
      </Feature>
      <Feature name="FlexReport Viewer" assemblyName="FlexReportSamples.4.exe"
               type="FlexReportSamples.ViewerPage" source="C1.WPF.FlexReport\CS\FlexReportSamples\ViewerPage.xaml" >
        <Description>The samples demonstrates how we can use C1FlexViewerPane to display reports generated with FlexReport.</Description>
      </Feature>
      <Feature name="Ssrs Viewer" assemblyName="FlexReportSamples.4.exe"
               type="FlexReportSamples.SsrsPage" source="C1.WPF.FlexReport\CS\FlexReportSamples\SsrsPage.xaml" >
        <Description>This sample shows how the C1SSRSDocumentSource component can be used with C1FlexViewerPane to preview and print reports available on a SSRS server, and to export reports to various formats.</Description>
      </Feature>
    </Control>
    <Control name="PdfDocumentSource" 
       assembly="C1.WPF.Document" >
      <Feature name="Viewer" assemblyName="PdfDocumentSourceSamples.4.exe"
               type="PdfDocumentSourceSamples.PdfViewPage" source="C1.WPF.Document\CS\PdfDocumentSourceSamples\PdfViewPage.xaml" >
        <Description>Demonstrates how to use C1FlexViewer and C1PdfDocumentSource to create simple PDF viewer.</Description>
      </Feature>
      <Feature name="Export" assemblyName="PdfDocumentSourceSamples.4.exe"
               type="PdfDocumentSourceSamples.ExportPage" source="C1.WPF.Document\CS\PdfDocumentSourceSamples\ExportPage.xaml" >
        <Description>Demonstrates how C1PdfDocumentSource can be used without a viewer to export documents from code.</Description>
      </Feature>
      <Feature name="Printing" assemblyName="PdfDocumentSourceSamples.4.exe"
               type="PdfDocumentSourceSamples.PrintPage" source="C1.WPF.Document\CS\PdfDocumentSourceSamples\PrintPage.xaml" >
        <Description>Demonstrates how C1PdfDocumentSource can be used without a viewer to print documents from code.</Description>
      </Feature>
    </Control>
    <Control name="Pdf"
         assembly="C1.WPF.Pdf">
      <Feature name="Basic" source="C1.WPF.Pdf\CS\PdfCreator\Basic.xaml"
               type="PdfCreator.Basic" assemblyName="PdfCreator.4.exe">
        <Description>Easily create, print and email Adobe PDF documents from your apps. This shows the basic things you can do with a client-side PDF document.</Description>
      </Feature>
      <Feature name="Advanced" source="C1.WPF.Pdf\CS\PdfCreator\Advanced.xaml"
               type="PdfCreator.Advanced" assemblyName="PdfCreator.4.exe">
        <Description>Shows the advanced things you can do with a client-side PDF document.</Description>
      </Feature>
    </Control>
    <Control name="Word"
         assembly="C1.WPF.Word">
      <Feature assemblyName="WordCreator.4.exe" type="Word.Creator.Basic" source="C1.WPF.Word\CS\WordCreator\Basic.xaml">
        <Description>Easily create and save Microsoft Word documents from your apps. This shows the basic things you can do with a Word document.</Description>
      </Feature>
    </Control>
  </Group>
  <Group name="Utilities">
    <Control name="BarCode" assembly="C1.WPF.BarCode">
      <Feature assemblyName="BarCodesSample.4.exe" type="BarCodesSample.DemoPage" source="C1.WPF.BarCode\CS\BarCodeSamples\BarCodeSamples\DemoPage.xaml">
        <Description>The C1BarCode control generates bar and qr codes of different types.</Description>
      </Feature>
      <Feature name="New Barcode Types" 
               assemblyName="BarCodesSample.4.exe" type="BarCodesSample.NewBarcode" source="C1.WPF.BarCode\CS\BarCodeSamples\BarCodeSamples\NewBarcodes.xaml">
        <Description>Explore new bar and qr code types added in 2018.</Description>
      </Feature>
    </Control>
    <Control name="Expressions"
         assembly="C1.WPF.ExpressionEditor">
      <Feature name="Column Calculation" assemblyName="C1ExpressionEditorSample.exe" type="C1ExpressionEditorSample.ColumnCalculation" source="C1.WPF.ExpressionEditor\CS\ExpressionEditorSamples\ExpressionEditorSamples\ColumnCalculation\ColumnCalculation.xaml" >
        <Description>This demo shows how you can perform column calculations within FlexGrid or other data grids using ExpressionEditor.</Description>
      </Feature>
      <Feature name="Grouping" assemblyName="C1ExpressionEditorSample.exe" type="C1ExpressionEditorSample.SupportGrouping" source="C1.WPF.ExpressionEditor\CS\ExpressionEditorSamples\ExpressionEditorSamples\Grouping\SupportGrouping.xaml" >
        <Description>This demo shows how you can group data within FlexGrid or other data grids using ExpressionEditor.</Description>
      </Feature>
      <Feature name="Filter" assemblyName="C1ExpressionEditorSample.exe" type="C1ExpressionEditorSample.SupportFilter" source="C1.WPF.ExpressionEditor\CS\ExpressionEditorSamples\ExpressionEditorSamples\Filter\SupportFilter.xaml" >
        <Description>This sample demonstrates how you can filter data within FlexGrid and other grid controls using ExpressionEditor.</Description>
      </Feature>
    </Control>
    <Control name="Themes" isNew="true" assembly="C1.WPF.Themes">
      <Feature type="Themes.DemoThemes" assemblyName="Themes2010.4.exe" source="C1.WPF.Themes\CS\Themes2010\ThemesPage.xaml" isNew="true">
        <Description>
          Studio WPF Edition includes many professional themes which expand your style possibilities.
          Check out new Material themes!
        </Description>
      </Feature>
      <Feature name="Scheduler Themes" assemblyName="Themes2010.4.exe" type="Themes.SchedulerThemes" source="C1.WPF.Themes\CS\Themes2010\SchedulerThemes.xaml">
        <Description>
          C1Scheduler allows you to create highly sophisticated scheduling applications complete with multiple views, appointment editing, reminders, contacts, labels and resources.
          Check out new Office 2016 themes!
        </Description>
      </Feature>
    </Control>
  </Group>
  <Group name="Scheduling">
    <Control name="Scheduler"
     assembly="C1.WPF.Schedule">
      <Feature name="Themes and Views" assemblyName="Themes2010.4.exe" type="Themes.SchedulerThemes" source="C1.WPF.Themes\CS\Themes2010\SchedulerThemes.xaml">
        <Description>
          C1Scheduler allows you to create highly sophisticated scheduling applications complete with multiple views, appointment editing, reminders, contacts, labels and resources.
          Check out new Office 2016 themes!
        </Description>
      </Feature>
      <Feature name="Embedded Themes" assemblyName="SchedulerSamples.4.exe" type="SchedulerSamples.DefaultSchedulerWindow" source="C1.WPF.Schedule\CS\SchedulerSamples\DefaultSchedulerWindow.xaml">
        <Description>In addition to C1Themes, C1Scheduler assembly contains several embedded themes.</Description>
      </Feature>
      <Feature name="Grouping" assemblyName="SchedulerSamples.4.exe" type="SchedulerSamples.Grouping" source="C1.WPF.Schedule\CS\SchedulerSamples\Grouping.xaml">
        <Description>The C1Scheduler control supports grouping by resources, contacts and categories.</Description>
      </Feature>
      <Feature name="Custom Styles" assemblyName="SchedulerSamples.4.exe" type="SchedulerSamples.CustomSchedulerStyles" source="C1.WPF.Schedule\CS\SchedulerSamples\CustomSchedulerStyles.xaml">
        <Description>Demonstrates the use of custom-defined styles instead of predefined C1Scheduler views.</Description>
      </Feature>
      <Feature name="Calendar Settings" assemblyName="SchedulerSamples.4.exe" type="SchedulerSamples.CalendarSettings" source="C1.WPF.Schedule\CS\SchedulerSamples\CalendarSettings.xaml">
        <Description>Calendar Settings: change week start, work days, add holidays or working weekends. The same settings can be shared by the C1Calendar and C1Scheduler controls.</Description>
      </Feature>
      <Feature name="Calendar" assemblyName="SchedulerSamples.4.exe" type="SchedulerSamples.Calendar" source="C1.WPF.Schedule\CS\SchedulerSamples\Calendar.xaml">
        <Description>The C1Calendar control represents a multi-month calendar with support for date range selection, month-to-month navigation, and seamless integration with the ComponentOne Scheduler control.</Description>
      </Feature>
    </Control>
  </Group>
  <Group name="Navigation and Layout">
    <Control name="Accordion"
         assembly="C1.WPF.Extended">
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoAccordion" source="C1.WPF.Extended\CS\ExtendedSamples\C1Accordion\C1AccordionPage.xaml" >
        <Description>Organize your UI and optimize your screen real-estate. C1Accordion is an ItemsControl that contains multiple items, and it allows only one item to be expanded at a time.</Description>
        <Properties>
          <Property name="Width"
                    minimumValue="10"
                    maximumValue="800"
                    nullable="true" />
          <Property name="Height"
                    minimumValue="10"
                    maximumValue="600"
                    nullable="true" />
          <Property name="ExpandDirection"
                    value="Down" />
          <Property name="AllowCollapseAll" />
          <Property name="Fill"
                    value="true" />
          <Property name="DEMO_Padding"
                    caption="Padding" />
          <Property name="HeaderPadding" />
          <Property name="CornerRadius" />
        </Properties>
      </Feature>
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoAccordion" source="C1.WPF.Extended\CS\ExtendedSamples\C1Accordion\C1AccordionPage.xaml"
               name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the C1Accordion control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush" />
          <Property name="MouseOverBrush" />
          <Property name="ExpandedBackground" />
          <Property name="FocusBrush" />
          <Property name="HeaderBackground" />
          <Property name="HeaderForeground" />
        </Properties>
      </Feature>
    </Control>
    <Control name="Bitmap"
             assembly="C1.WPF.Bitmap">
      <Feature assemblyName="BitmapSamples.4.exe" type="BitmapSamples.Crop" name="Crop" source="C1.WPF.Bitmap\CS\BitmapSamples\Crop.xaml">
        <Description>Shows how to use C1Bitmap to crop an image.</Description>
      </Feature>
      <Feature assemblyName="BitmapSamples.4.exe" type="BitmapSamples.FaceWarp" name="FaceWarp" source="C1.WPF.Bitmap\CS\BitmapSamples\FaceWarp.xaml">
        <Description>Shows how to use C1Bitmap and vertex shader to distort an image.</Description>
      </Feature>
    </Control>
    <Control name="Book"
           assembly="C1.WPF.Extended">
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoBook" source="C1.WPF.Extended\CS\ExtendedSamples\C1Book\C1BookPage.xaml" >
        <Description>Present your data and organize your UI in a real-like book with the C1Book control. Turn the pages like in a real book by dragging the pages with your mouse pointer. Optionally, click the corners to flip the pages.</Description>
        <Properties>
          <Property name="ShowInnerShadows"
                    value="true" />
          <Property name="ShowOuterShadows"
                    value="true" />
          <Property name="IsFirstPageOnTheRight"
                    value="false" />
          <Property name="Orientation" />
          <Property name="ShowPageFold" />
          <Property name="PageFoldAction" />
          <Property name="FoldSize"
                    minimumValue="20"
                    maximumValue="100" />
          <Property name="CurrentPage"
                    minimumValue="0"
                    maximumValue="11" />
        </Properties>
        <Event>CurrentPageChanged</Event>
      </Feature>
      <Feature name="Single page" assemblyName="ExtendedSamples.4.exe" source="C1.WPF.Extended\CS\ExtendedSamples\C1Book\SinglePage.xaml"
               type="ExtendedSamples.SinglePage">
        <Description>Set the PageMode to OnePage to achieve a single page book.</Description>
      </Feature>
    </Control>
    <Control name="Carousel"
             assembly="C1.WPF.Carousel">
      <Feature assemblyName="CarouselSamples.4.exe" type="CarouselSamples.CarouselPage" source="C1.WPF.Carousel\CS\CarouselSamples\CarouselPage.xaml">
        <Description>The C1CarouselPanel control is a virtualizing panel control that arranges child elements along an arbitrary 3D path. Use the C1CarouselPanel control with any items control to turn a flat list of items into an interactive carousel with true 3D perspectives and scrolling animation.</Description>
      </Feature>
    </Control>
    <Control name="DockControl"
         assembly="C1.WPF.Docking">
      <Feature assemblyName="DockingSamples.4.exe" type="DockingSamples.DockControlBasic" source="C1.WPF.Docking\CS\DockingSamples\Basic\DockControlBasic.xaml" >
        <Description>Handle docking multiple windows within your application. The C1DockControl supports content that fills the space. The default appearance mimics the Visual Studio docking diamond look and feel.</Description>
      </Feature>
      <Feature name="Visual Studio" assemblyName="DockingSamples.4.exe" type="DockingSamples.VisualStudioLookPage" source="C1.WPF.Docking\CS\DockingSamples\VisualStudioLook\VisualStudioLookPage.xaml">
        <Description>This demo shows a complete Visual Studio demo using C1DockControl.</Description>
      </Feature>
    </Control>
    <Control name="DragDropManager"
         assembly="C1.WPF">
      <Feature name="DemoListBox" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\DragDropManager\DemoListBox.xaml"
               type="BasicControls.DemoListBox">
        <Description>C1DragDropManager enables advanced dragging and dropping. You can easily drag-and-drop items between different list boxes.</Description>
      </Feature>
      <Feature name="Checkers" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\DragDropManager\DemoDragDropManager.xaml"
               type="BasicControls.DemoDragDropManager">
        <Description>The C1DragDropManager control allows you to easily manage drag-and-drop operations in any UIElement.</Description>
      </Feature>
    </Control>
    <Control name="Expander"
         assembly="C1.WPF.Extended">
      <Description>C1Expander is a very simple, but useful control that provides the ability to expand and contract content.</Description>
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoExpander" source="C1.WPF.Extended\CS\ExtendedSamples\C1Expander\C1ExpanderPage.xaml">
        <Properties>
          <Property name="ExpandDirection"
                    value="Down" />
          <Property name="IsExpandable" />
          <Property name="Width"
                    value="300"
                    minimumValue="10"
                    maximumValue="800"
                    nullable="true" />
          <Property name="Height"
                    minimumValue="10"
                    maximumValue="600"
                    nullable="true" />
        </Properties>
      </Feature>
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoExpander" source="C1.WPF.Extended\CS\ExtendedSamples\C1Expander\C1ExpanderPage.xaml"
               name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the C1Expander control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="HeaderForeground" />
          <Property name="HeaderBackground" />
          <Property name="ExpandedBackground" />
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="MouseOverBrush" />
          <Property name="FocusBrush" />
        </Properties>
      </Feature>
    </Control>
    <Control name="HyperPanel"
          assembly="C1.WPF">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoHyperPanel" source="C1.WPF\CS\BasicControls\Panels\C1HyperPanelPage.xaml" >
        <Description>C1HyperPanel is a StackPanel that provides an automatic zoom effect for items near the mouse.</Description>
        <Properties>
          <Property name="Orientation"
                    value="Horizontal" />
          <Property name="Distribution"
                    value="0.5"
                    minimumValue="0"
                    maximumValue="1" />
          <Property name="ApplyOpacity" />
          <Property name="MinElementScale"
                    value="0.6"
                    minimumValue="0"
                    maximumValue="1" />
          <Property name="HorizontalContentAlignment"
                    value="Stretch" />
          <Property name="VerticalContentAlignment"
                    value="Stretch" />
          <Property name="Center"
                    minimumValue="0"
                    maximumValue="1"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="MediaPlayer"
         assembly="C1.WPF.MediaPlayer">
      <Feature name="Media Player" assemblyName="MediaPlayerSamples.4.exe" source="C1.WPF.MediaPlayer\CS\MediaPlayerSamples\C1MediaPlayerPage.xaml"
               type="MediaPlayerSamples.DemoMediaPlayer">
        <Description>C1MediaPlayer provides a player that runs media, video or audio. Implement advanced features with ease such as play lists, full-screen mode and overlay support.</Description>
        <Properties>
          <Property name="IsChapterListButtonVisible" />
          <Property name="IsFullScreenButtonVisible" />
          <Property name="IsItemListButtonVisible" />
          <Property name="IsLoopButtonVisible" />
          <Property name="IsNextButtonVisible" />
          <Property name="IsPlayButtonVisible" />
          <Property name="IsPositionSliderVisible" />
          <Property name="IsPreviousButtonVisible" />
          <Property name="IsStopButtonVisible" />
          <Property name="IsTimePresenterVisible" />
          <Property name="IsTitleVisible" />
          <Property name="IsVolumeControlVisible" />
          <Property name="SuperimposeButtonsFullScreen" />
          <Property name="SuperimposeButtonsWindowed" />
          <Property name="Angle"
                    minimumValue="0"
                    maximumValue="360" />
        </Properties>
      </Feature>
      <Feature assemblyName="MediaPlayerSamples.4.exe" type="MediaPlayerSamples.DemoMediaPlayer" source="C1.WPF.MediaPlayer\CS\MediaPlayerSamples\C1MediaPlayerPage.xaml"
               name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the C1MediaPlayer control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush" />
          <Property name="MouseOverBrush" />
          <Property name="PressedBrush" />
          <Property name="FocusBrush" />
          <Property name="ButtonBackground" />
          <Property name="ButtonForeground" />
        </Properties>
      </Feature>
    </Control>
    <Control name="OutlookBar"
         assembly="C1.WPF.OutlookBar">
      <Feature name="Basic" source="C1.WPF.OutlookBar\CS\OutlookBarSamples\MainPage.xaml"
               type="OutlookBarSamples.DemoOutlookBar" assemblyName="OutlookBarSamples.4.exe">
        <Description>The C1OutlookBar control mimics the navigation pane in Microsoft Outlook, complete with large and small icons for each category. The bar can be collapsed by clicking a button and dragging the splitter.</Description>
      </Feature>
    </Control>
    <Control name="Menu"
        assembly="C1.WPF">
      <Feature name="Menu" assemblyName="BasicControls.4.exe" type="BasicControls.DemoMenu" source="C1.WPF\CS\BasicControls\Menu\C1Menu.xaml">
        <Description>Add a complete menu system to your WPF app with ComponentOne Menu for WPF.</Description>
      </Feature>
      <Feature name="RadialMenu" assemblyName="BasicControls.4.exe" type="BasicControls.DemoRadialMenu" source="C1.WPF\CS\BasicControls\Menu\C1RadialMenu.xaml">
        <Description>Inspired by modern touch-first interfaces, the C1RadialMenu control gives you a unique and touch-friendly alternative to the traditional context menu. Build nested menus and get specialized menu items for colors and a radial dial for numbers.</Description>
      </Feature>
    </Control>
    <Control name="TabControl"
           assembly="C1.WPF">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoTabControl" source="C1.WPF\CS\BasicControls\Containers\C1TabControl\C1TabControlPage.xaml">
        <Description>The C1TabControl is an ItemsControl for UI space-saving. Get four built-in tab shapes, scrolling, alignment options and a menu for tab selection.</Description>
        <Properties>
          <Property name="CanUserReorder"/>
          <Property name="TabItemClose"
                    caption="TabItemClose" />
          <Property name="TabItemShape"
                    caption="TabItemShape" />
          <Property name="TabStripMenuVisibility"
                    caption="TabStripMenuVisibility" />
          <Property name="TabStripOverlap"
                    caption="TabStripOverlap"
                    value="2"
                    minimumValue="0"
                    maximumValue="10"
                    nullable="false" />
          <Property name="TabStripOverlapDirection"
                    caption="TabStripOverlapDirection" />
          <Property name="TabStripPlacement"
                    caption="TabStripPlacement" />
        </Properties>
      </Feature>
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoTabControl" source="C1.WPF\CS\BasicControls\Containers\C1TabControl\C1TabControlPage.xaml"
               name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the C1TabControl. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush" />
          <Property name="MouseOverBrush" />
          <Property name="PressedBrush" />
          <Property name="SelectedBackground" />
          <Property name="TabStripBackground" />
          <Property name="TabStripForeground" />
          <Property name="TabStripMenuVisibility" />
        </Properties>
      </Feature>
    </Control>
    <Control name="Tile"
       assembly="C1.WPF.Tile">
      <Feature type="TileSamplesLib.TileTypes" source="C1.WPF.Tile\CS\TileSamples\TileSamplesLib\TileTypes.xaml"
               name="Tile Types">
        <Description>Shows different tile types with different settings in the ListBox control.</Description>
      </Feature>
      <Feature type="TileSamplesLib.FlickrPhotoViewer" source="C1.WPF.Tile\CS\TileSamples\TileSamplesLib\FlickrPhotoViewer.xaml"
                name="Flickr Photo Viewer">
        <Description>Shows different tile controls with ContentSource set. Also demonstrates how to bind custom delegate command to C1Tile control. Click on the tile to view full image in the separate window.</Description>
      </Feature>
    </Control>
    <Control name="TileView"
         assembly="C1.WPF.TileView">
      <Feature assemblyName="TileViewSamples.4.exe" type="TileViewSamples.MainPage" source="C1.WPF.TileView\CS\TileViewSamples\MainPage.xaml"
               name="Dashboard">
        <Description>Interactively browse through your data. The C1TileView control allows you to expand and collapse tiles to view more or less information. This control is great for dashboards, detail views, photo galleries and more.</Description>
        <Properties>
          <Property name="AnimationDuration" />
        </Properties>
      </Feature>
      <Feature assemblyName="TileViewSamples.4.exe" type="TileViewSamples.MainPage" source="C1.WPF.TileView\CS\TileViewSamples\MainPage.xaml"
               name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the C1TileView control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="Background" />
          <Property name="BorderBrush" />
          <Property name="BorderThickness" />
          <Property name="HeaderBackground" />
          <Property name="HeaderForeground" />
          <Property name="ItemBackground" />
          <Property name="ItemForeground" />
          <Property name="MouseOverBrush" />
          <Property name="PressedBrush" />
          <Property name="FocusBrush" />
        </Properties>
      </Feature>
    </Control>
    <Control name="Toolbar" isNew="true" assembly="C1.WPF.Toolbar">
      <Feature  name="Simplified Ribbon" type="ToolbarSamples.SimplifiedRibbon" source="C1.WPF.Toolbar\CS\ToolbarSamples\SimplifiedRibbon.xaml"  isNew="true" assemblyName="ToolbarSamples.4.exe">
        <Description>The simplified ribbon is a clean, compact hybrid of toolbar and ribbon design. Collapse the control for a compact, single line representation, or expand it to switch to a full ribbon appearance.</Description>
      </Feature>
      <Feature type="ToolbarSamples.Toolbar" source="C1.WPF.Toolbar\CS\ToolbarSamples\Toolbar.xaml" assemblyName="ToolbarSamples.4.exe">
        <Description>Add some organization and elegance to your application's menus and toolbars. The C1Toolbar control supports grouping buttons into tabs and groups. Get special buttons too like toggle, split and tool strips.</Description>
      </Feature>
      <Feature name="Toolbar commands" source="C1.WPF.Toolbar\CS\ToolbarSamples\ToolbarCommands.xaml" type="ToolbarSamples.ToolbarCommands" assemblyName="ToolbarSamples.4.exe">
        <Description>Toolbar commands allow you to specify toolbar button labels and images. The toolbar button can also have different sizes in the toolbar group.</Description>
      </Feature>
      <Feature name="Toolbar ClearStyle" source="C1.WPF.Toolbar\CS\ToolbarSamples\Toolbar.xaml" type="ToolbarSamples.Toolbar" assemblyName="ToolbarSamples.4.exe">
        <Description>Just change a few brush properties to quickly create a custom style for the C1Toolbar control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush" />
          <Property name="MouseOverBrush" />
          <Property name="PressedBrush" />
          <Property name="FocusBrush" />
        </Properties>
      </Feature>
      <Feature name="ToolbarStrip" type="ToolbarSamples.Toolstrip" assemblyName="ToolbarSamples.4.exe">
        <SubFeatures>
          <SubFeature type="ToolbarSamples.Toolstrip" source="C1.WPF.Toolbar\CS\ToolbarSamples\Toolstrip.xaml"
                      name="ToolbarStrip" assemblyName="ToolbarSamples.4.exe">
            <Description>C1ToolbarStrip can be used as a stand-alone control for less sophisticated scenarios.</Description>
            <Properties>
              <Property name="Orientation" />
              <Property name="Overflow" />
            </Properties>
          </SubFeature>
          <SubFeature type="ToolbarSamples.Toolstrip" source="C1.WPF.Toolbar\CS\ToolbarSamples\Toolstrip.xaml"
                      name="ClearStyle" assemblyName="ToolbarSamples.4.exe">
            <Description>Just change a few brush properties to quickly create a custom style for the C1ToolbarStrip control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
            <Properties>
              <Property name="DEMO_Background"
                        caption="Background" />
              <Property name="DEMO_Foreground"
                        caption="Foreground" />
              <Property name="DEMO_BorderBrush"
                        caption="BorderBrush" />
              <Property name="ButtonBackground" />
              <Property name="ButtonForeground" />
              <Property name="MouseOverBrush" />
              <Property name="PressedBrush" />
              <Property name="FocusBrush" />
            </Properties>
          </SubFeature>
        </SubFeatures>
      </Feature>
    </Control>
    <Control name="TreeView" assembly="C1.WPF">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoTreeView" source="C1.WPF\CS\BasicControls\ItemsControls\C1TreeViewPage.xaml" >
        <Description>Shows a hierarchical list of items in nodes that can be collapsed or expanded.</Description>
        <Properties>
          <Property name="AllowDragDrop" />
          <Property name="ShowLines" value="true" />
        </Properties>
      </Feature>
      <Feature name="Drag &amp; drop" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\ItemsControls\C1TreeViewDragDrop.xaml"
               type="BasicControls.DemoTreeViewDragDrop">
        <Description>Shows how you can customize default drag-and-drop operations according to your business logic.</Description>
      </Feature>
      <Feature name="External dragging" 
              assemblyName="C1TreeViewDragDropSample2010.4.exe" source="C1.WPF\CS\C1TreeViewDragDropSample\C1TreeViewDragDropSample2010\Interaction.xaml"
              type="C1TreeViewDragDropSample2010.Interaction">
        <Description>TreeView supports drag&amp;drop operations to and from other controls or applications.</Description>
      </Feature>
      <Feature name="Data bound" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\ItemsControls\SimpleC1TreeViewPage.xaml"
             type="BasicControls.DemoSimpleC1TreeView">
        <Description>Shows data bound TreeView with customized appearance.</Description>
      </Feature>
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoTreeView" source="C1.WPF\CS\BasicControls\ItemsControls\C1TreeViewPage.xaml"
               name="ClearStyle">
        <Description>Just change a few brush properties to quickly create a custom style for the C1TreeView control. Thanks to ComponentOne ClearStyle technology, you no longer have to hassle with XAML templates and style resources for simply changing a few colors.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background" />
          <Property name="DEMO_Foreground"
                    caption="Foreground" />
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush" />
          <Property name="MouseOverBrush" />
          <Property name="SelectedBackground" />
          <Property name="ShowLines" value="true" />
          <Property name="LineStroke" />
          <Property name="LineThickness" />
          <Property name="HorizontalAlignment"
                    display="false"
                    value="Center" />
          <Property name="VerticalAlignment"
                    display="false"
                    value="Top" />
        </Properties>
      </Feature>

    </Control>
    <Control name="Windows"
         assembly="C1.WPF">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoWindow" source="C1.WPF\CS\BasicControls\Containers\C1Window\C1WindowPage.xaml" >
        <Description>The C1Window control provides a familiar solution to handle different forms in your WPF XBAP applications. For example, display modal and modeless child windows, wizards, dialog boxes, and message boxes.</Description>
      </Feature>
    </Control>
  </Group>
  <Group name="Legacy Controls">
    <Control name="PdfViewer"
         assembly="C1.WPF.PdfViewer">
      <Feature assemblyName="PdfViewerSamples.4.exe" type="PdfViewerSamples.DemoPdfViewer" source="C1.WPF.PdfViewer\CS\PdfViewerSamples\C1PdfViewerPage.xaml" >
        <Description>Display PDF documents in WPF using the C1PdfViewer control. The control reads PDF files and translates them to native XAML elements so the end result is 100% native with no dependencies on Adobe.</Description>
      </Feature>
      <Feature name="PDF Acroform" assemblyName="PdfViewerSamples.4.exe" source="C1.WPF.PdfViewer\CS\PdfViewerSamples\AcroformDemo.xaml"
              type="PdfViewerSamples.AcroformDemo">
        <Description>This demo shows how you can display PDF file which includes acroform elements.</Description>
      </Feature>
      <Feature name="PDF Annotation" assemblyName="PdfViewerSamples.4.exe" source="C1.WPF.PdfViewer\CS\PdfViewerSamples\AnnotationDemo.xaml"
               type="PdfViewerSamples.AnnotationDemo">
        <Description>This demo shows how you can create annotations in the PDF file.</Description>
      </Feature>
    </Control>
    <Control name="ReportViewer"
           assembly="C1.WPF.ReportViewer">
      <Feature assemblyName="ReportViewerSamples.4.exe" type="ReportViewerSamples.DemoReportViewer" source="C1.WPF.ReportViewer\CS\ReportViewerSamples\MainPage.xaml" >
        <Description>The C1ReportViewer control is used to display server generated reports as PDF/MSHTML. Display reports generated by C1Reports, Microsoft Reporting Services, ActiveReports, Crystal, etc.</Description>
      </Feature>
    </Control>
  </Group>
</Controls>
