<?xml version="1.0" encoding="utf-8"?>
<Controls>
  <Group name="데이터 관리" isExpanded="true">
    <Control name="DataGrid" 
             isTop="true" 
         assembly="C1.WPF.DataGrid">
      <Feature assemblyName="DataGridSamples.4.exe" type="DataGridSamples.DemoGrid" source="C1.WPF.DataGrid\CS\DataGridSamples\DataGrid\DataGridPage.xaml">
        <Description>C1DataGrid 컨트롤을 사용하면 표 형식 데이터를 쉽게 표시, 편집, 분석할 수 있습니다. 이 데모는 정렬, 필터링, 그룹화, 고정된 열, 열/행 크기 조정 등 기본적으로 지원되는 모든 기능을 보여줍니다.</Description>
        <Properties>
          <Property name="HeadersVisibility"/>
          <Property name="SelectionMode"/>
          <Property name="CanUserSort"/>
          <Property name="CanUserFilter"/>
          <Property name="IsReadOnly"/>
          <Property name="CanUserRemoveRows"/>
          <Property name="CanUserAddRows"/>
          <Property name="CanUserEditRows"/>
          <Property name="CanUserGroup"
                    value="true"/>
          <Property name="CanUserResizeColumns"/>
          <Property name="CanUserResizeRows"/>
          <Property name="ShowGroupingPanel"/>
          <Property name="CanUserFreezeColumns"
                    value="Left"/>
          <Property name="GridLinesVisibility"/>
          <Property name="ShowVerticalFreezingSeparator"/>
          <Property name="FrozenColumnCount"
                    value="1"
                    minimumValue="0"
                    maximumValue="11"/>
          <Property name="IsLoading"/>
        </Properties>
      </Feature>
      <Feature name="Selection" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Selection\SelectionPage.xaml"
               type="DataGridSamples.Selection">
        <Description>C1DataGrid는 Microsoft Excel과 같은 셀 선택 기능을 제공하는 다양한 방법을 사용할 수 있는 여러 선택 모드를 지원합니다.</Description>
        <Properties>
          <Property name="SelectionMode"/>
          <Property name="ColumnHeaderClickAction"/>
        </Properties>
      </Feature>
      <Feature name="데이터 입력" assemblyName="DataGridSamples.4.exe" 
               type="DataGridSamples.DataInput">
        <SubFeatures>
          <SubFeature name="추가 및 제거" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\DataInput\AddRemoveRows\AddRemoveRowsPage.xaml" 
                      type="DataGridSamples.AddRemoveRows">
            <Description>C1DataGrid는 "새로운 행" 및 삭제를 지원하는 데이터 입력을 위해 특별히 설계되었습니다.</Description>
          </SubFeature>
          <SubFeature name="유효성 검사" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\DataInput\Validation\Validation.xaml" 
                      type="DataGridSamples.Validation">
            <Description>C1DataGrid는 기본 제공 WPF 유효성 검사 프레임워크도 지원합니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="필터" isExpanded="true">
        <Description>C1DataGrid에서 필터를 쉽게 사용자 정의하는 방법을 보여줍니다.</Description>
        <SubFeatures>
          <SubFeature name="필터 행" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Filters\FilterRow\FilterRowPage.xaml" 
                      type="DataGridSamples.FilterRow"/>
          <SubFeature name="전체 텍스트 검색" assemblyName="DataGridSamples.4.exe" 
                      source="C1.WPF.DataGrid\CS\DataGridSamples\Filters\FullTextSearch\FullTextSearchPage.xaml"
                      type="DataGridSamples.FullTextSearch"/>
          <SubFeature name="자동 필터" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Filters\AutoFilter\AutoFilterPage.xaml"
					  type="DataGridSamples.AutoFilter"/>
          <SubFeature name="사용자 정의 필터" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Filters\CustomFilters\CustomFilters.xaml"
                      type="DataGridSamples.CustomFilters"/>
          <SubFeature name="기본값 - Excel 스타일" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Filters\DefaultFilter\DefaultFilterPage.xaml"
                      type="DataGridSamples.DefaultFilter"/>
        </SubFeatures>
      </Feature>
      <Feature name="그룹화" assemblyName="DataGridSamples.4.exe"
               type="DataGridSamples.Grouping">
        <Description>그리드에서 데이터를 그룹화하고 사용자 정의된 요약 행을 표시하는 방법을 보여줍니다.</Description>
        <SubFeatures>
          <SubFeature name="그룹 요약" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Grouping\GroupSummary\GroupSummaryPage.xaml"
                      type="DataGridSamples.GroupSummary"/>
          <SubFeature name="총합계" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Grouping\GrandTotal\GrandTotalPage.xaml"
                      type="DataGridSamples.GrandTotal"/>
        </SubFeatures>
      </Feature>
      <Feature name="계층 구조">
        <Description>계층 구조 시나리오를 구성하는 많은 방법이 있으며, 여러 대안이 지원됩니다. 이 샘플에서는 Row.Visibility 속성을 사용하여 행을 숨기는 방법을 보여줍니다.</Description>
        <SubFeatures>
          <SubFeature name="Row.Visibility 사용" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Hierarchical\HierarchicalTasks\HierarchicalTasksPage.xaml"
                      type="DataGridSamples.HierarchicalTasks"/>
          <SubFeature name="중첩된 그리드" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Hierarchical\NestedGrids\NestedGridsPage.xaml"
                      type="DataGridSamples.Hierarchical">
            <Description>이 샘플에서는 상위/하위 시나리오를 위해 C1DataGrid를 중첩하는 방법을 보여줍니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="ClearStyle" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Appearance\AppearancePage.xaml"
               type="DataGridSamples.Appearance">
        <Description>C1DataGrid 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background"/>
          <Property name="DEMO_Foreground"
                    caption="Foreground"/>
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush"/>
          <Property name="GridLinesVisibility"/>
          <Property name="VerticalGridLinesBrush"/>
          <Property name="HorizontalGridLinesBrush"/>
          <Property name="RowBackground"/>
          <Property name="AlternatingRowBackground"/>
          <Property name="RowForeground"/>
          <Property name="AlternatingRowForeground"/>
          <Property name="SelectedBackground"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
          <Property name="ValidationBackground"/>
          <Property name="ValidationForeground"/>
          <Property name="GroupingPanelBackground"/>
          <Property name="GroupingPanelForeground"/>
          <Property name="HeaderBackground"/>
          <Property name="HeaderForeground"/>
          <Property name="DEMO_BorderThickness"
                    caption="BorderThickness"/>
        </Properties>
      </Feature>
      <Feature name="자세히" assemblyName="DataGridSamples.4.exe"
               type="DataGridSamples.Advanced">
        <Description>더 많은 시나리오를 찾으십니까? 처음부터 간단한 시나리오와 복잡한 시나리오를 모두 지원하도록 설계된 C1DataGrid 컨트롤을 사용하면 문제가 없습니다. 행과 열을 사용자 정의하고, 현지화하고, 데이터를 내보내는 등 다양한 작업을 수행할 수 있습니다.</Description>
        <SubFeatures>
          <SubFeature name="내보내기 형식" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\ExportFormats\ExportFormatsPage.xaml"
                      type="DataGridSamples.ExportFormats">
            <Description>C1DataGrid를 사용하면 콘텐츠를 여러 표준 형식으로 쉽게 내보낼 수 있습니다. HTML, PDF 및 Excel(클립보드 또는 파일 내보내기를 통해).</Description>
          </SubFeature>
          <SubFeature name="사용자 정의 열" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Advanced\CustomColumns\CustomColumnsPage.xaml"
                      type="DataGridSamples.CustomColumns"/>
          <SubFeature name="하이퍼링크" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Advanced\Hyperlinks.xaml"
                      type="DataGridSamples.Hyperlinks">
            <Description>하이퍼링크 열을 사용하는 방법을 참조하십시오.</Description>
          </SubFeature>
          <SubFeature name="사용자 정의 행" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Advanced\CustomRows\CustomRowsPage.xaml"
                      type="DataGridSamples.CustomRows"/>
          <SubFeature name="조건부 서식" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Advanced\ConditionalFormat\ConditionalFormatPage.xaml"
                      type="DataGridSamples.ConditionalFormat"/>
          <SubFeature name="행 끌어서 놓기" assemblyName="DataGridSamples.4.exe" source="C1.WPF.DataGrid\CS\DataGridSamples\Advanced\DragAndDropRows\DragAndDropRows.xaml"
                      type="DataGridSamples.DragAndDropRows"/>
        </SubFeatures>
      </Feature>
    </Control>
    <Control name="FlexGrid"
         isTop="true" 
         assembly="C1.WPF.FlexGrid.4">
      <Feature type="ShowCase.ShowCaseSample" name="ShowCase" assemblyName="ShowCase.exe" source="C1.WPF.FlexGrid\CS\ShowCase\ShowCase\ShowCaseSample.xaml" >
        <Description>
          최신의 고성능 FlexGrid 컨트롤은 최대한의 구성 및 사용자 정의를 위해 유연한 데이터 바인딩 및 사용하기 쉬운 API와 함께 제공됩니다.
		</Description>
      </Feature>
      <Feature type="MainTestApplication.Financial" assemblyName="FlexGridSamples.exe" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Financial\Financial.xaml">
        <Description>
          C1FlexGrid는 유연한 경량형 개체 모델을 사용한 DataGrid 컨트롤입니다. C1FlexGrid는 바운딩 해제 모드, 유연한 셀 병합, 다중 셀 행 및 열 머리글 등 다양한 고유 기능을 제공합니다.
          고정된 열 또는 행의 수를 변경하려면 고정 선을 끄십시오.
        </Description>
      </Feature>
      <Feature name="필터링" assemblyName="FlexGridSamples.exe" isExpanded="true">
        <SubFeatures>
          <SubFeature name="필터링" assemblyName="FlexGridSamples.exe"
               type="MainTestApplication.Filtering" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Filtering\Filtering.xaml">
            <Description>이 데모는 열 필터링을 사용 설정하는 방법을 보여줍니다. 열 머리글의 드롭다운을 클릭하여 필터를 설정할 수 있습니다. 활성 필터는 열 머리글에 아이콘으로 표시됩니다. 필터는 바인딩 및 바인딩 해제 모드에서 사용할 수 있습니다.</Description>
          </SubFeature>
          <SubFeature name="전체 텍스트 필터" assemblyName="FlexGridSamples.exe" 
               type="MainTestApplication.FullTextFilter" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Filtering\FullTextFilter.xaml">
            <Description>이 데모는 FullTextFilter를 사용하여 여러 열의 데이터를 필터링하고 강조 표시하는 방법을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="필터 행" assemblyName="FlexGridSamples.exe" 
                 type="MainTestApplication.FilterRow" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Filtering\FilterRow.xaml">
                <Description>텍스트가 입력되면 셀이 해당 열을 필터링하는 행을 표시합니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="그룹화" assemblyName="FlexGridSamples.exe">
        <SubFeatures>
          <SubFeature name="그룹화" assemblyName="FlexGridSamples.exe" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Grouping\Grouping.xaml"
                      type="MainTestApplication.Grouping">
            <Description>이 데모는 C1FlexGrid가 ICollectionView 데이터 그룹화를 지원하는 방법을 보여줍니다. AllowMerging 속성을 사용하여 콘텐츠가 동일한 인접 행을 병합할 수 있는 방법도 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="그룹화 패널" assemblyName="FlexGridSamples.exe" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Grouping\GroupingPanel.xaml"
                      type="MainTestApplication.GroupingPanel">
            <Description>그룹화 영역에 열 머리글을 끌어서 그룹을 만듭니다. 그룹을 만든 후, 표식을 끌어 그룹의 순서를 조정하거나 표식을 클릭하여 그룹을 제거하거나 정렬합니다.</Description>
          </SubFeature>
          <SubFeature name="사용자 정의 그룹화" assemblyName="FlexGridSamples.exe" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Grouping\CustomGrouping.xaml"
                      type="MainTestApplication.CustomGrouping">
            <Description>이 데모는 간단한 값 변환기를 사용하여 사용자 정의 그룹화 논리를 정의하는 방법을 보여줍니다. 사용자 정의 그룹을 보려면 Price, Cost 또는 Introduced로 그룹화하십시오.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="iTunes"
               type="MainTestApplication.iTunes" source="C1.WPF.FlexGrid\CS\FlexGridSamples\iTunes\iTunes.xaml"
               assemblyName="FlexGridSamples.exe">
        <Description>이 데모는 아티스트 및 앨범별로 그룹화된 노래가 10,000여 곡 포함된 라이브러리를 표시합니다. 여기에는 쉽고 빠르게 노래, 앨범 또는 아티스트를 찾을 수 있는 검색 상자가 포함됩니다. 필터링은 데이터 보기에서 이루어집니다. 이 데모는 셀을 사용자 정의하는 데 사용되는 C1FlexGrid의 CellFactory 인터페이스를 보여줍니다. 여기서는 사용자 정의 셀을 사용하여 아티스트, 앨범, 노래, 축소/확대 아이콘, 등급 옆에 이미지를 표시합니다. ICellFactory 인터페이스를 사용하고 셀을 나타내는 데 사용되는 FrameworkElement 개체를 제공하여 쉽게 사용자 정의 셀을 만들 수 있습니다.</Description>
      </Feature>
      <Feature name="선택"
               type="MainTestApplication.SelectionMode" source="C1.WPF.FlexGrid\CS\FlexGridSamples\SelectionMode\SelectionMode.xaml"
               assemblyName="FlexGridSamples.exe">
        <Description>C1FlexGrid에는 SelectionMode 속성으로 제어하는 다양한 선택 모델이 있습니다. 선택 모드를 단일 셀, 셀 범위(인접 셀의 블록), 단일 행, 행 범위 또는 목록 상자(연속적이 아니어도 됨)로 설정할 수 있습니다. 선택 모드에 관계없이, C1FlexGrid는 항상 선택된 셀을 CellRange 개체로 반환하므로 선택된 데이터를 쉽게 모니터링하고 사용할 수 있습니다.</Description>
      </Feature>
      <Feature name="바인딩 해제"
               type="MainTestApplication.Unbound" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Unbound\Unbound.xaml"
               assemblyName="FlexGridSamples.exe">
        <Description>IEnumerable 데이터 원본 사용 외에, C1FlexGrid는 바운딩 해제 모드도 지원합니다. 바운딩 해제 모드에서는 셀 값이 그리드 자체에 저장되고 익숙한 인덱싱 표기법을 사용하여 액세스할 수 있습니다. 이 데모는 병합된 다중 셀 행과 열 머리글을 설정하는 방법도 보여줍니다.</Description>
      </Feature>
      <Feature name="편집"
               type="MainTestApplication.Editing" source="C1.WPF.FlexGrid\CS\FlexGridSamples\Editing\Editing.xaml" 
               assemblyName="FlexGridSamples.exe">
        <Description>C1FlexGrid는 Excel 스타일 편집을 지원합니다. 셀에 값을 입력하고 Enter 또는 화살표 키를 사용하여 다음 셀로 이동하면 됩니다. 또는 F2 키를 눌러 전체 편집 모드로 전환할 수 있습니다. 이 모드에서는 화살표 키를 사용하여 편집기 내에서 이동할 수 있습니다. 자동 완성 및 값에 매핑된 열도 기본 제공됩니다. ColumnValueConverter를 만들어 열의 ValueConverter 속성에 할당하기만 하면 됩니다. 트랜잭션 방식 편집도 지원됩니다. 여기서 사용되는 Customer 클래스는 IEditableObject를 구현하므로, 새 행으로 이동하기 전에 Escape 키를 눌러 변경 사항을 취소할 수 있습니다. (참고: 회색 열은 읽기 전용입니다.)</Description>
      </Feature>
	  <Feature name="마우스로 가리키기" type="MainTestApplication.MouseHover" source="C1.WPF.FlexGrid\CS\FlexGridSamples\MouseHover\MouseHover.xaml"
               assemblyName="FlexGridSamples.exe">
		 <Description>마우스로 가리키기 데모</Description>
	  </Feature>
    </Control>
    <Control name="FlexSheet"
         assembly="C1.WPF.FlexSheet">
      <Feature assemblyName="FlexSheetSample.exe" type="FlexSheetSample.FlexSheetDemo" source="C1.WPF.FlexGrid.FlexSheet\CS\FlexSheetSample\FlexSheetSample\FlexSheetDemo.xaml" >
        <Description>C1FlexSheet는 WPF 응용 프로그램을 위해 여러 시트, 수식, 셀 서식 지정 등 Excel 스타일의 스프레드시트 기능을 제공합니다.</Description>
      </Feature>
    </Control>
    <Control name="ListBox"
         assembly="C1.Silverlight">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.ListBoxSample" source="C1.WPF\CS\BasicControls\ItemsControls\ListBoxSample.xaml">
        <Description>C1ListBox 컨트롤은 확대/축소 기능이 기본 제공되는 고성능 목록 상자입니다. 확대/축소하려면 CTRL 키를 누른 상태에서 마우스 휠을 사용하거나 터치 기반 장치를 사용하는 경우에는 핀치 제스처를 수행하십시오.</Description>
        <Properties>
          <Property name="Orientation"/>
          <Property name="ZoomMode"/>
          <Property name="SelectionMode"/>
          <Property name="HorizontalScrollBarVisibility"/>
          <Property name="VerticalScrollBarVisibility"/>
        </Properties>
      </Feature>
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.ListBoxSample" source="C1.WPF\CS\BasicControls\ItemsControls\ListBoxSample.xaml"
           name="ClearStyle">
        <Description>C1ListBox 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background"/>
          <Property name="DEMO_Foreground"
                    caption="Foreground"/>
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush"/>
          <Property name="SelectedBackground"/>
          <Property name="ButtonBackground"/>
          <Property name="ButtonForeground"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
          <Property name="DEMO_BorderThickness"
                    caption="BorderThickness"/>
          <Property name="CornerRadius"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="OLAP" assembly="C1.WPF.Olap">
      <Feature name="작동 모습 보기"
               type="OlapSamples.OlapDemo" assemblyName="OlapSamples.exe" source="C1.WPF.Olap\CS\OlapSamples\OlapSamples\Samples\OlapDemo.xaml">
        <Description>표와 큐브 데이터를 자르고 나누는 피벗 그리드와 차트를 만들어 실시간 정보, 분석 및 결과를 순식간에 제공합니다. 사용하기 쉬운 컨트롤은 Microsoft Excel® 피벗 테이블을 모델로 제작되어 강력한 기능을 제공하고 모든 사용자에게 친숙합니다.</Description>
      </Feature>
    </Control>
    <Control name="DataFilter" assembly="C1.WPF.DataFilter" >
      <Feature
        name="필터가 있는 고용주 목록" type="EmployeesListWithFilter.DataFilterSample" assemblyName="EmployeesListWithFilter.exe"
		source="C1.WPF.DataFilter\CS\EmployeesListWithFilter\Samples\DataFilterSample.xaml">
        <Description>DataFilter를 사용하여 기준을 기반으로 데이터를 필터링할 수 있습니다. 따라서 데이터 원본에서 쉽게 필터를 만들 수 있습니다. 필터는 자동으로 생성되거나 수동으로 만들 수 있습니다.
모든 컨트롤 또는 정보 화면에 Accordion 기반 필터링 UI를 연결하여 직관적인 필터링 환경을 제공할 수 있습니다.</Description>
      </Feature>
      <Feature
        name="필터가 있는 자동차 목록" type="CarsListWithFilter.CarsListControl" assemblyName="CarsListWithFilter.exe"
         source="C1.WPF.DataFilter\CS\CarsListWithFilter\Samples\CarsListControl.xaml">
        <Description>이 샘플에서는 자동으로 생성된 필터를 수정하고, 필터 식을 저장 및 복원하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature
        name="필터 요약" type="FilterSummary.FilterSummarySample" assemblyName="FilterSummary.exe"
		source="C1.WPF.DataFilter\CS\FilterSummary\Samples\FilterSummaryControl.xaml">
        <Description>이 샘플에서는 필터 요약의 여러 집계 식 및 사용자 정의 형식을 사용하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature
        name="필터 편집기" type="FilterEditor.FilterEditorSample" assemblyName="FilterEditor.exe"
		source="C1.WPF.DataFilter\CS\FilterEditor\Samples\FilterEditorControl.xaml">
        <Description>최종 사용자는 FilterEditor를 사용하여 복잡한 필터 기준을 만들 수 있습니다. 모든 컨트롤 또는 정보 화면에 TreeView 기반 필터링 UI를 연결할 수 있습니다. 모든 작업 컨트롤에 사용 가능한 옵션이 포함된 드롭다운 힌트가 표시됩니다.</Description>
      </Feature>
    </Control>
  </Group>
  <Group name="데이터 시각화" isExpanded="true">
    <Control name="Chart3D"
            assembly="C1.WPF.Chart3D">
      <Feature assemblyName="ChartSamples.4.exe" type="ChartSamples.Function3D" source="C1.WPF.Chart\CS\ChartSamples\3D\Function3D.xaml" >
        <Description>데이터를 3차원 그래프로 표시하십시오. C1Chart3D 컨트롤을 사용하면 윤곽 수준, 영역, 범례 등의 옵션이 포함된 표면 차트를 만들 수 있습니다.</Description>
      </Feature>
      <Feature name="상호 작용 및 레이블" assemblyName="ChartSamples.4.exe" type="ChartSamples.Elevation" source="C1.WPF.Chart\CS\ChartSamples\3D\Elevation.xaml">
        <Description>그림 영역을 끌어 차트와 상호 작용하면 점 정보가 포함된 도구 설명이 표시됩니다.</Description>
      </Feature>
    </Control>
    <Control name="차트"
     assembly="C1.WPF.Chart">
      <Description>C1Chart 컨트롤은 막대형, 세로 막대형, 영역형, 꺾은선형, 원형, 분산형 등 일반적인 모든 차트 유형을 지원합니다. 12가지 기본 제공 테마 및 22가지 색 팔레트를 사용하여 모양을 사용자 정의할 수 있습니다.</Description>
      <Feature assemblyName="ChartSamples.4.exe" type="ChartSamples.Gallery" source="C1.WPF.Chart\CS\ChartSamples\Basics\Gallery.xaml">
        <Description>이 데모는 C1Chart에서 지원하는 모든 2D 및 3D 차트 유형을 보여줍니다.</Description>
      </Feature>
      <Feature name="특수 차트" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.Labels">
        <SubFeatures>
          <SubFeature name="재무" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Combination\FinancialChart.xaml"
                      type="ChartSamples.FinancialChart">
            <Description>이 데모는 Y축이 두 개 있는 재무 차트를 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="방사형" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Basics\Radar.xaml"
                      type="ChartSamples.Radar">
            <Description>이 데모는 방사형 차트를 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="범위형 가로 막대 차트" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Basics\RangeBarChart.xaml"
                      type="ChartSamples.RangeBarChart">
            <Description>이 데모는 높은 온도와 낮은 온도를 시각화하는 Gantt 차트를 표시합니다.</Description>
          </SubFeature>
          <SubFeature name="거품형" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Appearance\Bubble.xaml"
                      type="ChartSamples.Bubble">
            <Description>이 데모는 그림 요소에 사용자 정의 스타일이 적용된 거품형 차트를 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="누적 원형" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Appearance\StackedPie.xaml"
                      type="ChartSamples.StackedPie">
            <Description>누적 원형 차트를 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="복잡한 세로 막대형" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Combination\ComplexChart.xaml"
                      type="ChartSamples.ComplexChart">
            <Description>여러 차트 유형을 여러 데이터 계열과 결합할 수 있습니다. 이 데모는 복잡한 누적 가로 막대형 차트를 보여줍니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="표식 및 레이블" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.Labels">
        <SubFeatures>
          <SubFeature name="단순 표식" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\SimpleMarker.xaml"
                      type="ChartSamples.SimpleMarker">
            <Description>이 데모는 ChartPanelObject 클래스를 사용하여 단순 표식을 만드는 방법을 보여줍니다. 표식을 보려면 차트를 마우스로 가리키십시오.</Description>
          </SubFeature>
          <SubFeature name="마우스 표식" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\MouseMarker.xaml"
                      type="ChartSamples.MouseMarker">
            <Description>이 데모는 마우스 커서와 함께 움직이는 표식을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="십자선" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\Markers.xaml"
                      type="ChartSamples.Markers">
            <Description>이 데모는 십자선과 같은 가로 및 세로 선 표식을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="정적 레이블" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Basics\Labels.xaml"
                      type="ChartSamples.Labels">
            <Description>이 데모는 데이터 요소의 정적 레이블 및 도구 설명을 보여줍니다. 또한 기본 제공 백분율 계열 레이블도 보여줍니다. 모든 UIElement는 도구 설명 및 레이블 내에 배치할 수 있습니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="상호 작용" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.InteractiveChart">
        <SubFeatures>
          <SubFeature name="대화형 확대/축소" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\InteractiveChart.xaml"
                      type="ChartSamples.InteractiveChart">
            <Description>사용자가 차트를 확대/축소하고, 크기를 조정하고, 스크롤할 수 있도록 하여 최종 사용자 경험을 개선할 수 있습니다. C1Chart 컨트롤에는 기본 제공 확대/축소, 이동(변환) 및 크기 조정 작업이 포함됩니다.</Description>
          </SubFeature>
          <SubFeature name="개요 및 세부 정보" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\ZoomChartControl.xaml"
                      type="ChartSamples.ZoomChartControl">
            <Description>위쪽 차트에서 범위를 선택하고 아래쪽 차트에서 세부 정보를 선택하십시오. 이 데모는 C1RangeSlider도 사용합니다</Description>
          </SubFeature>
          <SubFeature name="끌어서 놓기" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\DragDrop.xaml"
                      type="ChartSamples.DragDrop">
            <Description>C1Chart를 사용하면 각 시각적 그림 요소를 완벽하게 제어할 수 있습니다. 이 데모는 C1DragDropManager 클래스를 사용하여 두 차트 간에 끌어서 놓기를 구현합니다.</Description>
          </SubFeature>
          <SubFeature name="선택" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Interaction\Selection.xaml"
                      type="ChartSamples.Selection">
            <Description>선택은 ICollectionView 인터페이스를 구현하는 데이터 원본을 지원합니다. 이 데모는 C1FlexGrid도 사용합니다</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="그룹화 및 집계" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.AggregateCategoryAxis">
        <SubFeatures>
          <SubFeature name="범주 그룹화" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Aggregation\AggregateCategoryAxis.xaml"
                      type="ChartSamples.AggregateCategoryAxis">
            <Description>이 데모는 데이터 개체에서 이름 또는 범주와 같은 일부 속성을 그룹화하는 방법을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="날짜 축" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Aggregation\AggregateDateAxis.xaml"
                      type="ChartSamples.AggregateDateAxis">
            <Description>이 데모는 날짜를 기준으로 항목을 그룹화하여 연도, 월, 주별로 요약된 그림을 표시하는 방법을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="범위 분포" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Aggregation\AggregateRange.xaml"
                      type="ChartSamples.AggregateRange">
            <Description>이 데모는 값 범위별로 항목을 집계하는 방법을 보여줍니다. 이 차트에는 각 값 범위의 기준을 충족하는 항목의 수가 표시됩니다.</Description>
          </SubFeature>
          <SubFeature name="계열 집계" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Aggregation\AggregateChart.xaml"
                      type="ChartSamples.AggregateChart">
            <Description>이 데모는 각 데이터 계열을 하나의 총계, 개수, 평균 등으로 집계하는 방법을 보여줍니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="모양" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.VisualEffects">
        <SubFeatures>
          <SubFeature name="그림 영역" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Combination\PlotAreasHorizontal.xaml"
                      type="ChartSamples.PlotAreasHorizontal">
            <Description>C1Chart는 가로 및 세로로 쌓을 수 있는 여러 그림 영역을 지원합니다.</Description>
          </SubFeature>
          <SubFeature name="애니메이션 로드" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Appearance\LoadAnimation.xaml"
                      type="ChartSamples.LoadAnimation">
            <Description>C1Chart는 사용자 정의가 가능한 애니메이션을 로드할 수 있는 사용하기 쉬운 API를 제공합니다.</Description>
          </SubFeature>
          <SubFeature name="변환 애니메이션" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Appearance\Animation.xaml"
                      type="ChartSamples.Animation">
            <Description>이 데모는 새로운 데이터를 로드할 때 변화하는 애니메이션을 보여줍니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="성능" assemblyName="ChartSamples.4.exe"
                      type="ChartSamples.MainPage">
        <SubFeatures>
          <SubFeature name="라이브" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Performance\Dynamic.xaml"
                      type="ChartSamples.Dynamic">
            <Description>C1Chart가 ObservableCollection에 바인딩되면 데이터의 모든 변경 사항이 컨트롤에 자동으로 반영됩니다. 이 데모는 동적 꺾은선형 차트를 최솟값, 최댓값 및 평균값과 함께 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="대용량 데이터" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Performance\LargeData.xaml"
                      type="ChartSamples.LargeData">
            <Description>최적화 반경 기법을 보여주는 데이터 요소가 50,000개인 스크롤 가능한 꺾은선형 차트.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="축" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.LogAxes">
        <SubFeatures>
          <SubFeature name="로그" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Axes\LogAxes.xaml"
                      type="ChartSamples.LogAxes">
            <Description>다양한 로그 차트 축의 옵션을 표시합니다.</Description>
          </SubFeature>
          <SubFeature name="종속된 항목" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Axes\DependentAxes.xaml"
                      type="ChartSamples.DependentAxes">
            <Description>C1Chart는 측정 단위가 서로 다른 여러 Y축을 지원합니다.</Description>
          </SubFeature>
          <SubFeature name="원점" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Axes\AxisOrigin.xaml"
                      type="ChartSamples.AxisOrigin">
            <Description>원점을 변경하여 축을 배치합니다.</Description>
          </SubFeature>
          <SubFeature name="사용자 정의 레이블" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Axes\CustomLabels.xaml"
                      type="ChartSamples.CustomLabels">
            <Description>축에 사용자 정의 레이블을 표시합니다.</Description>
          </SubFeature>
          <SubFeature name="눈금" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Axes\AxisTicks.xaml"
                      type="ChartSamples.AxisTicks">
            <Description>축 눈금 표시의 길이와 겹침을 사용자 정의합니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="확장" assemblyName="ChartSamples.4.exe"
               type="ChartSamples.AggregateChart">
        <SubFeatures>
          <SubFeature name="이미지 내보내기" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Basics\ImageExport.xaml"
                      type="ChartSamples.ImageExport">
            <Description>이 데모는 차트를 이미지로 로컬에서 저장하는 방법을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="파라메트릭" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Advanced\Parametric.xaml"
                      type="ChartSamples.Parametric">
            <Description>파라메트릭 함수를 그림으로 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="추세선" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Advanced\TrendLines.xaml"
                      type="ChartSamples.TrendLines">
            <Description>자동 추세선 지원 기능을 사용하여 차트로 표시된 데이터를 분석해 보십시오. C1Chart는 다항식, 지수, 로그, 거듭제곱, Fourier, 평균, 이동 평균, 최솟값과 최댓값 등 여러 유형을 지원합니다.</Description>
          </SubFeature>
          <SubFeature name="이동 평균" assemblyName="ChartSamples.4.exe" source="C1.WPF.Chart\CS\ChartSamples\Advanced\MovAverage.xaml"
                      type="ChartSamples.MovAverage">
            <Description>이동 평균 추세선을 표시합니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
    </Control>
    <Control name="FinancialChart"
      assembly="C1.WPF.FinancialChart">
      <Feature name="차트 유형">
        <SubFeatures>
          <SubFeature name="Heikin-Ashi" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.HeikinAshi" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\HeikinAshi.xaml">
            <Description>Heikin-Ashi 차트는 원통형에서 노이즈를 제거하도록 설계되었으며 이동 평균처럼 동작하는 일본 원통형 차트의 변형입니다. 이 차트를 사용하여 추세, 잠재적 반전 지점, 기타 기술 분석 패턴을 식별할 수 있습니다.</Description>
          </SubFeature>
          <SubFeature name="선전환" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.LineBreak" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\LineBreak.xaml">
            <Description>선전환 또는 삼선전환 차트는 세로 상자 또는 선을 사용하여 자산이나 시장의 가격 변동을 보여줍니다. 상자 색과 스타일을 사용하여 변동이 표시됩니다. 이전 상자의 추세를 계속하는 변동은 비슷한 색이 지정되고, 반대 추세의 변동은 다른 색과 스타일로 표시됩니다. 반대 추세는 해당 값이 이전 n개 상자 또는 선의 극한값을 초과하는 경우에만 그려집니다. 극한값은 newLineBreaks 옵션을 통해 결정됩니다.</Description>
          </SubFeature>
          <SubFeature name="렌코" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.Renko" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\Renko.xaml">
            <Description>렌코 차트는 균일한 크기의 벽돌을 사용하여 가격 변동을 차트에 작성합니다. 가격이 새 벽돌을 그리는 데 필요한 미리 설정된 boxSize 옵션보다 더 크거나 작은 값으로 변동되면 다음 열에 새 벽돌이 그려집니다. 상자 색과 방향의 변화는 추세 반전을 나타냅니다.</Description>
          </SubFeature>
          <SubFeature name="카기" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.Kagi" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\Kagi.xaml">
            <Description>카기 차트는 연결된 세로 선의 시퀀스를 사용하여 공급 및 수요 추세를 표시합니다. 선의 두께와 방향은 가격 변동에 따라 다릅니다. 종가가 이전 카기 선의 방향으로 이동하면 카기 선이 확장됩니다. 하지만 종가가 미리 설정된 반전 금액만큼 반전되면 새 카기 선이 차트의 다음 세로 막대에 반대 방향으로 작성됩니다. 가는 선은 가격이 이전 저가(공급)를 초과함을 나타내고, 굵은 선은 가격이 이전 고가(수요)를 초과함을 나타냅니다.</Description>
          </SubFeature>
          <SubFeature name="ColumnVolume" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.ColumnVolume" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\ColumnVolume.xaml">
            <Description>ColumnVolume 차트는 각 막대의 너비를 지정하는 두 번째 값, 볼륨을 허용하는 점을 제외하고 세로 막대형 차트와 유사합니다.</Description>
          </SubFeature>
          <SubFeature name="EquiVolume" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.EquiVolume" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\EquiVolume.xaml">
            <Description>EquiVolume 차트는 원통형 차트와 유사하지만 높은 값과 낮은 값만 표시합니다. 또한 각 막대의 너비가 다섯 번째 값인 볼륨에 의해 결정됩니다.</Description>
          </SubFeature>
          <SubFeature name="CandleVolume" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.CandleVolume" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\CandleVolume.xaml">
            <Description>CandleVolume 차트는 각 막대의 너비가 다섯 번째 값인 볼륨에 의해 결정된다는 점을 제외하고 표준 원통형 차트와 동일합니다.</Description>
          </SubFeature>
          <SubFeature name="Arms CandleVolume" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.ArmsCandleVolume" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\ArmsCandleVolume.xaml">
            <Description>Richard Arms가 만든 Arms CandleVolume 차트는 EquiVolume 차트와 CandleVolume 차트가 결합된 차트입니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="상호 작용">
        <SubFeatures>
          <SubFeature name="표식" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.Markers" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\Markers.xaml">
            <Description>표식은 FinancialChart의 텍스트 영역에 차트의 마우스 커서 위치를 기반으로 데이터 값을 표시합니다. 표식은 또한 십자선 효과를 활성화하기 위해 선택적 세로선과 가로선을 지원합니다.</Description>
          </SubFeature>
          <SubFeature name="범위 선택기" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.RangeSelector" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\RangeSelector.xaml">
            <Description>RangeSelector를 사용하면 최종 사용자가 런타임에 FinancialChart의 데이터 가시 범위를 조정할 수 있습니다. 아래 예는 일반적인 RangeSelector 사용 사례 및 사용자 정의 스타일을 적용하는 방법을 보여줍니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="분석">
        <SubFeatures>
          <SubFeature name="추세선" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.TrendLines" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\TrendLines.xaml">
            <Description>추세선은 데이터의 추세를 시각화하고 예측 문제를 분석하는 데 사용됩니다.</Description>
          </SubFeature>
          <SubFeature name="이동 평균" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.MovingAverages" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\MovingAverages.xaml">
            <Description>이동 평균 추세선은 원래 데이터 집합에 대한 평균 계열을 생성하여 데이터를 분석하는 데 사용됩니다.</Description>
          </SubFeature>
          <SubFeature name="오버레이" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.Overlays" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\Overlays.xaml">
            <Description>오버레이는 기술 표시기와 마찬가지로 하나 이상의 수식을 원본 데이터 집합에 적용하여 계산된 파생 데이터 집합입니다. 일반적으로 오버레이는 자산의 시장 방향을 예측하는 데 사용되며, Y축 눈금이 같기 때문에 보통 원본 데이터 집합과 함께 그려집니다.</Description>
          </SubFeature>
          <SubFeature name="표시기" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.Indicators" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\Indicators.xaml">
            <Description>기술 표시기는 하나 이상의 수식을 원본 데이터 집합에 적용하여 계산된 파생 데이터 집합입니다. 일반적으로 기술 표시기는 자산의 시장 방향을 예측하는 데 사용되며, Y축 눈금이 다르기 때문에 보통 원본 데이터와는 별도로 그려집니다.</Description>
          </SubFeature>
          <SubFeature name="이벤트 주석" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.EventAnnotations" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\EventAnnotations.xaml">
            <Description>이벤트 주석은 FinancialChart의 특정 데이터 요소에 연결할 수 있는 중요한 이벤트를 표시하는 데 사용됩니다. 이벤트 주석을 마우스로 가리키면 이벤트에 대한 전체 정보가 표시됩니다.</Description>
          </SubFeature>
          <SubFeature name="Fibonacci 도구" assemblyName="FinancialChartExplorer.4.exe" type="FinancialChartExplorer.FibonacciTool" source="C1.WPF.FlexChart\CS\FinancialChartExplorer\View\FibonacciTool.xaml">
            <Description>Fibonacci 도구는 재무 차트의 추세 분석에 사용됩니다. 범위 선택기를 통해 계산에 사용할 데이터 범위를 선택할 수 있습니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
    </Control>
    <Control name="FlexChart" isTop="true" isNew="true"
       assembly="C1.WPF.FlexChart">
      <Feature name="Flex 차트">
        <SubFeatures>
          <SubFeature name="쇼케이스" assemblyName="FlexChartShowcase.exe" type="FlexChartShowcase.ShowcaseControl" source="C1.WPF.FlexChart\CS\FlexChartShowcase\Samples\ShowcaseControl.xaml">
            <Description>최신의 고성능 FlexChart 컨트롤은 최대한의 구성 및 사용자 정의를 위해 유연한 데이터 바인딩 및 사용하기 쉬운 API와 함께 제공됩니다. 차트에는 모든 데이터 시각화를 지원하기 위해 기본 유형에서 복잡한 유형에 이르기까지 다양한 유형이 있습니다.</Description>
          </SubFeature>
          <SubFeature name="소개" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Introduction" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Introduction.xaml">
            <Description>이 보기는 FlexChart의 기본 기능을 보여줍니다. 차트를 데이터 원본에 바인딩하고, 이 보기를 사용하면 차트 유형, 계열 스태킹 및 회전을 선택할 수 있습니다.</Description>
          </SubFeature>
          <SubFeature name="애니메이션" assemblyName="AnimationDemoWPF.exe"
                      type="AnimationDemo.Views.FlexChartAnimation" source="C1.WPF.FlexChart\CS\AnimationDemo\Views\FlexChartAnimation.xaml">
            <Description>FlexChart에는 새로운 데이터의 로드, 업데이트 및 추가를 위한 고급 애니메이션 옵션이 함께 제공됩니다.</Description>
          </SubFeature>
          <SubFeature name="사용자 정의 애니메이션" assemblyName="AnimationDemoWPF.exe"
                      type="AnimationDemo.Views.CustomAnimation" source="C1.WPF.FlexChart\CS\AnimationDemo\Views\CustomAnimation.xaml">
            <Description>이 보기는 AnimationTransform 이벤트를 사용하여 차트 애니메이션을 사용자 정의하는 방법을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="바인딩" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Binding" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Binding.xaml">
            <Description>이 보기는 FlexChart를 사용하여 단일 데이터 배열에서 두 개의 값 집합을 표시하는 방법을 보여줍니다. 이 시나리오가 FlexChart의 가장 일반적인 사용 시나리오입니다.</Description>
          </SubFeature>
          <SubFeature name="계열 바인딩" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.SeriesBinding" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\SeriesBinding.xaml">
            <Description>이 보기는 FlexChart를 사용하여 계열당 하나씩 여러 데이터 원본의 데이터를 표시하는 방법을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="머리글 및 바닥글" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.HeaderAndFooter" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\HeaderAndFooter.xaml">
            <Description>이 보기는 차트에 머리글과 바닥글을 추가하는 방법을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="선택" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Selection" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Selection.xaml">
            <Description>이 보기는 FlexChart의 선택 기능을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="레이블" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Labels" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Labels.xaml">
            <Description>이 보기는 FlexChart의 dataLabel 속성을 사용하여 각 데이터 요소에 레이블을 추가하는 방법을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="적중 테스트" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.HitTest" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\HitTest.xaml">
            <Description>이 보기는 FlexChart의 hitTest 메서드 사용 방법을 보여줍니다. hitTest 메서드는 점을 가져와 가장 가까운 차트 요소를 반환합니다. </Description>
          </SubFeature>
          <SubFeature name="확대/축소" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Zoom" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Zoom.xaml">
            <Description>이 보기는 FlexChart 컨트롤의 사용자 정의 확대/축소를 구현하는 방법을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="거품형" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Bubble" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Bubble.xaml">
            <Description>이 보기는 FlexChart 컨트롤을 사용하여 거품형 차트를 만드는 방법을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="재무 차트" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Financial" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Financial.xaml">
            <Description>이 보기는 FlexChart 컨트롤을 사용하여 재무 차트를 만드는 방법을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="축" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Axes" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Axes.xaml">
            <Description>이 보기는 y축이 두 개 있는 FlexChart를 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="그림 영역" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.PlotAreas" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\PlotAreas.xaml">
            <Description>이 보기는 그림 영역이 여러 개 있는 FlexChart를 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="축 바인딩" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.AxisBinding" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\AxisBinding.xaml">
            <Description>이 보기는 FlexChart의 축 바인딩 기능을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="영역" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Zones" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Zones.xaml">
            <Description>이 보기는 학생 성적의 분산형 차트를 만들고, 영역을 사용하여 각 성적 범위를 강조 표시합니다.</Description>
          </SubFeature>
          <SubFeature name="추세선" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.TrendLine" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\TrendLine.xaml">
            <Description>이 보기는 FlexChart의 TrendLine을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="폭포" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.Waterfall" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\Waterfall.xaml">
            <Description>이 보기는 FlexChart의 폭포를 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="상자-수염 그림" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.BoxWhisker" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\BoxWhisker.xaml">
            <Description>상자-수염 그림은 일반적으로 여러 숫자 데이터 집합 간의 분포를 비교하는 데 사용합니다.</Description>
          </SubFeature>
          <SubFeature name="오차 막대" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.ErrorBar" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\ErrorBar.xaml">
            <Description>오차 막대는 오차 및 표준 편차의 범위를 한눈에 확인하는 데 도움이 됩니다.</Description>
          </SubFeature>
          <SubFeature name="Break Even" isNew="true" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.BreakEven" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\BreakEven.xaml" >
            <Description>This view shows BreakEven Series in FlexChart.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Flex Pie" isExpanded="true">
        <SubFeatures>
          <SubFeature name="작동 모습 보기" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.PieIntroduction" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\PieIntroduction.xaml">
            <Description>이 보기는 FlexPie의 기본 기능을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="애니메이션" assemblyName="AnimationDemoWPF.exe"
                     type="AnimationDemo.Views.FlexPieAnimation" source="C1.WPF.FlexChart\CS\AnimationDemo\Views\FlexPieAnimation.xaml">
            <Description>FlexPie에는 새로운 데이터의 로드, 업데이트 및 추가를 위한 고급 애니메이션 옵션이 함께 제공됩니다.</Description>
          </SubFeature>
          <SubFeature name="선택" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.PieSelection" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\PieSelection.xaml">
            <Description>이 보기는 FlexPie의 선택 기능을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="여러 원형 차트" assemblyName="FlexChartExplorer.4.exe" 
                      type="FlexChartExplorer.MultiPie" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\MultiPie.xaml">
            <Description>바인딩에 쉼표로 구분된 여러 필드가 지정된 경우 여러 원형 차트를 그릴 수 있습니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="선버스트">
        <SubFeatures>
          <SubFeature name="작동 모습 보기" assemblyName="SunburstIntro.4.exe" type="SunburstIntro.GettingStarted" source="C1.WPF.FlexChart\CS\SunburstIntro\View\GettingStarted.xaml">
            <Description>선버스트 컨트롤을 사용하는 단계입니다.</Description>
          </SubFeature>
          <SubFeature name="기본 기능" assemblyName="SunburstIntro.4.exe" type="SunburstIntro.BasicFeatures" source="C1.WPF.FlexChart\CS\SunburstIntro\View\BasicFeatures.xaml">
            <Description>이 보기는 선버스트의 기본 기능을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="범례 및 제목" assemblyName="SunburstIntro.4.exe" type="SunburstIntro.LegendTitles" source="C1.WPF.FlexChart\CS\SunburstIntro\View\LegendTitles.xaml">
            <Description>이 보기를 사용하면 선버스트의 LegendPosition, Header 및 Footer 속성을 변경할 수 있습니다.</Description>
          </SubFeature>
          <SubFeature name="선택" assemblyName="SunburstIntro.4.exe" type="SunburstIntro.SunburstSelection" source="C1.WPF.FlexChart\CS\SunburstIntro\View\SunburstSelection.xaml">
            <Description>이 보기는 선버스트의 선택 기능을 보여줍니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="Flex 방사형">
        <SubFeatures>
          <SubFeature name="방사형 차트" assemblyName="FlexRadarIntro.4.exe" type="FlexRadarIntro.RadarChart" source="C1.WPF.FlexChart\CS\FlexRadarIntro\View\RadarChart.xaml">
            <Description>이 데모는 FlexRadar 컨트롤을 사용하여 방사형 차트를 만드는 방법을 보여줍니다.</Description>
          </SubFeature>
          <SubFeature name="극좌표형 차트" assemblyName="FlexRadarIntro.4.exe" type="FlexRadarIntro.PolarChart" source="C1.WPF.FlexChart\CS\FlexRadarIntro\View\PolarChart.xaml">
            <Description>FlexRadar 컨트롤은 x-값이 각도(도) 값을 지정하는 숫자인 경우 극좌표형 차트를 나타냅니다.</Description>
          </SubFeature>
        </SubFeatures>
      </Feature>
      <Feature name="트리맵" assemblyName="FlexChartExplorer.4.exe" type="FlexChartExplorer.TreeMap" source="C1.WPF.FlexChart\CS\FlexChartExplorer\View\TreeMap.xaml">
        <Description>C1TreeMap은 계층 구조 데이터를 중첩된 사각형 집합으로 표시합니다. 노드의 직사각형에는 Binding 속성에 의해 지정된 데이터 항목의 속성 값에 비례하는 영역이 있습니다. BindingName 속성은 직사각형 레이블에 표시된 데이터 항목의 속성을 지정합니다.</Description>
      </Feature>
    </Control>
    <Control name="GanttView" assembly="C1.WPF.GanttView">
      <Feature name="소개" assemblyName="GanttViewSample.exe" type="GanttViewSample.GanttViewDemo" source="C1.WPF.GanttView\CS\GanttViewSample\GanttViewSample\GanttViewDemo.xaml">
        <Description>날짜 표시줄, 그리드 또는 프로젝트 속성 변경 등 기본 GanttView 기능을 둘러보십시오. 대화 상자에서 작업을 편집하거나 작업 표시줄을 끌 수 있습니다. 작업을 필터링하거나 정렬할 수 있습니다.</Description>
      </Feature>
      <Feature name="CustomColumn" assemblyName="GanttViewSample.exe" type="GanttViewSample.CustomColumn" source="C1.WPF.GanttView\CS\GanttViewSample\GanttViewSample\CustomColumn.xaml">
        <Description>이 샘플은 리소스의 전체 비용에 리소스 사용량을 곱한 값으로 계산되는 특수 사용자 정의 열(Actual Cost)을 추가합니다. "Actual Cost" 열의 값은 원본 값(예: 리소스 비용 또는 작업 기간)이 변경될 때마다 다시 계산됩니다.</Description>
      </Feature>
      <Feature name="필터" assemblyName="GanttViewSample.exe" type="GanttViewSample.Filter" source="C1.WPF.GanttView\CS\GanttViewSample\GanttViewSample\Filter.xaml">
        <Description>이 샘플은 다양한 기존 필터를 조합하거나 여러 조건이 포함된 고급 필터를 사용하여 사용자 정의 필터를 만드는 방법을 나타냅니다.</Description>
      </Feature>
    </Control>
    <Control name="계기"
         assembly="C1.WPF.Gauge">
      <Feature name="방사형 계기" assemblyName="GaugeSamples.4.exe"
               source="C1.WPF.Gauge\CS\GaugeSamples\RadialGauge\C1RadialGaugePage.xaml"
			   type="GaugeSamples.DemoRadialGauge">
        <Description>계기에는 즉시 사용 가능한 여러 유형의 방사형 계기가 포함됩니다. 일반적인 방사형 계기에는 다이얼과 속도계가 포함됩니다.</Description>
        <SubFeatures>
          <SubFeature name="C1RadialGauge" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\RadialGauge\C1RadialGaugePage.xaml"
                      type="GaugeSamples.DemoRadialGauge"/>
          <SubFeature name="C1SpeedometerGauge" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\RadialGauge\C1SpeedometerGaugePage.xaml"
                      type="GaugeSamples.C1SpeedometerGaugePage"/>
          <SubFeature name="C1VolumeGauge" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\RadialGauge\C1VolumeGaugePage.xaml"
                      type="GaugeSamples.C1VolumeGaugePage"/>
        </SubFeatures>
      </Feature>
      <Feature name="선형 계기" assemblyName="GaugeSamples.4.exe"
               type="GaugeSamples.LinearGauge">
        <Description>계기에는 즉시 사용 가능한 여러 유형의 선형 계기가 포함됩니다. 일반적인 선형 계기에는 눈금자와 온도계가 포함됩니다.</Description>
        <SubFeatures>
          <SubFeature name="C1LinearGauge" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\LinearGauge\C1LinearGaugePage.xaml"
                      type="GaugeSamples.DemoLinearGauge"/>
          <SubFeature name="C1RulerGauge" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\LinearGauge\C1RulerGaugePage.xaml"
                      type="GaugeSamples.C1RulerGaugePage"/>
        </SubFeatures>
      </Feature>
      <Feature name="노브" assemblyName="GaugeSamples.4.exe"
               type="GaugeSamples.Knob">
        <Description>C1Knob 컨트롤을 사용하면 사용자가 포인터를 값으로 끌 수 있습니다. 고유한 C1RegionKnob도 사용자 정의 가능한 지역과 함께 포함됩니다. 노브 계기는 텍스트 기반 편집기나 슬라이더 대신 사용할 수 있는 방법을 제공합니다.</Description>
        <SubFeatures>
          <SubFeature name="C1Knob" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\Knob\C1KnobPage.xaml"
                      type="GaugeSamples.C1KnobPage"/>
          <SubFeature name="C1RegionKnob" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\Knob\C1RegionKnobPage.xaml"
                      type="GaugeSamples.C1RegionKnobPage"/>
        </SubFeatures>
      </Feature>
      <Feature name="고급 사용자 정의" assemblyName="GaugeSamples.4.exe" 
               type="GaugeSamples.Linears">
        <Description>전체 계기를 완전히 사용자 정의할 수 있습니다. 온도계를 만들고, 자동차 대시보드를 모방하는 등의 작업을 수행해 보십시오.</Description>
        <SubFeatures>
          <SubFeature name="온도계" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\LinearGauge\CustomLinearGauges\ThermometerUserControl.xaml"
                      type="GaugeSamples.ThermometerUserControl"/>
          <SubFeature name="규칙" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\LinearGauge\CustomLinearGauges\RuleUserControl.xaml"
                      type="GaugeSamples.RuleUserControl"/>
          <SubFeature name="시계" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\RadialGauge\ClockPage.xaml"
                      type="GaugeSamples.ClockPage"/>
          <SubFeature name="자동차" assemblyName="GaugeSamples.4.exe" source="C1.WPF.Gauge\CS\GaugeSamples\RadialGauge\SpeedometersPage.xaml"
                      type="GaugeSamples.SpeedometersPage"/>
        </SubFeatures>
      </Feature>
    </Control>
    <Control name="지도" assembly="C1.WPF.Maps" isNew="true">
      <Feature assemblyName="MapsSamples.4.exe" type="MapsSamples.DemoMaps" source="C1.WPF.Maps\CS\MapsSamples\C1MapsPage.xaml">
        <Description>C1Maps를 사용하면 화면과 지리적 좌표 간에 확대/축소, 이동, 매핑을 원활하게 할 수 있습니다. Microsoft Live Maps 등 다양한 출처의 정보를 표시합니다. 사용자 정의 요소를 지도 위에 겹쳐 놓을 수도 있습니다.</Description>
      </Feature>
      <Feature assemblyName="MapsSamples.4.exe" type="MapsSamples.Airports" isNew="true" name="Airports" source="C1.WPF.Maps\CS\MapsSamples\Vectorlayer\Airports.xaml">
        <Description>This view shows how to import GeoJSON data and display it on the map. The sample loads two GeoJSON files, one to show the land and second for the airport locations.</Description>
      </Feature>
      <Feature assemblyName="MapsSamples.4.exe" type="MapsSamples.DemoMaps" source="C1.WPF.Maps\CS\MapsSamples\C1MapsPage.xaml"
               name="ClearStyle">
        <Description>C1Maps 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background"/>
          <Property name="DEMO_Foreground"
                    caption="Foreground"/>
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="OrgChart"
         assembly="C1.WPF.OrgChart">
      <Feature name="기본"
               type="TestWPF.OrgChartSample" assemblyName="C1OrgChart_Demo2010.4.exe" source="C1.WPF.OrgChart\CS\C1OrgChart_Demo\C1OrgChart_Demo\OrgChartSample.xaml">
        <Description>데이터의 관계 및 구조를 표시하는 계층적 다이어그램을 제작할 수 있습니다. C1OrgChart 컨트롤은 플랫폼의 풍부한 데이터 바인딩 메커니즘을 활용합니다.</Description>
      </Feature>
      <Feature name="계층 구조" source="C1.WPF.OrgChart\CS\HierarchicalDataTemplate\HierarchicalDataTemplate\HierarchicalDataTemplateSample.xaml" 
               type="HierarchicalDataTemplateWPF.HierarchicalDataTemplateSample" assemblyName="HierarchicalDataTemplate2010.4.exe">
        <Description>
          DataTemplateSelector 및 HierarchicalDataTemplate 클래스를 사용하여 C1OrgChart용 고급 바인딩 시나리오를 보여줍니다.
		</Description>
      </Feature>
    </Control>
    <Control name="스파크라인"
         assembly="C1.WPF.Sparkline">
      <Feature name="작동 모습 보기" assemblyName="SparklineSamples.4.exe" type="SparklineSamples.SparklineDemo" source="C1.WPF.Sparkline\CS\SparklineSamples\SparklineDemo.xaml">
        <Description>C1SparkLine 컨트롤은 Microsoft Excel을 기반으로, 세 가지 유형의 스파크라인을 지원합니다.</Description>
      </Feature>
      <Feature name="사용자 정의" assemblyName="SparklineSamples.4.exe" type="SparklineSamples.AppearanceSample" source="C1.WPF.Sparkline\CS\SparklineSamples\AppearanceSample.xaml">
        <Description>이 데모는 스파크라인의 모양을 사용자 정의하기 위해 설정할 수 있는 다양한 속성을 보여줍니다.</Description>
      </Feature>
      <Feature name="데이터 바인딩" assemblyName="SparklineSamples.4.exe" type="SparklineSamples.RegionSales" source="C1.WPF.Sparkline\CS\SparklineSamples\RegionSales.xaml">
        <Description>이 데모는 데이터 바인딩된 ListBox의 스파크라인을 보여줍니다.</Description>
      </Feature>
      <Feature name="FlexGrid 통합" assemblyName="SparklineSamples.4.exe" type="SparklineSamples.FlexGridIntegration"
               source="C1.WPF.Sparkline\CS\SparklineSamples\FlexGridIntegration.xaml">
        <Description>이 데모는 FlexGrid 컨트롤용 CellTemplate에 스파크라인을 사용하는 방법을 보여줍니다.</Description>
      </Feature>
    </Control>
  </Group>
  <Group name="입력 및 편집">
    <Control name="ColorPicker"
         assembly="C1.WPF.Extended">
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoColorPicker" source="C1.WPF.Extended\CS\ExtendedSamples\C1ColorPicker\C1ColorPickerPage.xaml">
        <Description>전문적으로 디자인된 팔레트에서 색상을 선택하거나, 투명도 지원을 비롯하여 고유한 사용자 정의 색상을 구성하십시오.</Description>
        <Properties>
          <Property name="Palette"
                    value="Standard"/>
          <Property name="Mode"
                    value="Both"/>
          <Property name="ShowRecentColors"
                    value="True"/>
          <Property name="ShowAlphaChannel"/>
          <Property name="ShowTransparentColor"/>
          <Property name="CornerRadius"/>
        </Properties>
      </Feature>
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoColorPicker" source="C1.WPF.Extended\CS\ExtendedSamples\C1ColorPicker\C1ColorPickerPage.xaml"
               name="ClearStyle">
        <Description>C1ColorPicker 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background"/>
          <Property name="DEMO_Foreground"
                    caption="Foreground"/>
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
          <Property name="FocusBrush"/>
          <Property name="InputBackground"/>
          <Property name="InputForeground"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="ComboBox"
         assembly="C1.WPF">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoComboBox" source="C1.WPF\CS\BasicControls\Input\C1ComboBoxPage.xaml">
        <Description>C1ComboBox 컨트롤을 사용하면 사용자가 편집 가능한 텍스트 상자에 텍스트를 입력하거나 자동 검색 가능한 드롭다운 목록에서 텍스트를 선택할 수 있습니다.</Description>
        <Properties>
          <Property name="AutoComplete"
                    value="true"/>
          <Property name="Condition"/>
          <Property name="DropDownDirection"/>
          <Property name="IsEnabled"
                    value="true"/>
          <Property name="IsEditable"
                    value="false"/>
          <Property name="DropDownHeight"
                    nullable="true"
                    minimumValue="0"
                    maximumValue="400"/>
          <Property name="DropDownWidth"
                    nullable="true"
                    minimumValue="0" 
                    maximumValue="400"/>
          <Property name="CornerRadius"/>
        </Properties>
        <Event>SelectedItemChanged</Event>
      </Feature>
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoComboBox" source="C1.WPF\CS\BasicControls\Input\C1ComboBoxPage.xaml" 
               name="ClearStyle">
        <Description>C1ComboBox 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background"/>
          <Property name="DEMO_Foreground"
                    caption="Foreground"/>
          <Property name="DEMO_BorderBrush" 
                    caption="BorderBrush"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
          <Property name="SelectedBackground"/>
          <Property name="FocusBrush"/>
          <Property name="CaretBrush"/>
          <Property name="SelectionBackground"/>
          <Property name="SelectionForeground"/>
          <Property name="ButtonBackground"/>
          <Property name="ButtonForeground"/>
          <Property name="HorizontalAlignment"
                    display="false"
                    value="Center"/>
          <Property name="VerticalAlignment"
                    display="false"
                    value="Center"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="날짜/시간 편집기"
         assembly="C1.WPF.DateTimeEditors">
      <Feature name="C1DateTimePicker" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\Input\C1DateTimePickerPage.xaml"
               type="BasicControls.DemoDateTimePicker">
        <Description>C1DateTimePicker는 날짜 입력, 시간 입력 또는 동시에 둘 다 처리할 수 있습니다.</Description>
        <Properties>
          <Property name="EditMode"/>
          <Property name="DateFormat"/>
          <Property name="TimeFormat"/>
          <Property name="FirstDayOfWeek"/>
          <Property name="MinDate"/>
          <Property name="MaxDate"/>
          <Property name="IsReadOnly"/>
          <Property name="IsEnabled"/>
          <Property name="AllowNull"/>
        </Properties>
      </Feature>
      <Feature name="C1TimeEditor" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\Input\C1TimeEditorPage.xaml" 
               type="BasicControls.DemoTimeEditor">
        <Description>C1TimeEditor 컨트롤은 시간 값을 위한 간단한 편집기를 제공합니다.</Description>
        <Properties>
          <Property name="Format"/>
          <Property name="Increment"
                    nullable="false"/>
          <Property name="Minimum"/>
          <Property name="Maximum"/>
          <Property name="ShowButtons"/>
          <Property name="IsReadOnly"/>
          <Property name="IsEnabled"/>
          <Property name="AllowNull"/>
          <Property name="Delay"
                    minimumValue="0"
                    maximumValue="1000"/>
          <Property name="Interval"
                    minimumValue="1"
                    maximumValue="500"/>
        </Properties>
      </Feature>
      <Feature name="C1DatePicker" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\Input\C1DatePickerPage.xaml" 
           type="BasicControls.DemoDatePicker">
        <Description>C1DatePicker 컨트롤은 날짜 값을 위한 편집기를 제공합니다.</Description>
        <Properties>
          <Property name="IsReadOnly"/>
          <Property name="AllowNull"/>
          <Property name="FirstDayOfWeek" caption="First Day of Week"/>
          <Property name="SelectedDateFormat" caption="Selected Date Format"/>
          <Property name="CustomFormat"
                    caption="Custom Format"/>
          <Property name="Watermark"
                    type="String"/>
        </Properties>
      </Feature>
      <Feature name="고급 설정" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\Input\DateTimePickerAdvanced.xaml"
               type="BasicControls.DateTimePickerAdvanced">
        <Description>이 샘플은 날짜 및 시간 마스크를 사용하여 사용자 정의 형식으로 값을 입력하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature type="BasicControls.DemoDateTimePicker" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\Input\C1DateTimePickerPage.xaml"
               name="ClearStyle">
        <Description>날짜/시간 편집기 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="DEMO_Background"
                    caption="Background"/>
          <Property name="DEMO_Foreground"
                    caption="Foreground"/>
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
          <Property name="FocusBrush"/>
          <Property name="ButtonBackground"/>
          <Property name="ButtonForeground"/>
          <Property name="HorizontalAlignment"
                    display="false"
                    value="Center"/>
          <Property name="VerticalAlignment"
                    display="false"
                    value="Center"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="DropDown"
         assembly="C1.WPF">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoDropDown" source="C1.WPF\CS\BasicControls\Input\C1DropDownPage.xaml" >
        <Description>C1DropDown은 드롭다운 부분에 UIElement를 호스팅할 수 있으며, 드롭다운, SearchBox 또는 AutoCompleteBox에 TreeView 표시 등 더 일반적인 드롭다운 요구 사항을 해결하는 데 사용할 수 있습니다.</Description>
        <Properties>
          <Property name="DropDownDirection"/>
          <Property name="AutoClose"
                    value="true"/>
          <Property name="DropDownWidth"
                    nullable="true"
					minimumValue="0"
					maximumValue="200"/>
          <Property name="DropDownHeight"
                    nullable="true"
					minimumValue="0"
					maximumValue="200"/>
          <Property name="IsDropDownOpen"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="입력" assembly="C1.WPF.Input">
      <Feature name="C1MultiSelect" assemblyName="InputSamples.4.exe" type="InputSamples.C1MultiSelectPage" source="C1.WPF.Input\CS\InputSamples\InputSamples\C1MultiSelect\C1MultiSelectPage.xaml">
        <Description>MultiSelect 컨트롤을 사용하면 사용자가 드롭다운 검사 목록에서 또는 태그 목록을 편집하여 여러 개체를 선택할 수 있습니다. DropDown과 Header 모두 사용자 정의 가능하며, 데이터는 간단한 문자열에서 사용자 정의 개체에 이르기까지 다양합니다.</Description>
      </Feature>
      <Feature name="C1CheckList" assemblyName="InputSamples.4.exe" type="InputSamples.C1CheckListPage" source="C1.WPF.Input\CS\InputSamples\InputSamples\C1MultiSelect\C1CheckListPage.xaml">
        <Description>CheckList 컨트롤을 사용하면 사용자가 확인란이 있는 목록에서 여러 항목을 선택할 수 있습니다. 이 컨트롤은 데이터 바인딩 및 UI 사용자 정의 옵션을 지원합니다.</Description>
      </Feature>
      <Feature name="C1TagEditor" assemblyName="InputSamples.4.exe" type="InputSamples.C1TagEditorPage" source="C1.WPF.Input\CS\InputSamples\InputSamples\C1MultiSelect\C1TagEditorPage.xaml">
        <Description>TagEditor 컨트롤을 사용하여 태그를 추가하거나 제거하고 태그의 컬렉션을 편집해 보십시오. 구분 기호를 사용하여 태그를 텍스트로 나타내거나 버튼 스타일의 UI 요소로 나타낼 수 있습니다.</Description>
      </Feature>
      <Feature name="C1MaskedTextBox" assemblyName="BasicControls.4.exe" type="BasicControls.DemoMaskedTextBox" source="C1.WPF\CS\BasicControls\Input\C1MaskedTextBoxPage.xaml">
        <Description>C1MaskedTextBox 컨트롤을 사용하면 사용자가 지정된 마스크와 일치하는 텍스트를 입력할 수 있습니다.</Description>
        <Properties>
          <Property name="Text"/>
          <Property name="Mask" 
                    value="(###) 999-9999"/>
          <Property name="Value"/>
          <Property name="PromptChar"/>
          <Property name="TextMaskFormat"/>
          <Property name="IsReadOnly"/>
          <Property name="IsEnabled"/>
          <Property name="ReplaceMode"/>
          <Property name="TextAlignment"/>
          <Property name="Watermark" 
                    value="enter text here"/>
          <Property name="CornerRadius"/>
        </Properties>
        <Event>TextChanged</Event>
        <Text>(555) 555-1212</Text>
      </Feature>
      <Feature name="C1NumericBox" assemblyName="BasicControls.4.exe" type="BasicControls.DemoNumericBox" source="C1.WPF\CS\BasicControls\Input\C1NumericBoxPage.xaml">
        <Description>C1NumericBox 컨트롤을 사용하면 유연한 서식, 증분량, 위로/아래로 버튼을 사용하여 숫자 값을 입력할 수 있습니다.</Description>
        <Properties>
          <Property name="Value"/>
          <Property name="Format" 
                    value="N2"/>
          <Property name="Increment"/>
          <Property name="Minimum" 
                    value="-10000" 
					nullable="true"/>
          <Property name="Maximum" 
                    value="10000" 
					nullable="true"/>
          <Property name="IsReadOnly"/>
          <Property name="IsEnabled"/>
          <Property name="AllowNull"/>
          <Property name="ShowButtons"/>
          <Property name="TextAlignment"/>
          <Property name="Delay" 
                    minimumValue="0" 
					maximumValue="1000"/>
          <Property name="Interval" 
                    minimumValue="1" 
					maximumValue="500"/>
        </Properties>
        <Event>ValueChanged</Event>
      </Feature>
      <Feature name="C1RangeSlider" assemblyName="BasicControls.4.exe" type="BasicControls.DemoRangeSlider" source="C1.WPF\CS\BasicControls\Input\C1RangeSliderPage.xaml">
        <Description>C1RangeSlider는 기본 슬라이더 컨트롤을 확장하여 하나가 아닌 두 개의 섬(thumb) 요소를 제공하므로 사용자가 단일 값 대신 범위를 선택할 수 있습니다.</Description>
        <Properties>
          <Property name="Minimum"/>
          <Property name="Maximum"/>
          <Property name="LowerValue"/>
          <Property name="UpperValue"/>
          <Property name="Width" 
                    value="300" 
					minimumValue="0" 
					maximumValue="800" 
					nullable="true"/>
          <Property name="Height" 
                    minimumValue="0" 
					maximumValue="800" 
					nullable="true"/>
          <Property name="Orientation" 
                    value="Horizontal"/>
          <Property name="HorizontalAlignment" 
                    value="Center"/>
          <Property name="VerticalAlignment" 
                    value="Center"/>
        </Properties>
        <Event>UpperValueChanged,LowerValueChanged</Event>
      </Feature>
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoNumericBox" source="C1.WPF\CS\BasicControls\Input\C1NumericBoxPage.xaml"
               name="ClearStyle">
        <Description>C1NumericBox 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="Background" 
                    caption="Background"/>
          <Property name="Foreground" 
                    caption="Foreground"/>
          <Property name="BorderBrush" 
                    caption="BorderBrush"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
          <Property name="FocusBrush"/>
          <Property name="ButtonBackground"/>
          <Property name="ButtonForeground"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="InputPanel" assembly="C1.WPF.InputPanel">
      <Feature name="MS DataGrid와 함께 사용" assemblyName="InputPanelSample.4.exe" type="InputPanelSample.MSDataGridDemo" source="C1.WPF.InputPanel\CS\InputPanelSample\InputPanelSample\MSDataGrid\MSDataGridDemo.xaml">
        <Description>이 샘플은 C1InputPanel을 MS DataGrid와 함께 사용하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="C1DataGrid와 함께 사용" assemblyName="InputPanelSample.4.exe" type="InputPanelSample.C1DataGridDemo" source="C1.WPF.InputPanel\CS\InputPanelSample\InputPanelSample\C1DataGrid\C1DataGridDemo.xaml">
        <Description>이 샘플은 C1InputPanel을 C1DataGrid와 함께 사용하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="C1FlexGrid와 함께 사용" assemblyName="InputPanelSample.4.exe" type="InputPanelSample.FlexGridDemo" source="C1.WPF.InputPanel\CS\InputPanelSample\InputPanelSample\C1FlexGrid\FlexGridDemo.xaml">
        <Description>이 샘플은 C1InputPanel을 C1FlexGrid와 함께 사용하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="사용자 정의 템플릿" assemblyName="InputPanelSample.4.exe" type="InputPanelSample.CustomTemplate" source="C1.WPF.InputPanel\CS\InputPanelSample\InputPanelSample\CustomTemplate\CustomTemplate.xaml">
        <Description>이 샘플은 C1InputPanel 컨트롤용 사용자 정의 ItemsTemplate을 설정하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="행 세부 정보" assemblyName="InputPanelSample.4.exe" type="InputPanelSample.Integration" source="C1.WPF.InputPanel\CS\InputPanelSample\InputPanelSample\Integration\Integration.xaml">
        <Description>이 샘플은 C1InputPanel을 사용하여 여러 DataGrid 컨트롤에 행 세부 정보를 표시하는 방법을 보여줍니다.</Description>
      </Feature>
    </Control>
    <Control name="PropertyGrid"
         assembly="C1.WPF.Extended">
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoPropertyGrid" source="C1.WPF.Extended\CS\ExtendedSamples\C1PropertyGrid\C1PropertyGridPage.xaml">
        <Description>C1PropertyGrid를 사용하면 특수 편집 컨트롤을 사용하여 모든 개체를 편집할 수 있습니다.</Description>
        <Properties>
          <Property name="AutoGenerateMethods" 
                    value="false"/>
          <Property name="AutoGenerateProperties" 
                    value="false"/>
          <Property name="ShowDescription" 
                    value="true"/>
          <Property name="ShowResetButton" 
                    value="true"/>
        </Properties>
      </Feature>
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoPropertyGrid" source="C1.WPF.Extended\CS\ExtendedSamples\C1PropertyGrid\C1PropertyGridPage.xaml"
               name="ClearStyle">
        <Description>C1PropertyGrid 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="AutoGenerateMethods" 
                    value="false"/>
          <Property name="AutoGenerateProperties" 
                    value="false"/>
          <Property name="ShowDescription" 
                    value="true"/>
          <Property name="ShowResetButton" 
                    value="true"/>
          <Property name="DEMO_Background" 
                    caption="Background"/>
          <Property name="DEMO_Foreground" 
                    caption="Foreground"/>
          <Property name="DEMO_BorderBrush"
                    caption="BorderBrush"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
          <Property name="CategoryBackground"/>
          <Property name="CategoryForeground"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="등급" 
         assembly="C1.WPF.Extended">
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoRating" source="C1.WPF.Extended\CS\ExtendedSamples\C1Rating\C1RatingPage.xaml" >
        <Description>이 샘플은 C1Rating 컨트롤을 표시하고 아이콘을 사용자 정의하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoCustomAnimation" source="C1.WPF.Extended\CS\ExtendedSamples\C1Rating\CustomAnimation.xaml" 
               name="사용자 정의 애니메이션">
        <Description>이 샘플은 C1Rating 컨트롤에서 사용자 정의 애니메이션을 사용하는 방법을 보여줍니다.</Description>
      </Feature>
    </Control>
    <Control name="RichTextBox" 
         assembly="C1.WPF.RichTextBox">
      <Feature assemblyName="RichTextBoxSamples.4.exe" 
               type="RichTextBoxSamples.DemoRichTextBox" source="C1.WPF.RichTextBox\CS\RichTextBoxSamples\DemoRichTextBox.xaml" >
        <Description>
          서식 있는 텍스트를 로드 및 편집하고 HTML 문서로 저장합니다. 
		  새로운 SimplifiedRichTextBoxToolbar를 사용하여 Office 365 모양과 느낌을 구현해 보십시오. 
		  보기 탭에 줄 번호를 표시하거나 숨깁니다.
		  </Description>
        <Properties>
          <Property name="Width" 
                    minimumValue="0" 
					maximumValue="800" 
					nullable="true"/>
          <Property name="Height" 
                    minimumValue="0" 
					maximumValue="600" 
					nullable="true"/>
          <Property name="IsEnabled"/>
          <Property name="IsReadOnly"/>
          <Property name="SelectionBackground"/>
          <Property name="SelectionForeground"/>
        </Properties>
        <Event>RequestNavigate</Event>
      </Feature>
      <Feature name="서식 지정" assemblyName="RichTextBoxSamples.4.exe" 
               type="RichTextBoxSamples.MainPage" source="C1.WPF.RichTextBox\CS\RichTextBoxSamples\Formatting.xaml">
        <Description>이 데모는 C1RichTextBox에서 사용 가능한 대부분의 서식 지정 옵션을 보여줍니다.</Description>
      </Feature>
      <Feature name="맞춤법 검사" assemblyName="RichTextBoxSamples.4.exe"
               type="RichTextBoxSamples.AsYouTypeSpellCheck" source="C1.WPF.RichTextBox\CS\RichTextBoxSamples\AsYouTypeSpellCheck.xaml">
        <Description>C1RichTextBox는 C1SpellChecker 구성 요소를 사용하여 모달 및 입력 시 맞춤법 검사를 지원합니다. 이 기능이 어떻게 사용되는지 확인하려면 맞춤법 검사 버튼을 클릭하거나 텍스트 상자에 맞춤법이 틀린 단어를 입력하십시오.</Description>
      </Feature>
      <Feature name="가져오기 및 내보내기" assemblyName="RichTextBoxSamples.4.exe" 
               type="RichTextBoxSamples.DemoRichTextBoxFilter" source="C1.WPF.RichTextBox\CS\RichTextBoxSamples\DemoRichTextBoxFilter.xaml">
        <Description>HTML 및 RTF 콘텐츠를 C1RichTextBox로 직접 가져오거나 내보냅니다.</Description>
      </Feature>
      <Feature name="사용자 정의 ContextMenu" assemblyName="RichTextBoxSamples.4.exe" 
              type="RichTextBoxSamples.CustomContextMenu" source="C1.WPF.RichTextBox\CS\RichTextBoxSamples\CustomContextMenu.xaml">
        <Description>C1RichTextBox 컨트롤을 사용하여 C1RadialMenu를 사용자 정의 contextMenu로 사용하는 방법을 표시합니다.</Description>
      </Feature>
    </Control>
  </Group>
  <Group name="보고 및 문서">
    <Control name="Excel" 
     assembly="C1.WPF.Excel">
      <Feature assemblyName="ExcelSamples.4.exe" type="ExcelSamples.ExcelCreator" source="C1.WPF.Excel\CS\ExcelSamples\ExcelCreator.xaml">
        <Description>C1Excel 구성 요소의 기본 기능을 보여줍니다.</Description>
      </Feature>
    </Control>
    <Control name="FlexReport" 
       assembly="C1.WPF.FlexReport">
      <Feature name="FlexReport 뷰어" assemblyName="FlexReportSamples.4.exe" 
               type="FlexReportSamples.ViewerPage" source="C1.WPF.FlexReport\CS\FlexReportSamples\ViewerPage.xaml">
        <Description>이 샘플은 C1FlexViewerPane을 사용하여 FlexReport로 생성된 보고서를 표시하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="내보내기" assemblyName="FlexReportSamples.4.exe" 
               type="FlexReportSamples.ExportPage" source="C1.WPF.FlexReport\CS\FlexReportSamples\ExportPage.xaml">
        <Description>이 샘플을 사용하면 .flxr FlexReport 보고서 정의 파일에서 보고서를 선택하거나, 사전 정의된 보고서 목록에서 선택하고 보고서를 생성할 수 있습니다. 그런 다음 보고서를 지원되는 외부 형식으로 내보낼 수 있습니다.</Description>
      </Feature>
      <Feature name="인쇄" assemblyName="FlexReportSamples.4.exe" 
               type="FlexReportSamples.PrintPage" source="C1.WPF.FlexReport\CS\FlexReportSamples\PrintPage.xaml">
        <Description>이 샘플을 사용하면 .flxr FlexReport 보고서 정의 파일에서 보고서를 선택하거나, 사전 정의된 보고서 목록에서 선택하고 보고서를 생성할 수 있습니다. 그런 다음 보고서를 인쇄할 수 있습니다.</Description>
      </Feature>
    </Control>
    <Control name="FlexViewer" isTop="true" assembly="C1.WPF.FlexViewer">
      <Feature name="PDF 뷰어" assemblyName="PdfDocumentSourceSamples.4.exe"
               type="PdfDocumentSourceSamples.PdfViewPage" source="C1.WPF.Document\CS\PdfDocumentSourceSamples\PdfViewPage.xaml">
        <Description>C1FlexViewer 및 C1PdfDocumentSource를 사용하여 간단한 PDF 뷰어를 만드는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="FlexReport 뷰어" assemblyName="FlexReportSamples.4.exe" 
               type="FlexReportSamples.ViewerPage" source="C1.WPF.FlexReport\CS\FlexReportSamples\ViewerPage.xaml">
        <Description>이 샘플은 C1FlexViewerPane을 사용하여 FlexReport로 생성된 보고서를 표시하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="SSRS 뷰어" assemblyName="FlexReportSamples.4.exe" 
               type="FlexReportSamples.SsrsPage" source="C1.WPF.FlexReport\CS\FlexReportSamples\SsrsPage.xaml">
        <Description>이 샘플은 C1SSRSDocumentSource 구성 요소를 C1FlexViewerPane과 함께 사용하여 SSRS 서버에서 사용 가능한 보고서를 미리 보거나 인쇄하고, 다양한 형식으로 내보내는 방법을 보여줍니다.</Description>
      </Feature>
    </Control>
    <Control name="PdfDocumentSource"
       assembly="C1.WPF.Document">
      <Feature name="뷰어" assemblyName="PdfDocumentSourceSamples.4.exe" 
               type="PdfDocumentSourceSamples.PdfViewPage" source="C1.WPF.Document\CS\PdfDocumentSourceSamples\PdfViewPage.xaml">
        <Description>C1FlexViewer 및 C1PdfDocumentSource를 사용하여 간단한 PDF 뷰어를 만드는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="내보내기" assemblyName="PdfDocumentSourceSamples.4.exe" 
               type="PdfDocumentSourceSamples.ExportPage" source="C1.WPF.Document\CS\PdfDocumentSourceSamples\ExportPage.xaml">
        <Description>뷰어 없이 C1PdfDocumentSource를 사용하여 코드에서 문서를 내보내는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="인쇄" assemblyName="PdfDocumentSourceSamples.4.exe" 
               type="PdfDocumentSourceSamples.PrintPage" source="C1.WPF.Document\CS\PdfDocumentSourceSamples\PrintPage.xaml">
        <Description>뷰어 없이 C1PdfDocumentSource를 사용하여 코드에서 문서를 인쇄하는 방법을 보여줍니다.</Description>
      </Feature>
    </Control>
    <Control name="PDF" 
         assembly="C1.WPF.Pdf">
      <Feature name="기본" source="C1.WPF.Pdf\CS\PdfCreator\Basic.xaml" 
               type="PdfCreator.Basic" assemblyName="PdfCreator.4.exe">
        <Description>앱에서 쉽게 Adobe PDF 문서를 만들고, 인쇄하고 이메일로 보낼 수 있습니다. 클라이언트 측 PDF 문서를 사용하여 수행할 수 있는 기본 작업을 보여줍니다.</Description>
      </Feature>
      <Feature name="고급" source="C1.WPF.Pdf\CS\PdfCreator\Advanced.xaml" 
               type="PdfCreator.Advanced" assemblyName="PdfCreator.4.exe">
        <Description>클라이언트 측 PDF 문서를 사용하여 수행할 수 있는 고급 작업을 보여줍니다.</Description>
      </Feature>
    </Control>
    <Control name="Word"
         assembly="C1.WPF.Word">
      <Feature assemblyName="WordCreator.4.exe" type="Word.Creator.Basic" source="C1.WPF.Word\CS\WordCreator\Basic.xaml">
        <Description>앱에서 쉽게 Microsoft Word 문서를 만들고 저장할 수 있습니다. Word 문서로 수행할 수 있는 기본 작업을 보여줍니다.</Description>
      </Feature>
    </Control>
    <Control name="PrintDocument" assembly="C1.WPF.PrintDocument" isNew="true">
      <Feature name="Generate reports" assemblyName="SimpleReports.exe" type="SimpleReports.CustomReport" source="C1.WPF.PrintDocument\CS\SimpleReports\CustomReport.xaml" isNew="true">
        <Description>
          The sample contains methods that use the PrintDocument classes to create simple reports.
        </Description>
      </Feature>
      <Feature name="Binding" assemblyName="DataBinding.exe" type="DataBinding.DataBoundDoc" source="C1.WPF.PrintDocument\CS\DataBinding\DataBoundDoc.xaml">
        <Description>
          The C1PrintDocument component can be used to create rich documents containing tables, hyperlinks, input controls, images and more. You can easily add content to C1PrintDocument with its block, inline and direct rendering methods, and then print or export to PDF, Word, Excel and more. This demo shows the basics of data binding and scripting in C1PrintDocument.
        </Description>
      </Feature>
    </Control>
  </Group>
  <Group name="유틸리티">
    <Control name="바코드" assembly="C1.WPF.BarCode">
      <Feature assemblyName="BarCodesSample.4.exe" type="BarCodesSample.DemoPage" source="C1.WPF.BarCode\CS\BarCodeSamples\BarCodeSamples\DemoPage.xaml">
        <Description>C1BarCode 컨트롤은 여러 유형의 바코드 또는 QR 코드를 생성합니다.</Description>
      </Feature>
      <Feature name="새로운 바코드 유형"
               assemblyName="BarCodesSample.4.exe" type="BarCodesSample.NewBarcode" source="C1.WPF.BarCode\CS\BarCodeSamples\BarCodeSamples\NewBarcodes.xaml">
        <Description>2018년에 추가된 새로운 바코드 및 QR 코드 유형을 알아보십시오.</Description>
      </Feature>
    </Control>
    <Control name="식" 
         assembly="C1.WPF.ExpressionEditor">
      <Feature name="열 계산" assemblyName="C1ExpressionEditorSample.exe" type="C1ExpressionEditorSample.ColumnCalculation" source="C1.WPF.ExpressionEditor\CS\ExpressionEditorSamples\ExpressionEditorSamples\ColumnCalculation\ColumnCalculation.xaml">
        <Description>이 데모는 FlexGrid 또는 다른 데이터 그리드 내에서 ExpressionEditor를 사용하여 열 계산을 수행하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="그룹화" assemblyName="C1ExpressionEditorSample.exe" type="C1ExpressionEditorSample.SupportGrouping" source="C1.WPF.ExpressionEditor\CS\ExpressionEditorSamples\ExpressionEditorSamples\Grouping\SupportGrouping.xaml">
        <Description>이 데모는 FlexGrid 또는 다른 데이터 그리드 내에서 ExpressionEditor를 사용하여 데이터를 그룹화하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="필터" assemblyName="C1ExpressionEditorSample.exe" type="C1ExpressionEditorSample.SupportFilter" source="C1.WPF.ExpressionEditor\CS\ExpressionEditorSamples\ExpressionEditorSamples\Filter\SupportFilter.xaml">
        <Description>이 데모는 FlexGrid 및 다른 그리드 컨트롤 내에서 ExpressionEditor를 사용하여 데이터를 필터링하는 방법을 보여줍니다.</Description>
      </Feature>
    </Control>
    <Control name="테마" 
         assembly="C1.WPF.Themes">
      <Feature type="Themes.DemoThemes" assemblyName="Themes2010.4.exe" source="C1.WPF.Themes\CS\Themes2010\ThemesPage.xaml">
        <Description>
          Studio WPF Edition에는 스타일 가능성을 확장하는 다양한 전문 테마가 포함되어 있습니다. 
		  새로운 Office 2016 테마를 확인해 보십시오!
		</Description>
      </Feature>
      <Feature name="스케줄러 테마" assemblyName="Themes2010.4.exe" type="Themes.SchedulerThemes" source="C1.WPF.Themes\CS\Themes2010\SchedulerThemes.xaml">
        <Description>
          C1Scheduler를 사용하면 여러 보기, 예약 편집, 알림, 연락처, 레이블 및 리소스가 포함된 매우 정교한 예약 응용 프로그램을 만들 수 있습니다. 
		  새로운 Office 2016 테마를 확인해 보십시오!
		</Description>
      </Feature>
    </Control>
  </Group>
  <Group name="예약">
    <Control name="스케줄러" 
     assembly="C1.WPF.Schedule">
      <Feature name="테마 및 보기" assemblyName="Themes2010.4.exe" type="Themes.SchedulerThemes" source="C1.WPF.Themes\CS\Themes2010\SchedulerThemes.xaml">
        <Description>
          C1Scheduler를 사용하면 여러 보기, 예약 편집, 알림, 연락처, 레이블 및 리소스가 포함된 매우 정교한 예약 응용 프로그램을 만들 수 있습니다. 
		  새로운 Office 2016 테마를 확인해 보십시오!
		</Description>
      </Feature>
      <Feature name="포함된 테마" assemblyName="SchedulerSamples.4.exe" type="SchedulerSamples.DefaultSchedulerWindow" source="C1.WPF.Schedule\CS\SchedulerSamples\DefaultSchedulerWindow.xaml">
        <Description>C1Themes 외에도 C1Scheduler 어셈블리에는 포함된 테마가 여러 개 있습니다.</Description>
      </Feature>
      <Feature name="그룹화" assemblyName="SchedulerSamples.4.exe" type="SchedulerSamples.Grouping" source="C1.WPF.Schedule\CS\SchedulerSamples\Grouping.xaml">
        <Description>C1Scheduler 컨트롤은 리소스, 연락처 및 범주별 그룹화를 지원합니다.</Description>
      </Feature>
      <Feature name="사용자 정의 스타일" assemblyName="SchedulerSamples.4.exe" type="SchedulerSamples.CustomSchedulerStyles" source="C1.WPF.Schedule\CS\SchedulerSamples\CustomSchedulerStyles.xaml">
        <Description>사전 정의된 C1Scheduler 보기 대신 사용자 정의된 스타일을 사용하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="달력 설정:" assemblyName="SchedulerSamples.4.exe" type="SchedulerSamples.CalendarSettings" source="C1.WPF.Schedule\CS\SchedulerSamples\CalendarSettings.xaml">
        <Description>달력 설정: 한 주의 시작, 근무일, 공휴일, 근무하는 주말을 변경해 보십시오. C1Calendar와 C1Scheduler 컨트롤 간에 동일한 설정을 공유할 수 있습니다.</Description>
      </Feature>
      <Feature name="달력" assemblyName="SchedulerSamples.4.exe" type="SchedulerSamples.Calendar" source="C1.WPF.Schedule\CS\SchedulerSamples\Calendar.xaml">
        <Description>C1Calendar 컨트롤은 날짜 범위 선택, 월간 이동, ComponentOne Scheduler 컨트롤과의 완벽한 통합 지원 기능이 포함된 여러 달의 달력을 나타냅니다.</Description>
      </Feature>
    </Control>
  </Group>
  <Group name="탐색 및 레이아웃">
    <Control name="Accordion" 
         assembly="C1.WPF.Extended">
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoAccordion" source="C1.WPF.Extended\CS\ExtendedSamples\C1Accordion\C1AccordionPage.xaml" >
        <Description>UI를 구성하고 화면 영역을 최적화해 보십시오. C1Accordion은 여러 항목이 포함된 ItemsControl이며, C1Accordion을 사용하면 한 번에 하나의 항목만 확장할 수 있습니다.</Description>
        <Properties>
          <Property name="Width" 
                    minimumValue="10" 
					maximumValue="800" 
					nullable="true"/>
          <Property name="Height" 
                    minimumValue="10" 
					maximumValue="600" 
					nullable="true"/>
          <Property name="ExpandDirection" 
                    value="Down"/>
          <Property name="AllowCollapseAll"/>
          <Property name="Fill" 
                    value="true"/>
          <Property name="DEMO_Padding" 
                    caption="Padding"/>
          <Property name="HeaderPadding"/>
          <Property name="CornerRadius"/>
        </Properties>
      </Feature>
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoAccordion" source="C1.WPF.Extended\CS\ExtendedSamples\C1Accordion\C1AccordionPage.xaml" 
               name="ClearStyle">
        <Description>C1Accordion 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="DEMO_Background" 
                    caption="Background"/>
          <Property name="DEMO_Foreground" 
                    caption="Foreground"/>
          <Property name="DEMO_BorderBrush" 
                    caption="BorderBrush"/>
          <Property name="MouseOverBrush"/>
          <Property name="ExpandedBackground"/>
          <Property name="FocusBrush"/>
          <Property name="HeaderBackground"/>
          <Property name="HeaderForeground"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="비트맵" 
             assembly="C1.WPF.Bitmap">
      <Feature assemblyName="BitmapSamples.4.exe" type="BitmapSamples.Crop" name="자르기" source="C1.WPF.Bitmap\CS\BitmapSamples\Crop.xaml">
        <Description>C1Bitmap을 사용하여 이미지를 자르는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature assemblyName="BitmapSamples.4.exe" type="BitmapSamples.FaceWarp" name="FaceWarp" source="C1.WPF.Bitmap\CS\BitmapSamples\FaceWarp.xaml">
        <Description>C1Bitmap 및 꼭짓점 셰이더를 사용하여 이미지를 왜곡하는 방법을 보여줍니다.</Description>
      </Feature>
    </Control>
    <Control name="Book" 
           assembly="C1.WPF.Extended">
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoBook" source="C1.WPF.Extended\CS\ExtendedSamples\C1Book\C1BookPage.xaml" >
        <Description>C1Book 컨트롤을 사용하여 실제 책 모양으로 데이터를 표시하고 UI를 구성해 보십시오. 마우스 포인터를 사용하여 페이지를 끌어 실제 책과 같이 페이지를 넘길 수 있습니다. 모서리를 클릭하여 페이지를 뒤집을 수도 있습니다.</Description>
        <Properties>
          <Property name="ShowInnerShadows" 
                    value="true"/>
          <Property name="ShowOuterShadows" 
                    value="true"/>
          <Property name="IsFirstPageOnTheRight" 
                    value="false"/>
          <Property name="Orientation"/>
          <Property name="ShowPageFold"/>
          <Property name="PageFoldAction"/>
          <Property name="FoldSize" 
                    minimumValue="20" 
					maximumValue="100"/>
          <Property name="CurrentPage" 
                    minimumValue="0" 
					maximumValue="11"/>
        </Properties>
        <Event>CurrentPageChanged</Event>
      </Feature>
      <Feature name="단일 페이지" assemblyName="ExtendedSamples.4.exe" source="C1.WPF.Extended\CS\ExtendedSamples\C1Book\SinglePage.xaml" 
               type="ExtendedSamples.SinglePage">
        <Description>PageMode를 OnePage로 설정하여 단일 페이지로 된 책을 구성할 수 있습니다.</Description>
      </Feature>
    </Control>
    <Control name="Carousel" 
             assembly="C1.WPF.Carousel">
      <Feature assemblyName="CarouselSamples.4.exe" type="CarouselSamples.CarouselPage" source="C1.WPF.Carousel\CS\CarouselSamples\CarouselPage.xaml">
        <Description>C1CarouselPanel 컨트롤은 임의의 3D 경로를 따라 하위 요소를 정렬하는 가상화 패널 컨트롤입니다. 단순 항목 목록을 진정한 3D 관점 및 스크롤 애니메이션이 포함된 대화형 Carousel로 전환하려면 항목 컨트롤과 함께 C1CarouselPanel 컨트롤을 사용하십시오.</Description>
      </Feature>
    </Control>
    <Control name="DockControl" 
         assembly="C1.WPF.Docking">
      <Feature assemblyName="DockingSamples.4.exe" type="DockingSamples.DockControlBasic" source="C1.WPF.Docking\CS\DockingSamples\Basic\DockControlBasic.xaml" >
        <Description>응용 프로그램 내에서 여러 고정 창을 처리해 보십시오. C1DockControl은 공간을 채우는 콘텐츠를 지원합니다. 기본 모양은 Visual Studio의 고정 다이아몬드 모양 및 느낌과 유사합니다.</Description>
      </Feature>
      <Feature name="Visual Studio" assemblyName="DockingSamples.4.exe" type="DockingSamples.VisualStudioLookPage" source="C1.WPF.Docking\CS\DockingSamples\VisualStudioLook\VisualStudioLookPage.xaml">
        <Description>이 데모는 C1DockControl을 사용하여 완전한 Visual Studio 데모를 보여줍니다.</Description>
      </Feature>
    </Control>
    <Control name="DragDropManager" 
         assembly="C1.WPF">
      <Feature name="DemoListBox" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\DragDropManager\DemoListBox.xaml"
               type="BasicControls.DemoListBox">
        <Description>C1DragDropManager는 고급 끌어서 놓기 기능을 지원합니다. 여러 목록 상자 간에 쉽게 항목을 끌어서 놓을 수 있습니다.</Description>
      </Feature>
      <Feature name="검사기" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\DragDropManager\DemoDragDropManager.xaml" 
               type="BasicControls.DemoDragDropManager">
        <Description>C1DragDropManager 컨트롤을 사용하면 모든 UIElement에서 끌어서 놓기 작업을 쉽게 관리할 수 있습니다.</Description>
      </Feature>
    </Control>
    <Control name="확장기" 
         assembly="C1.WPF.Extended">
      <Description>C1Expander는 콘텐츠를 확장하고 축소할 수 있는 기능을 제공하는 매우 간단하지만 유용한 컨트롤입니다.</Description>
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoExpander" source="C1.WPF.Extended\CS\ExtendedSamples\C1Expander\C1ExpanderPage.xaml">
        <Properties>
          <Property name="ExpandDirection" 
                    value="Down"/>
          <Property name="IsExpandable"/>
          <Property name="Width" 
                    value="300" 
                    minimumValue="10" 
					maximumValue="800" 
					nullable="true"/>
          <Property name="Height" 
                    minimumValue="10" 
					maximumValue="600" 
					nullable="true"/>
        </Properties>
      </Feature>
      <Feature assemblyName="ExtendedSamples.4.exe" type="ExtendedSamples.DemoExpander" source="C1.WPF.Extended\CS\ExtendedSamples\C1Expander\C1ExpanderPage.xaml" 
               name="ClearStyle">
        <Description>C1Expander 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="HeaderForeground"/>
          <Property name="HeaderBackground"/>
          <Property name="ExpandedBackground"/>
          <Property name="DEMO_Background" 
                    caption="Background"/>
          <Property name="DEMO_Foreground" 
                    caption="Foreground"/>
          <Property name="MouseOverBrush"/>
          <Property name="FocusBrush"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="HyperPanel" 
          assembly="C1.WPF">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoHyperPanel" source="C1.WPF\CS\BasicControls\Panels\C1HyperPanelPage.xaml" >
        <Description>C1HyperPanel은 마우스 근처 항목에 자동 확대/축소 효과를 제공하는 StackPanel입니다.</Description>
        <Properties>
          <Property name="Orientation" 
                    value="Horizontal"/>
          <Property name="Distribution" 
                    value="0.5" 
					minimumValue="0" 
					maximumValue="1"/>
          <Property name="ApplyOpacity"/>
          <Property name="MinElementScale" 
                    value="0.6" 
					minimumValue="0" 
					maximumValue="1"/>
          <Property name="HorizontalContentAlignment" 
                    value="Stretch"/>
          <Property name="VerticalContentAlignment" 
                    value="Stretch"/>
          <Property name="Center" 
                    minimumValue="0" 
					maximumValue="1"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="MediaPlayer" 
         assembly="C1.WPF.MediaPlayer">
      <Feature name="MediaPlayer" assemblyName="MediaPlayerSamples.4.exe" source="C1.WPF.MediaPlayer\CS\MediaPlayerSamples\C1MediaPlayerPage.xaml" 
               type="MediaPlayerSamples.DemoMediaPlayer">
        <Description>C1MediaPlayer는 미디어, 비디오 또는 오디오를 실행하는 플레이어를 제공합니다. 재생 목록, 전체 화면 모드 및 오버레이 지원과 같은 고급 기능을 쉽게 구현할 수 있습니다.</Description>
        <Properties>
          <Property name="IsChapterListButtonVisible"/>
          <Property name="IsFullScreenButtonVisible"/>
          <Property name="IsItemListButtonVisible"/>
          <Property name="IsLoopButtonVisible"/>
          <Property name="IsNextButtonVisible"/>
          <Property name="IsPlayButtonVisible"/>
          <Property name="IsPositionSliderVisible"/>
          <Property name="IsPreviousButtonVisible"/>
          <Property name="IsStopButtonVisible"/>
          <Property name="IsTimePresenterVisible"/>
          <Property name="IsTitleVisible"/>
          <Property name="IsVolumeControlVisible"/>
          <Property name="SuperimposeButtonsFullScreen"/>
          <Property name="SuperimposeButtonsWindowed"/>
          <Property name="Angle" 
                    minimumValue="0" 
					maximumValue="360"/>
        </Properties>
      </Feature>
      <Feature assemblyName="MediaPlayerSamples.4.exe" type="MediaPlayerSamples.DemoMediaPlayer" source="C1.WPF.MediaPlayer\CS\MediaPlayerSamples\C1MediaPlayerPage.xaml" 
               name="ClearStyle">
        <Description>C1MediaPlayer 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="DEMO_Background" 
                    caption="Background"/>
          <Property name="DEMO_Foreground" 
                    caption="Foreground"/>
          <Property name="DEMO_BorderBrush" 
                    caption="BorderBrush"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
          <Property name="FocusBrush"/>
          <Property name="ButtonBackground"/>
          <Property name="ButtonForeground"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="OutlookBar" 
         assembly="C1.WPF.OutlookBar">
      <Feature name="기본" source="C1.WPF.OutlookBar\CS\OutlookBarSamples\MainPage.xaml" 
               type="OutlookBarSamples.DemoOutlookBar" assemblyName="OutlookBarSamples.4.exe">
        <Description>C1OutlookBar 컨트롤은 Microsoft Outlook의 탐색 창과 유사하며, 범주별로 크고 작은 아이콘이 포함되어 있습니다. 버튼을 클릭하고 분할자를 끌어 막대를 축소할 수 있습니다.</Description>
      </Feature>
    </Control>
    <Control name="메뉴" 
        assembly="C1.WPF">
      <Feature name="메뉴" assemblyName="BasicControls.4.exe" type="BasicControls.DemoMenu" source="C1.WPF\CS\BasicControls\Menu\C1Menu.xaml">
        <Description>WPF용 ComponentOne 메뉴를 사용하여 WPF 응용 프로그램에 완벽한 메뉴 시스템을 추가해 보십시오.</Description>
      </Feature>
      <Feature name="RadialMenu" assemblyName="BasicControls.4.exe" type="BasicControls.DemoRadialMenu" source="C1.WPF\CS\BasicControls\Menu\C1RadialMenu.xaml">
        <Description>최신 터치 우선 인터페이스를 바탕으로 설계된 C1RadialMenu 컨트롤을 통해 기존의 상황에 맞는 메뉴 대신 고유한 터치 지원 메뉴를 빌드할 수 있습니다. 중첩된 메뉴를 빌드하고 색상을 위한 특수 메뉴 항목과 숫자를 위한 방사형 다이얼을 사용해 보십시오.</Description>
      </Feature>
    </Control>
    <Control name="TabControl" 
           assembly="C1.WPF">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoTabControl" source="C1.WPF\CS\BasicControls\Containers\C1TabControl\C1TabControlPage.xaml">
        <Description>C1TabControl은 UI 공간 절약을 위한 ItemsControl입니다. 네 가지 기본 제공 탭 모양, 스크롤, 정렬 옵션 및 탭 선택을 위한 메뉴를 이용할 수 있습니다.</Description>
        <Properties>
          <Property name="CanUserReorder"/>
          <Property name="TabItemClose" 
                    caption="TabItemClose"/>
          <Property name="TabItemShape" 
                    caption="TabItemShape"/>
          <Property name="TabStripMenuVisibility" 
                    caption="TabStripMenuVisibility"/>
          <Property name="TabStripOverlap" 
                    caption="TabStripOverlap" 
                    value="2" 
					minimumValue="0" 
					maximumValue="10" 
					nullable="false"/>
          <Property name="TabStripOverlapDirection" 
                    caption="TabStripOverlapDirection"/>
          <Property name="TabStripPlacement" 
                    caption="TabStripPlacement"/>
        </Properties>
      </Feature>
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoTabControl" source="C1.WPF\CS\BasicControls\Containers\C1TabControl\C1TabControlPage.xaml" 
               name="ClearStyle">
        <Description>C1TabControl용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="DEMO_Background" 
                    caption="Background"/>
          <Property name="DEMO_Foreground" 
                    caption="Foreground"/>
          <Property name="DEMO_BorderBrush" 
                    caption="BorderBrush"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
          <Property name="SelectedBackground"/>
          <Property name="TabStripBackground"/>
          <Property name="TabStripForeground"/>
          <Property name="TabStripMenuVisibility"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="타일" 
       assembly="C1.WPF.Tile">
      <Feature type="TileSamplesLib.TileTypes" source="C1.WPF.Tile\CS\TileSamples\TileSamplesLib\TileTypes.xaml" 
               name="타일 유형">
        <Description>ListBox 컨트롤에 여러 설정이 포함된 여러 타일 유형을 표시합니다.</Description>
      </Feature>
      <Feature type="TileSamplesLib.FlickrPhotoViewer" source="C1.WPF.Tile\CS\TileSamples\TileSamplesLib\FlickrPhotoViewer.xaml" 
                name="Flickr 사진 뷰어">
        <Description>ContentSource가 설정된 여러 타일 컨트롤을 표시합니다. 사용자 정의 위임 명령을 C1Tile 컨트롤에 바인딩하는 방법도 보여줍니다. 전체 이미지를 별도의 창에 표시하려면 타일을 클릭하십시오.</Description>
      </Feature>
    </Control>
    <Control name="TileView" 
         assembly="C1.WPF.TileView">
      <Feature assemblyName="TileViewSamples.4.exe" type="TileViewSamples.MainPage" source="C1.WPF.TileView\CS\TileViewSamples\MainPage.xaml" 
               name="대시보드">
        <Description>데이터를 대화식으로 탐색해 보십시오. C1TileView 컨트롤을 사용하면 타일을 확대/축소하여 정보를 더 많이 보거나 더 적게 볼 수 있습니다. 이 컨트롤은 대시보드, 세부 정보 보기, 사진 갤러리 등에 적합합니다.</Description>
        <Properties>
          <Property name="AnimationDuration"/>
        </Properties>
      </Feature>
      <Feature assemblyName="TileViewSamples.4.exe" type="TileViewSamples.MainPage" source="C1.WPF.TileView\CS\TileViewSamples\MainPage.xaml" 
               name="ClearStyle">
        <Description>C1TileView 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="Background"/>
          <Property name="BorderBrush"/>
          <Property name="BorderThickness"/>
          <Property name="HeaderBackground"/>
          <Property name="HeaderForeground"/>
          <Property name="ItemBackground"/>
          <Property name="ItemForeground"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
          <Property name="FocusBrush"/>
        </Properties>
      </Feature>
    </Control>
    <Control name="도구 모음" assembly="C1.WPF.Toolbar">
      <Feature name="간소화된 리본" type="ToolbarSamples.SimplifiedRibbon" source="C1.WPF.Toolbar\CS\ToolbarSamples\SimplifiedRibbon.xaml" assemblyName="ToolbarSamples.4.exe">
        <Description>간소화된 리본은 도구 모음과 리본이 혼합된 컴팩트한 디자인입니다. 컨트롤을 축소하여 한 줄로 간단하게 표시하거나, 확대하여 전체 리본 모양으로 전환할 수 있습니다.</Description>
      </Feature>
      <Feature type="ToolbarSamples.Toolbar" source="C1.WPF.Toolbar\CS\ToolbarSamples\Toolbar.xaml" assemblyName="ToolbarSamples.4.exe">
        <Description>응용 프로그램의 메뉴와 도구 모음을 더 간결하게 정리해 보십시오. C1Toolbar 컨트롤을 사용하면 버튼을 탭과 그룹으로 구분할 수 있습니다. 토글, 분할, 도구 상자와 같은 특수 버튼을 이용해 보십시오.</Description>
      </Feature>
      <Feature name="도구 모음 명령" source="C1.WPF.Toolbar\CS\ToolbarSamples\ToolbarCommands.xaml" type="ToolbarSamples.ToolbarCommands" assemblyName="ToolbarSamples.4.exe">
        <Description>도구 모음 명령을 사용하면 도구 모음 버튼 레이블과 이미지를 지정할 수 있습니다. 도구 모음 그룹에서 도구 모음 버튼의 크기를 변경할 수도 있습니다.</Description>
      </Feature>
      <Feature name="도구 모음 ClearStyle" source="C1.WPF.Toolbar\CS\ToolbarSamples\Toolbar.xaml" type="ToolbarSamples.Toolbar" assemblyName="ToolbarSamples.4.exe">
        <Description>C1Toolbar 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="DEMO_Background" 
                    caption="Background"/>
          <Property name="DEMO_Foreground" 
                    caption="Foreground"/>
          <Property name="DEMO_BorderBrush" 
                    caption="BorderBrush"/>
          <Property name="MouseOverBrush"/>
          <Property name="PressedBrush"/>
          <Property name="FocusBrush"/>
        </Properties>
      </Feature>
      <Feature name="ToolbarStrip" type="ToolbarSamples.Toolstrip" assemblyName="ToolbarSamples.4.exe">
        <SubFeatures>
          <SubFeature type="ToolbarSamples.Toolstrip" source="C1.WPF.Toolbar\CS\ToolbarSamples\Toolstrip.xaml" name="ToolbarStrip" assemblyName="ToolbarSamples.4.exe">
            <Description>C1ToolbarStrip은 덜 복잡한 시나리오를 위한 독립 실행형 컨트롤로 사용할 수 있습니다.</Description>
            <Properties>
              <Property name="Orientation"/>
              <Property name="Overflow"/>
            </Properties>
          </SubFeature>
          <SubFeature type="ToolbarSamples.Toolstrip" source="C1.WPF.Toolbar\CS\ToolbarSamples\Toolstrip.xaml" name="ClearStyle" assemblyName="ToolbarSamples.4.exe">
            <Description>C1ToolbarStrip 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
            <Properties>
              <Property name="DEMO_Background" 
                        caption="Background"/>
              <Property name="DEMO_Foreground" 
                        caption="Foreground"/>
              <Property name="DEMO_BorderBrush" 
                        caption="BorderBrush"/>
              <Property name="ButtonBackground"/>
              <Property name="ButtonForeground"/>
              <Property name="MouseOverBrush"/>
              <Property name="PressedBrush"/>
              <Property name="FocusBrush"/>
            </Properties>
          </SubFeature>
        </SubFeatures>
      </Feature>
    </Control>
    <Control name="TreeView" assembly="C1.WPF">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoTreeView" source="C1.WPF\CS\BasicControls\ItemsControls\C1TreeViewPage.xaml" >
        <Description>축소하거나 확장할 수 있는 항목의 계층 구조 목록을 보여줍니다.</Description>
        <Properties>
          <Property name="AllowDragDrop"/>
          <Property name="ShowLines" value="true"/>
        </Properties>
      </Feature>
      <Feature name="끌어서 놓기" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\ItemsControls\C1TreeViewDragDrop.xaml" 
              type="BasicControls.DemoTreeViewDragDrop">
        <Description>비즈니스 논리에 따라 기본 끌어서 놓기 작업을 사용자 정의하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="외부 끌기"
	  assemblyName="C1TreeViewDragDropSample2010.4.exe" source="C1.WPF\CS\C1TreeViewDragDropSample\C1TreeViewDragDropSample2010\Interaction.xaml" 
              type="C1TreeViewDragDropSample2010.Interaction">
        <Description>TreeView는 다른 컨트롤 또는 응용 프로그램 간의 끌어서 놓기 작업을 지원합니다.</Description>
      </Feature>
      <Feature name="데이터 바인딩" assemblyName="BasicControls.4.exe" source="C1.WPF\CS\BasicControls\ItemsControls\SimpleC1TreeViewPage.xaml" 
             type="BasicControls.DemoSimpleC1TreeView">
        <Description>데이터 바인딩된 TreeView를 사용자 정의된 모양으로 표시합니다.</Description>
      </Feature>
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoTreeView" source="C1.WPF\CS\BasicControls\ItemsControls\C1TreeViewPage.xaml" 
               name="ClearStyle">
        <Description>C1TreeView 컨트롤용 사용자 정의 스타일을 신속하게 만들려면 몇 가지 브러시 속성만 변경하십시오. ComponentOne ClearStyle 기술 덕분에 더 이상 몇 가지 색상을 변경하기 위해 XAML 템플릿 및 스타일 리소스와 씨름하지 않아도 됩니다.</Description>
        <Properties>
          <Property name="DEMO_Background" 
                    caption="Background"/>
          <Property name="DEMO_Foreground" 
                    caption="Foreground"/>
          <Property name="DEMO_BorderBrush" 
                    caption="BorderBrush"/>
          <Property name="MouseOverBrush"/>
          <Property name="SelectedBackground"/>
          <Property name="ShowLines" value="true"/>
          <Property name="LineStroke"/>
          <Property name="LineThickness"/>
          <Property name="HorizontalAlignment" 
                    display="false" 
					value="Center"/>
          <Property name="VerticalAlignment" 
                    display="false" 
					value="Top"/>
        </Properties>
      </Feature>

    </Control>
    <Control name="Windows" 
         assembly="C1.WPF">
      <Feature assemblyName="BasicControls.4.exe" type="BasicControls.DemoWindow" source="C1.WPF\CS\BasicControls\Containers\C1Window\C1WindowPage.xaml" >
        <Description>C1Window 컨트롤은 WPF XBAP 응용 프로그램에서 여러 양식을 처리할 수 있는 익숙한 솔루션을 제공합니다. 예를 들어, 모달 및 모드가 없는 하위 창, 마법사, 대화 상자 및 메시지 상자를 표시합니다.</Description>
      </Feature>
    </Control>
  </Group>
  <Group name="레거시 컨트롤">
    <Control name="PdfViewer" 
         assembly="C1.WPF.PdfViewer">
      <Feature assemblyName="PdfViewerSamples.4.exe" type="PdfViewerSamples.DemoPdfViewer" source="C1.WPF.PdfViewer\CS\PdfViewerSamples\C1PdfViewerPage.xaml" >
        <Description>C1PdfViewer 컨트롤을 사용하여 WPF에 PDF 문서를 표시합니다. 이 컨트롤은 PDF 파일을 읽어 네이티브 XAML 요소로 변환하므로 Adobe에 의존하지 않는 100% 네이티브 최종 결과를 얻을 수 있습니다.</Description>
      </Feature>
      <Feature name="PDF Acroform" assemblyName="PdfViewerSamples.4.exe" source="C1.WPF.PdfViewer\CS\PdfViewerSamples\AcroformDemo.xaml" 
              type="PdfViewerSamples.AcroformDemo">
        <Description>이 데모는 Acroform 요소가 포함된 PDF 파일을 표시하는 방법을 보여줍니다.</Description>
      </Feature>
      <Feature name="PDF 주석" assemblyName="PdfViewerSamples.4.exe" source="C1.WPF.PdfViewer\CS\PdfViewerSamples\AnnotationDemo.xaml" 
               type="PdfViewerSamples.AnnotationDemo">
        <Description>이 데모는 PDF 파일에 주석을 만드는 방법을 보여줍니다.</Description>
      </Feature>
    </Control>
    <Control name="ReportViewer" 
           assembly="C1.WPF.ReportViewer">
      <Feature assemblyName="ReportViewerSamples.4.exe" type="ReportViewerSamples.DemoReportViewer" source="C1.WPF.ReportViewer\CS\ReportViewerSamples\MainPage.xaml" >
        <Description>C1ReportViewer 컨트롤은 서버에서 생성된 보고서를 PDF/MSHTML로 표시하는 데 사용됩니다 C1Reports, Microsoft Reporting Services, ActiveReports, Crystal 등에 의해 생성된 보고서를 표시합니다.</Description>
      </Feature>
    </Control>
  </Group>
</Controls>
