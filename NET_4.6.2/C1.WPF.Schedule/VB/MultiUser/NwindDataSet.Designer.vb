'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4211
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Namespace MultiUser


	''' <summary>
	'''Represents a strongly typed in-memory cache of data.
	'''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), Global.System.Xml.Serialization.XmlRootAttribute("NwindDataSet"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
 Partial Public Class NwindDataSet
        Inherits DataSet

        Private tableAppointments As AppointmentsDataTable

        Private tableCategories As CategoriesDataTable

        Private tableEmployees As EmployeesDataTable

        Private tableLabels As LabelsDataTable

        Private tableProducts As ProductsDataTable

        Private tableStatuses As StatusesDataTable

        Private tableCustomers As CustomersDataTable

        Private relationCategoriesProducts As Global.System.Data.DataRelation

        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            Me.BeginInit()
            Me.InitClass()
            Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, False)
            If (Me.IsBinarySerialized(info, context) = True) Then
                Me.InitVars(False)
                Dim schemaChangedHandler1 As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (ds.Tables("Appointments") IsNot Nothing) Then
                    MyBase.Tables.Add(New AppointmentsDataTable(ds.Tables("Appointments")))
                End If
                If (ds.Tables("Categories") IsNot Nothing) Then
                    MyBase.Tables.Add(New CategoriesDataTable(ds.Tables("Categories")))
                End If
                If (ds.Tables("Employees") IsNot Nothing) Then
                    MyBase.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
                End If
                If (ds.Tables("Labels") IsNot Nothing) Then
                    MyBase.Tables.Add(New LabelsDataTable(ds.Tables("Labels")))
                End If
                If (ds.Tables("Products") IsNot Nothing) Then
                    MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
                End If
                If (ds.Tables("Statuses") IsNot Nothing) Then
                    MyBase.Tables.Add(New StatusesDataTable(ds.Tables("Statuses")))
                End If
                If (ds.Tables("Customers") IsNot Nothing) Then
                    MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property Appointments() As AppointmentsDataTable
            Get
                Return Me.tableAppointments
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property Categories() As CategoriesDataTable
            Get
                Return Me.tableCategories
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property Employees() As EmployeesDataTable
            Get
                Return Me.tableEmployees
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property Labels() As LabelsDataTable
            Get
                Return Me.tableLabels
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property Products() As ProductsDataTable
            Get
                Return Me.tableProducts
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property Statuses() As StatusesDataTable
            Get
                Return Me.tableStatuses
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property Customers() As CustomersDataTable
            Get
                Return Me.tableCustomers
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.BrowsableAttribute(True), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
  Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set(ByVal value As SchemaSerializationMode)
                Me._schemaSerializationMode = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
  Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
  Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As NwindDataSet = (CType(MyBase.Clone(), NwindDataSet))
            cln.InitVars()
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset()
                Dim ds As New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If (ds.Tables("Appointments") IsNot Nothing) Then
                    MyBase.Tables.Add(New AppointmentsDataTable(ds.Tables("Appointments")))
                End If
                If (ds.Tables("Categories") IsNot Nothing) Then
                    MyBase.Tables.Add(New CategoriesDataTable(ds.Tables("Categories")))
                End If
                If (ds.Tables("Employees") IsNot Nothing) Then
                    MyBase.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
                End If
                If (ds.Tables("Labels") IsNot Nothing) Then
                    MyBase.Tables.Add(New LabelsDataTable(ds.Tables("Labels")))
                End If
                If (ds.Tables("Products") IsNot Nothing) Then
                    MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
                End If
                If (ds.Tables("Statuses") IsNot Nothing) Then
                    MyBase.Tables.Add(New StatusesDataTable(ds.Tables("Statuses")))
                End If
                If (ds.Tables("Customers") IsNot Nothing) Then
                    MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXml(reader)
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Friend Sub InitVars()
            Me.InitVars(True)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Friend Sub InitVars(ByVal initTable As Boolean)
            Me.tableAppointments = (CType(MyBase.Tables("Appointments"), AppointmentsDataTable))
            If (initTable = True) Then
                If (Me.tableAppointments IsNot Nothing) Then
                    Me.tableAppointments.InitVars()
                End If
            End If
            Me.tableCategories = (CType(MyBase.Tables("Categories"), CategoriesDataTable))
            If (initTable = True) Then
                If (Me.tableCategories IsNot Nothing) Then
                    Me.tableCategories.InitVars()
                End If
            End If
            Me.tableEmployees = (CType(MyBase.Tables("Employees"), EmployeesDataTable))
            If (initTable = True) Then
                If (Me.tableEmployees IsNot Nothing) Then
                    Me.tableEmployees.InitVars()
                End If
            End If
            Me.tableLabels = (CType(MyBase.Tables("Labels"), LabelsDataTable))
            If (initTable = True) Then
                If (Me.tableLabels IsNot Nothing) Then
                    Me.tableLabels.InitVars()
                End If
            End If
            Me.tableProducts = (CType(MyBase.Tables("Products"), ProductsDataTable))
            If (initTable = True) Then
                If (Me.tableProducts IsNot Nothing) Then
                    Me.tableProducts.InitVars()
                End If
            End If
            Me.tableStatuses = (CType(MyBase.Tables("Statuses"), StatusesDataTable))
            If (initTable = True) Then
                If (Me.tableStatuses IsNot Nothing) Then
                    Me.tableStatuses.InitVars()
                End If
            End If
            Me.tableCustomers = (CType(MyBase.Tables("Customers"), CustomersDataTable))
            If (initTable = True) Then
                If (Me.tableCustomers IsNot Nothing) Then
                    Me.tableCustomers.InitVars()
                End If
            End If
            Me.relationCategoriesProducts = Me.Relations("CategoriesProducts")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Sub InitClass()
            Me.DataSetName = "NwindDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/NwindDataSet.xsd"
            Me.EnforceConstraints = True
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableAppointments = New AppointmentsDataTable()
            MyBase.Tables.Add(Me.tableAppointments)
            Me.tableCategories = New CategoriesDataTable()
            MyBase.Tables.Add(Me.tableCategories)
            Me.tableEmployees = New EmployeesDataTable()
            MyBase.Tables.Add(Me.tableEmployees)
            Me.tableLabels = New LabelsDataTable()
            MyBase.Tables.Add(Me.tableLabels)
            Me.tableProducts = New ProductsDataTable()
            MyBase.Tables.Add(Me.tableProducts)
            Me.tableStatuses = New StatusesDataTable()
            MyBase.Tables.Add(Me.tableStatuses)
            Me.tableCustomers = New CustomersDataTable()
            MyBase.Tables.Add(Me.tableCustomers)
            Me.relationCategoriesProducts = New Global.System.Data.DataRelation("CategoriesProducts", New Global.System.Data.DataColumn() {Me.tableCategories.CategoryIDColumn}, New Global.System.Data.DataColumn() {Me.tableProducts.CategoryIDColumn}, False)
            Me.Relations.Add(Me.relationCategoriesProducts)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializeAppointments() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializeCategories() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializeEmployees() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializeLabels() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializeProducts() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializeStatuses() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Function ShouldSerializeCustomers() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
  Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As New NwindDataSet()
            Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As New Global.System.Xml.Schema.XmlSchemaAny()
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As New Global.System.IO.MemoryStream()
                Dim s2 As New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
                    Do While schemas.MoveNext()
                        schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                    Loop
                Finally
                    If (s1 IsNot Nothing) Then
                        s1.Close()
                    End If
                    If (s2 IsNot Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function

        Public Delegate Sub AppointmentsRowChangeEventHandler(ByVal sender As Object, ByVal e As AppointmentsRowChangeEvent)

        Public Delegate Sub CategoriesRowChangeEventHandler(ByVal sender As Object, ByVal e As CategoriesRowChangeEvent)

        Public Delegate Sub EmployeesRowChangeEventHandler(ByVal sender As Object, ByVal e As EmployeesRowChangeEvent)

        Public Delegate Sub LabelsRowChangeEventHandler(ByVal sender As Object, ByVal e As LabelsRowChangeEvent)

        Public Delegate Sub ProductsRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductsRowChangeEvent)

        Public Delegate Sub StatusesRowChangeEventHandler(ByVal sender As Object, ByVal e As StatusesRowChangeEvent)

        Public Delegate Sub CustomersRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomersRowChangeEvent)

        ''' <summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
        Partial Public Class AppointmentsDataTable
            Inherits TypedTableBase(Of AppointmentsRow)

            Private columnAppointmentId As Global.System.Data.DataColumn

            Private columnDescription As Global.System.Data.DataColumn

            Private columnEnd As Global.System.Data.DataColumn

            Private columnLocation As Global.System.Data.DataColumn

            Private columnStart As Global.System.Data.DataColumn

            Private columnSubject As Global.System.Data.DataColumn

            Private columnProperties As Global.System.Data.DataColumn

            Private columnOwner As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public Sub New()
                Me.TableName = "Appointments"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Friend Sub New(ByVal table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public ReadOnly Property AppointmentIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAppointmentId
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public ReadOnly Property EndColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEnd
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLocation
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public ReadOnly Property StartColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStart
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public ReadOnly Property SubjectColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSubject
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public ReadOnly Property PropertiesColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnProperties
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public ReadOnly Property OwnerColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOwner
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
   Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Default Public ReadOnly Property Item(ByVal index As Integer) As AppointmentsRow
                Get
                    Return (CType(Me.Rows(index), AppointmentsRow))
                End Get
            End Property

            Public Event AppointmentsRowChanging As AppointmentsRowChangeEventHandler

            Public Event AppointmentsRowChanged As AppointmentsRowChangeEventHandler

            Public Event AppointmentsRowDeleting As AppointmentsRowChangeEventHandler

            Public Event AppointmentsRowDeleted As AppointmentsRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public Sub AddAppointmentsRow(ByVal row As AppointmentsRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public Function AddAppointmentsRow(ByVal AppointmentId As Guid, ByVal Description As String, ByVal [End] As Date, ByVal Location As String, ByVal Start As Date, ByVal Subject As String, ByVal Properties As String, ByVal Owner As Integer) As AppointmentsRow
                Dim rowAppointmentsRow As AppointmentsRow = (CType(Me.NewRow(), AppointmentsRow))
                Dim columnValuesArray() As Object = {AppointmentId, Description, [End], Location, Start, Subject, Properties, Owner}
                rowAppointmentsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowAppointmentsRow)
                Return rowAppointmentsRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public Function FindByAppointmentId(ByVal AppointmentId As Guid) As AppointmentsRow
                Return (CType(Me.Rows.Find(New Object() {AppointmentId}), AppointmentsRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As AppointmentsDataTable = (CType(MyBase.Clone(), AppointmentsDataTable))
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New AppointmentsDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub InitVars()
                Me.columnAppointmentId = MyBase.Columns("AppointmentId")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnEnd = MyBase.Columns("End")
                Me.columnLocation = MyBase.Columns("Location")
                Me.columnStart = MyBase.Columns("Start")
                Me.columnSubject = MyBase.Columns("Subject")
                Me.columnProperties = MyBase.Columns("Properties")
                Me.columnOwner = MyBase.Columns("Owner")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Private Sub InitClass()
                Me.columnAppointmentId = New Global.System.Data.DataColumn("AppointmentId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAppointmentId)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnEnd = New Global.System.Data.DataColumn("End", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEnd)
                Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLocation)
                Me.columnStart = New Global.System.Data.DataColumn("Start", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStart)
                Me.columnSubject = New Global.System.Data.DataColumn("Subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSubject)
                Me.columnProperties = New Global.System.Data.DataColumn("Properties", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnProperties)
                Me.columnOwner = New Global.System.Data.DataColumn("Owner", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOwner)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAppointmentId}, True))
                Me.columnAppointmentId.AllowDBNull = False
                Me.columnAppointmentId.Unique = True
                Me.columnDescription.MaxLength = 536870910
                Me.columnLocation.MaxLength = 255
                Me.columnSubject.MaxLength = 255
                Me.columnProperties.MaxLength = 536870910
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public Function NewAppointmentsRow() As AppointmentsRow
                Return (CType(Me.NewRow(), AppointmentsRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New AppointmentsRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(AppointmentsRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent AppointmentsRowChanged(Me, New AppointmentsRowChangeEvent((CType(e.Row, AppointmentsRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent AppointmentsRowChanging(Me, New AppointmentsRowChangeEvent((CType(e.Row, AppointmentsRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent AppointmentsRowDeleted(Me, New AppointmentsRowChangeEvent((CType(e.Row, AppointmentsRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent AppointmentsRowDeleting(Me, New AppointmentsRowChangeEvent((CType(e.Row, AppointmentsRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public Sub RemoveAppointmentsRow(ByVal row As AppointmentsRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As New NwindDataSet()
                Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "AppointmentsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As New Global.System.IO.MemoryStream()
                    Dim s2 As New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
                        Do While schemas.MoveNext()
                            schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        Loop
                    Finally
                        If (s1 IsNot Nothing) Then
                            s1.Close()
                        End If
                        If (s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class CategoriesDataTable
            Inherits TypedTableBase(Of CategoriesRow)

            Private columnCategoryID As Global.System.Data.DataColumn

            Private columnCategoryName As Global.System.Data.DataColumn

            Private columnDescription As Global.System.Data.DataColumn

            Private columnPicture As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New()
                Me.TableName = "Categories"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property CategoryIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCategoryID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property CategoryNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCategoryName
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property PictureColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPicture
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Default Public ReadOnly Property Item(ByVal index As Integer) As CategoriesRow
                Get
                    Return (CType(Me.Rows(index), CategoriesRow))
                End Get
            End Property

            Public Event CategoriesRowChanging As CategoriesRowChangeEventHandler

            Public Event CategoriesRowChanged As CategoriesRowChangeEventHandler

            Public Event CategoriesRowDeleting As CategoriesRowChangeEventHandler

            Public Event CategoriesRowDeleted As CategoriesRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub AddCategoriesRow(ByVal row As CategoriesRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function AddCategoriesRow(ByVal CategoryName As String, ByVal Description As String, ByVal Picture() As Byte) As CategoriesRow
                Dim rowCategoriesRow As CategoriesRow = (CType(Me.NewRow(), CategoriesRow))
                Dim columnValuesArray() As Object = {Nothing, CategoryName, Description, Picture}
                rowCategoriesRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCategoriesRow)
                Return rowCategoriesRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function FindByCategoryID(ByVal CategoryID As Integer) As CategoriesRow
                Return (CType(Me.Rows.Find(New Object() {CategoryID}), CategoriesRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CategoriesDataTable = (CType(MyBase.Clone(), CategoriesDataTable))
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CategoriesDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub InitVars()
                Me.columnCategoryID = MyBase.Columns("CategoryID")
                Me.columnCategoryName = MyBase.Columns("CategoryName")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnPicture = MyBase.Columns("Picture")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Private Sub InitClass()
                Me.columnCategoryID = New Global.System.Data.DataColumn("CategoryID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCategoryID)
                Me.columnCategoryName = New Global.System.Data.DataColumn("CategoryName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCategoryName)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnPicture = New Global.System.Data.DataColumn("Picture", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPicture)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCategoryID}, True))
                Me.columnCategoryID.AutoIncrement = True
                Me.columnCategoryID.AllowDBNull = False
                Me.columnCategoryID.Unique = True
                Me.columnCategoryName.MaxLength = 30
                Me.columnDescription.MaxLength = 536870910
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function NewCategoriesRow() As CategoriesRow
                Return (CType(Me.NewRow(), CategoriesRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CategoriesRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CategoriesRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent CategoriesRowChanged(Me, New CategoriesRowChangeEvent((CType(e.Row, CategoriesRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent CategoriesRowChanging(Me, New CategoriesRowChangeEvent((CType(e.Row, CategoriesRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent CategoriesRowDeleted(Me, New CategoriesRowChangeEvent((CType(e.Row, CategoriesRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent CategoriesRowDeleting(Me, New CategoriesRowChangeEvent((CType(e.Row, CategoriesRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub RemoveCategoriesRow(ByVal row As CategoriesRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As New NwindDataSet()
                Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CategoriesDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As New Global.System.IO.MemoryStream()
                    Dim s2 As New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
                        Do While schemas.MoveNext()
                            schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        Loop
                    Finally
                        If (s1 IsNot Nothing) Then
                            s1.Close()
                        End If
                        If (s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class EmployeesDataTable
            Inherits TypedTableBase(Of EmployeesRow)

            Private columnEmployeeID As Global.System.Data.DataColumn

            Private columnLastName As Global.System.Data.DataColumn

            Private columnFirstName As Global.System.Data.DataColumn

            Private columnTitle As Global.System.Data.DataColumn

            Private columnTitleOfCourtesy As Global.System.Data.DataColumn

            Private columnBirthDate As Global.System.Data.DataColumn

            Private columnHireDate As Global.System.Data.DataColumn

            Private columnAddress As Global.System.Data.DataColumn

            Private columnCity As Global.System.Data.DataColumn

            Private columnRegion As Global.System.Data.DataColumn

            Private columnPostalCode As Global.System.Data.DataColumn

            Private columnCountry As Global.System.Data.DataColumn

            Private columnHomePhone As Global.System.Data.DataColumn

            Private columnExtension As Global.System.Data.DataColumn

            Private columnNotes As Global.System.Data.DataColumn

            Private columnReportsTo As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New()
                Me.TableName = "Employees"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property EmployeeIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEmployeeID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLastName
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFirstName
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTitle
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property TitleOfCourtesyColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTitleOfCourtesy
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnBirthDate
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property HireDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnHireDate
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAddress
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCity
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRegion
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property PostalCodeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPostalCode
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCountry
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnHomePhone
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property ExtensionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnExtension
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNotes
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property ReportsToColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnReportsTo
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Default Public ReadOnly Property Item(ByVal index As Integer) As EmployeesRow
                Get
                    Return (CType(Me.Rows(index), EmployeesRow))
                End Get
            End Property

            Public Event EmployeesRowChanging As EmployeesRowChangeEventHandler

            Public Event EmployeesRowChanged As EmployeesRowChangeEventHandler

            Public Event EmployeesRowDeleting As EmployeesRowChangeEventHandler

            Public Event EmployeesRowDeleted As EmployeesRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub AddEmployeesRow(ByVal row As EmployeesRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function AddEmployeesRow(ByVal LastName As String, ByVal FirstName As String, ByVal Title As String, ByVal TitleOfCourtesy As String, ByVal BirthDate As Date, ByVal HireDate As Date, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal HomePhone As String, ByVal Extension As String, ByVal Notes As String, ByVal ReportsTo As Integer) As EmployeesRow
                Dim rowEmployeesRow As EmployeesRow = (CType(Me.NewRow(), EmployeesRow))
                Dim columnValuesArray() As Object = {Nothing, LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDate, Address, City, Region, PostalCode, Country, HomePhone, Extension, Notes, ReportsTo}
                rowEmployeesRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowEmployeesRow)
                Return rowEmployeesRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function FindByEmployeeID(ByVal EmployeeID As Integer) As EmployeesRow
                Return (CType(Me.Rows.Find(New Object() {EmployeeID}), EmployeesRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As EmployeesDataTable = (CType(MyBase.Clone(), EmployeesDataTable))
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New EmployeesDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub InitVars()
                Me.columnEmployeeID = MyBase.Columns("EmployeeID")
                Me.columnLastName = MyBase.Columns("LastName")
                Me.columnFirstName = MyBase.Columns("FirstName")
                Me.columnTitle = MyBase.Columns("Title")
                Me.columnTitleOfCourtesy = MyBase.Columns("TitleOfCourtesy")
                Me.columnBirthDate = MyBase.Columns("BirthDate")
                Me.columnHireDate = MyBase.Columns("HireDate")
                Me.columnAddress = MyBase.Columns("Address")
                Me.columnCity = MyBase.Columns("City")
                Me.columnRegion = MyBase.Columns("Region")
                Me.columnPostalCode = MyBase.Columns("PostalCode")
                Me.columnCountry = MyBase.Columns("Country")
                Me.columnHomePhone = MyBase.Columns("HomePhone")
                Me.columnExtension = MyBase.Columns("Extension")
                Me.columnNotes = MyBase.Columns("Notes")
                Me.columnReportsTo = MyBase.Columns("ReportsTo")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Private Sub InitClass()
                Me.columnEmployeeID = New Global.System.Data.DataColumn("EmployeeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEmployeeID)
                Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLastName)
                Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFirstName)
                Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTitle)
                Me.columnTitleOfCourtesy = New Global.System.Data.DataColumn("TitleOfCourtesy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTitleOfCourtesy)
                Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnBirthDate)
                Me.columnHireDate = New Global.System.Data.DataColumn("HireDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnHireDate)
                Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAddress)
                Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCity)
                Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRegion)
                Me.columnPostalCode = New Global.System.Data.DataColumn("PostalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPostalCode)
                Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCountry)
                Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnHomePhone)
                Me.columnExtension = New Global.System.Data.DataColumn("Extension", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnExtension)
                Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNotes)
                Me.columnReportsTo = New Global.System.Data.DataColumn("ReportsTo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnReportsTo)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEmployeeID}, True))
                Me.columnEmployeeID.AutoIncrement = True
                Me.columnEmployeeID.AllowDBNull = False
                Me.columnEmployeeID.Unique = True
                Me.columnLastName.MaxLength = 20
                Me.columnFirstName.MaxLength = 10
                Me.columnTitle.MaxLength = 30
                Me.columnTitleOfCourtesy.MaxLength = 25
                Me.columnAddress.MaxLength = 60
                Me.columnCity.MaxLength = 15
                Me.columnRegion.MaxLength = 15
                Me.columnPostalCode.MaxLength = 10
                Me.columnCountry.MaxLength = 15
                Me.columnHomePhone.MaxLength = 24
                Me.columnExtension.MaxLength = 4
                Me.columnNotes.MaxLength = 536870910
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function NewEmployeesRow() As EmployeesRow
                Return (CType(Me.NewRow(), EmployeesRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New EmployeesRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(EmployeesRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent EmployeesRowChanged(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent EmployeesRowChanging(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent EmployeesRowDeleted(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent EmployeesRowDeleting(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub RemoveEmployeesRow(ByVal row As EmployeesRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As New NwindDataSet()
                Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "EmployeesDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As New Global.System.IO.MemoryStream()
                    Dim s2 As New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
                        Do While schemas.MoveNext()
                            schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        Loop
                    Finally
                        If (s1 IsNot Nothing) Then
                            s1.Close()
                        End If
                        If (s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class LabelsDataTable
            Inherits TypedTableBase(Of LabelsRow)

            Private columnLabelId As Global.System.Data.DataColumn

            Private columnText As Global.System.Data.DataColumn

            Private columnDescription As Global.System.Data.DataColumn

            Private columnColor As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New()
                Me.TableName = "Labels"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property LabelIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLabelId
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property TextColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnText
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property ColorColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnColor
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Default Public ReadOnly Property Item(ByVal index As Integer) As LabelsRow
                Get
                    Return (CType(Me.Rows(index), LabelsRow))
                End Get
            End Property

            Public Event LabelsRowChanging As LabelsRowChangeEventHandler

            Public Event LabelsRowChanged As LabelsRowChangeEventHandler

            Public Event LabelsRowDeleting As LabelsRowChangeEventHandler

            Public Event LabelsRowDeleted As LabelsRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub AddLabelsRow(ByVal row As LabelsRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function AddLabelsRow(ByVal LabelId As Guid, ByVal Text As String, ByVal Description As String, ByVal Color As String) As LabelsRow
                Dim rowLabelsRow As LabelsRow = (CType(Me.NewRow(), LabelsRow))
                Dim columnValuesArray() As Object = {LabelId, Text, Description, Color}
                rowLabelsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowLabelsRow)
                Return rowLabelsRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function FindByLabelId(ByVal LabelId As Guid) As LabelsRow
                Return (CType(Me.Rows.Find(New Object() {LabelId}), LabelsRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As LabelsDataTable = (CType(MyBase.Clone(), LabelsDataTable))
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New LabelsDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub InitVars()
                Me.columnLabelId = MyBase.Columns("LabelId")
                Me.columnText = MyBase.Columns("Text")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnColor = MyBase.Columns("Color")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Private Sub InitClass()
                Me.columnLabelId = New Global.System.Data.DataColumn("LabelId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLabelId)
                Me.columnText = New Global.System.Data.DataColumn("Text", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnText)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnColor = New Global.System.Data.DataColumn("Color", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnColor)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLabelId}, True))
                Me.columnLabelId.AllowDBNull = False
                Me.columnLabelId.Unique = True
                Me.columnText.MaxLength = 50
                Me.columnDescription.MaxLength = 50
                Me.columnColor.MaxLength = 50
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function NewLabelsRow() As LabelsRow
                Return (CType(Me.NewRow(), LabelsRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New LabelsRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(LabelsRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent LabelsRowChanged(Me, New LabelsRowChangeEvent((CType(e.Row, LabelsRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent LabelsRowChanging(Me, New LabelsRowChangeEvent((CType(e.Row, LabelsRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent LabelsRowDeleted(Me, New LabelsRowChangeEvent((CType(e.Row, LabelsRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent LabelsRowDeleting(Me, New LabelsRowChangeEvent((CType(e.Row, LabelsRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub RemoveLabelsRow(ByVal row As LabelsRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As New NwindDataSet()
                Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "LabelsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As New Global.System.IO.MemoryStream()
                    Dim s2 As New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
                        Do While schemas.MoveNext()
                            schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        Loop
                    Finally
                        If (s1 IsNot Nothing) Then
                            s1.Close()
                        End If
                        If (s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class ProductsDataTable
            Inherits TypedTableBase(Of ProductsRow)

            Private columnProductID As Global.System.Data.DataColumn

            Private columnProductName As Global.System.Data.DataColumn

            Private columnSupplierID As Global.System.Data.DataColumn

            Private columnCategoryID As Global.System.Data.DataColumn

            Private columnQuantityPerUnit As Global.System.Data.DataColumn

            Private columnUnitPrice As Global.System.Data.DataColumn

            Private columnUnitsInStock As Global.System.Data.DataColumn

            Private columnUnitsOnOrder As Global.System.Data.DataColumn

            Private columnReorderLevel As Global.System.Data.DataColumn

            Private columnDiscontinued As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New()
                Me.TableName = "Products"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property ProductIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnProductID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property ProductNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnProductName
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property SupplierIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSupplierID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property CategoryIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCategoryID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property QuantityPerUnitColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnQuantityPerUnit
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property UnitPriceColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUnitPrice
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property UnitsInStockColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUnitsInStock
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property UnitsOnOrderColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUnitsOnOrder
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property ReorderLevelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnReorderLevel
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property DiscontinuedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDiscontinued
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Default Public ReadOnly Property Item(ByVal index As Integer) As ProductsRow
                Get
                    Return (CType(Me.Rows(index), ProductsRow))
                End Get
            End Property

            Public Event ProductsRowChanging As ProductsRowChangeEventHandler

            Public Event ProductsRowChanged As ProductsRowChangeEventHandler

            Public Event ProductsRowDeleting As ProductsRowChangeEventHandler

            Public Event ProductsRowDeleted As ProductsRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub AddProductsRow(ByVal row As ProductsRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function AddProductsRow(ByVal ProductName As String, ByVal SupplierID As Integer, ByVal parentCategoriesRowByCategoriesProducts As CategoriesRow, ByVal QuantityPerUnit As String, ByVal UnitPrice As Decimal, ByVal UnitsInStock As Short, ByVal UnitsOnOrder As Short, ByVal ReorderLevel As Short, ByVal Discontinued As Boolean) As ProductsRow
                Dim rowProductsRow As ProductsRow = (CType(Me.NewRow(), ProductsRow))
                Dim columnValuesArray() As Object = {Nothing, ProductName, SupplierID, Nothing, QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued}
                If (parentCategoriesRowByCategoriesProducts IsNot Nothing) Then
                    columnValuesArray(3) = parentCategoriesRowByCategoriesProducts(0)
                End If
                rowProductsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowProductsRow)
                Return rowProductsRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function FindByProductID(ByVal ProductID As Integer) As ProductsRow
                Return (CType(Me.Rows.Find(New Object() {ProductID}), ProductsRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ProductsDataTable = (CType(MyBase.Clone(), ProductsDataTable))
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ProductsDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub InitVars()
                Me.columnProductID = MyBase.Columns("ProductID")
                Me.columnProductName = MyBase.Columns("ProductName")
                Me.columnSupplierID = MyBase.Columns("SupplierID")
                Me.columnCategoryID = MyBase.Columns("CategoryID")
                Me.columnQuantityPerUnit = MyBase.Columns("QuantityPerUnit")
                Me.columnUnitPrice = MyBase.Columns("UnitPrice")
                Me.columnUnitsInStock = MyBase.Columns("UnitsInStock")
                Me.columnUnitsOnOrder = MyBase.Columns("UnitsOnOrder")
                Me.columnReorderLevel = MyBase.Columns("ReorderLevel")
                Me.columnDiscontinued = MyBase.Columns("Discontinued")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Private Sub InitClass()
                Me.columnProductID = New Global.System.Data.DataColumn("ProductID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnProductID)
                Me.columnProductName = New Global.System.Data.DataColumn("ProductName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnProductName)
                Me.columnSupplierID = New Global.System.Data.DataColumn("SupplierID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSupplierID)
                Me.columnCategoryID = New Global.System.Data.DataColumn("CategoryID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCategoryID)
                Me.columnQuantityPerUnit = New Global.System.Data.DataColumn("QuantityPerUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnQuantityPerUnit)
                Me.columnUnitPrice = New Global.System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUnitPrice)
                Me.columnUnitsInStock = New Global.System.Data.DataColumn("UnitsInStock", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUnitsInStock)
                Me.columnUnitsOnOrder = New Global.System.Data.DataColumn("UnitsOnOrder", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUnitsOnOrder)
                Me.columnReorderLevel = New Global.System.Data.DataColumn("ReorderLevel", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnReorderLevel)
                Me.columnDiscontinued = New Global.System.Data.DataColumn("Discontinued", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDiscontinued)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProductID}, True))
                Me.columnProductID.AutoIncrement = True
                Me.columnProductID.AllowDBNull = False
                Me.columnProductID.Unique = True
                Me.columnProductName.MaxLength = 40
                Me.columnQuantityPerUnit.MaxLength = 20
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function NewProductsRow() As ProductsRow
                Return (CType(Me.NewRow(), ProductsRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ProductsRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ProductsRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent ProductsRowChanged(Me, New ProductsRowChangeEvent((CType(e.Row, ProductsRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent ProductsRowChanging(Me, New ProductsRowChangeEvent((CType(e.Row, ProductsRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent ProductsRowDeleted(Me, New ProductsRowChangeEvent((CType(e.Row, ProductsRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent ProductsRowDeleting(Me, New ProductsRowChangeEvent((CType(e.Row, ProductsRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub RemoveProductsRow(ByVal row As ProductsRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As New NwindDataSet()
                Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ProductsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As New Global.System.IO.MemoryStream()
                    Dim s2 As New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
                        Do While schemas.MoveNext()
                            schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        Loop
                    Finally
                        If (s1 IsNot Nothing) Then
                            s1.Close()
                        End If
                        If (s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class StatusesDataTable
            Inherits TypedTableBase(Of StatusesRow)

            Private columnStatusId As Global.System.Data.DataColumn

            Private columnText As Global.System.Data.DataColumn

            Private columnDescription As Global.System.Data.DataColumn

            Private columnColor As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New()
                Me.TableName = "Statuses"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property StatusIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStatusId
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property TextColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnText
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property ColorColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnColor
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Default Public ReadOnly Property Item(ByVal index As Integer) As StatusesRow
                Get
                    Return (CType(Me.Rows(index), StatusesRow))
                End Get
            End Property

            Public Event StatusesRowChanging As StatusesRowChangeEventHandler

            Public Event StatusesRowChanged As StatusesRowChangeEventHandler

            Public Event StatusesRowDeleting As StatusesRowChangeEventHandler

            Public Event StatusesRowDeleted As StatusesRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub AddStatusesRow(ByVal row As StatusesRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function AddStatusesRow(ByVal StatusId As Guid, ByVal Text As String, ByVal Description As String, ByVal Color As String) As StatusesRow
                Dim rowStatusesRow As StatusesRow = (CType(Me.NewRow(), StatusesRow))
                Dim columnValuesArray() As Object = {StatusId, Text, Description, Color}
                rowStatusesRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowStatusesRow)
                Return rowStatusesRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function FindByStatusId(ByVal StatusId As Guid) As StatusesRow
                Return (CType(Me.Rows.Find(New Object() {StatusId}), StatusesRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As StatusesDataTable = (CType(MyBase.Clone(), StatusesDataTable))
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New StatusesDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub InitVars()
                Me.columnStatusId = MyBase.Columns("StatusId")
                Me.columnText = MyBase.Columns("Text")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnColor = MyBase.Columns("Color")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Private Sub InitClass()
                Me.columnStatusId = New Global.System.Data.DataColumn("StatusId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStatusId)
                Me.columnText = New Global.System.Data.DataColumn("Text", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnText)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnColor = New Global.System.Data.DataColumn("Color", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnColor)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStatusId}, True))
                Me.columnStatusId.AllowDBNull = False
                Me.columnStatusId.Unique = True
                Me.columnText.MaxLength = 50
                Me.columnDescription.MaxLength = 50
                Me.columnColor.MaxLength = 50
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function NewStatusesRow() As StatusesRow
                Return (CType(Me.NewRow(), StatusesRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New StatusesRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(StatusesRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent StatusesRowChanged(Me, New StatusesRowChangeEvent((CType(e.Row, StatusesRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent StatusesRowChanging(Me, New StatusesRowChangeEvent((CType(e.Row, StatusesRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent StatusesRowDeleted(Me, New StatusesRowChangeEvent((CType(e.Row, StatusesRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent StatusesRowDeleting(Me, New StatusesRowChangeEvent((CType(e.Row, StatusesRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub RemoveStatusesRow(ByVal row As StatusesRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As New NwindDataSet()
                Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "StatusesDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As New Global.System.IO.MemoryStream()
                    Dim s2 As New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
                        Do While schemas.MoveNext()
                            schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        Loop
                    Finally
                        If (s1 IsNot Nothing) Then
                            s1.Close()
                        End If
                        If (s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class CustomersDataTable
            Inherits TypedTableBase(Of CustomersRow)

            Private columnCustomerId As Global.System.Data.DataColumn

            Private columnCompanyName As Global.System.Data.DataColumn

            Private columnContactName As Global.System.Data.DataColumn

            Private columnContactTitle As Global.System.Data.DataColumn

            Private columnAddress As Global.System.Data.DataColumn

            Private columnCity As Global.System.Data.DataColumn

            Private columnRegion As Global.System.Data.DataColumn

            Private columnPostalCode As Global.System.Data.DataColumn

            Private columnCountry As Global.System.Data.DataColumn

            Private columnPhone As Global.System.Data.DataColumn

            Private columnFax As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New()
                Me.TableName = "Customers"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property CustomerIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCustomerId
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property CompanyNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompanyName
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property ContactNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnContactName
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property ContactTitleColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnContactTitle
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAddress
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCity
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRegion
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property PostalCodeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPostalCode
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCountry
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPhone
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFax
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Default Public ReadOnly Property Item(ByVal index As Integer) As CustomersRow
                Get
                    Return (CType(Me.Rows(index), CustomersRow))
                End Get
            End Property

            Public Event CustomersRowChanging As CustomersRowChangeEventHandler

            Public Event CustomersRowChanged As CustomersRowChangeEventHandler

            Public Event CustomersRowDeleting As CustomersRowChangeEventHandler

            Public Event CustomersRowDeleted As CustomersRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub AddCustomersRow(ByVal row As CustomersRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function AddCustomersRow(ByVal CustomerId As Guid, ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal Phone As String, ByVal Fax As String) As CustomersRow
                Dim rowCustomersRow As CustomersRow = (CType(Me.NewRow(), CustomersRow))
                Dim columnValuesArray() As Object = {CustomerId, CompanyName, ContactName, ContactTitle, Address, City, Region, PostalCode, Country, Phone, Fax}
                rowCustomersRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCustomersRow)
                Return rowCustomersRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function FindByCustomerId(ByVal CustomerId As Guid) As CustomersRow
                Return (CType(Me.Rows.Find(New Object() {CustomerId}), CustomersRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CustomersDataTable = (CType(MyBase.Clone(), CustomersDataTable))
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CustomersDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub InitVars()
                Me.columnCustomerId = MyBase.Columns("CustomerId")
                Me.columnCompanyName = MyBase.Columns("CompanyName")
                Me.columnContactName = MyBase.Columns("ContactName")
                Me.columnContactTitle = MyBase.Columns("ContactTitle")
                Me.columnAddress = MyBase.Columns("Address")
                Me.columnCity = MyBase.Columns("City")
                Me.columnRegion = MyBase.Columns("Region")
                Me.columnPostalCode = MyBase.Columns("PostalCode")
                Me.columnCountry = MyBase.Columns("Country")
                Me.columnPhone = MyBase.Columns("Phone")
                Me.columnFax = MyBase.Columns("Fax")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Private Sub InitClass()
                Me.columnCustomerId = New Global.System.Data.DataColumn("CustomerId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCustomerId)
                Me.columnCompanyName = New Global.System.Data.DataColumn("CompanyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompanyName)
                Me.columnContactName = New Global.System.Data.DataColumn("ContactName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnContactName)
                Me.columnContactTitle = New Global.System.Data.DataColumn("ContactTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnContactTitle)
                Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAddress)
                Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCity)
                Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRegion)
                Me.columnPostalCode = New Global.System.Data.DataColumn("PostalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPostalCode)
                Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCountry)
                Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPhone)
                Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFax)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCustomerId}, True))
                Me.columnCustomerId.AllowDBNull = False
                Me.columnCustomerId.Unique = True
                Me.columnCompanyName.MaxLength = 40
                Me.columnContactName.MaxLength = 30
                Me.columnContactTitle.MaxLength = 30
                Me.columnAddress.MaxLength = 60
                Me.columnCity.MaxLength = 15
                Me.columnRegion.MaxLength = 15
                Me.columnPostalCode.MaxLength = 10
                Me.columnCountry.MaxLength = 15
                Me.columnPhone.MaxLength = 24
                Me.columnFax.MaxLength = 24
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function NewCustomersRow() As CustomersRow
                Return (CType(Me.NewRow(), CustomersRow))
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CustomersRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CustomersRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent CustomersRowChanged(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent CustomersRowChanging(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent CustomersRowDeleted(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent CustomersRowDeleting(Me, New CustomersRowChangeEvent((CType(e.Row, CustomersRow)), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub RemoveCustomersRow(ByVal row As CustomersRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As New NwindDataSet()
                Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CustomersDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As New Global.System.IO.MemoryStream()
                    Dim s2 As New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
                        Do While schemas.MoveNext()
                            schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        Loop
                    Finally
                        If (s1 IsNot Nothing) Then
                            s1.Close()
                        End If
                        If (s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Partial Public Class AppointmentsRow
            Inherits DataRow

            Private tableAppointments As AppointmentsDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableAppointments = (CType(Me.Table, AppointmentsDataTable))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property AppointmentId() As Guid
                Get
                    Return (CType(Me(Me.tableAppointments.AppointmentIdColumn), Global.System.Guid))
                End Get
                Set(ByVal value As Guid)
                    Me(Me.tableAppointments.AppointmentIdColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Description() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableAppointments.DescriptionColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Appointments' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableAppointments.DescriptionColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property [End]() As Date
                Get
                    Try
                        Return (CDate(Me(Me.tableAppointments.EndColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'End' in table 'Appointments' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Date)
                    Me(Me.tableAppointments.EndColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Location() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableAppointments.LocationColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Location' in table 'Appointments' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableAppointments.LocationColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Start() As Date
                Get
                    Try
                        Return (CDate(Me(Me.tableAppointments.StartColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Start' in table 'Appointments' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Date)
                    Me(Me.tableAppointments.StartColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Subject() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableAppointments.SubjectColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Subject' in table 'Appointments' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableAppointments.SubjectColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Properties() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableAppointments.PropertiesColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Properties' in table 'Appointments' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableAppointments.PropertiesColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Owner() As Integer
                Get
                    Try
                        Return (CInt(Fix(Me(Me.tableAppointments.OwnerColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Owner' in table 'Appointments' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Integer)
                    Me(Me.tableAppointments.OwnerColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableAppointments.DescriptionColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetDescriptionNull()
                Me(Me.tableAppointments.DescriptionColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsEndNull() As Boolean
                Return Me.IsNull(Me.tableAppointments.EndColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetEndNull()
                Me(Me.tableAppointments.EndColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsLocationNull() As Boolean
                Return Me.IsNull(Me.tableAppointments.LocationColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetLocationNull()
                Me(Me.tableAppointments.LocationColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsStartNull() As Boolean
                Return Me.IsNull(Me.tableAppointments.StartColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetStartNull()
                Me(Me.tableAppointments.StartColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsSubjectNull() As Boolean
                Return Me.IsNull(Me.tableAppointments.SubjectColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetSubjectNull()
                Me(Me.tableAppointments.SubjectColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsPropertiesNull() As Boolean
                Return Me.IsNull(Me.tableAppointments.PropertiesColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetPropertiesNull()
                Me(Me.tableAppointments.PropertiesColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsOwnerNull() As Boolean
                Return Me.IsNull(Me.tableAppointments.OwnerColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetOwnerNull()
                Me(Me.tableAppointments.OwnerColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Partial Public Class CategoriesRow
            Inherits DataRow

            Private tableCategories As CategoriesDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableCategories = (CType(Me.Table, CategoriesDataTable))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property CategoryID() As Integer
                Get
                    Return (CInt(Fix(Me(Me.tableCategories.CategoryIDColumn))))
                End Get
                Set(ByVal value As Integer)
                    Me(Me.tableCategories.CategoryIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property CategoryName() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableCategories.CategoryNameColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CategoryName' in table 'Categories' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableCategories.CategoryNameColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Description() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableCategories.DescriptionColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Categories' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableCategories.DescriptionColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Picture() As Byte()
                Get
                    Try
                        Return (CType(Me(Me.tableCategories.PictureColumn), Byte()))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Picture' in table 'Categories' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Byte())
                    Me(Me.tableCategories.PictureColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsCategoryNameNull() As Boolean
                Return Me.IsNull(Me.tableCategories.CategoryNameColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetCategoryNameNull()
                Me(Me.tableCategories.CategoryNameColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableCategories.DescriptionColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetDescriptionNull()
                Me(Me.tableCategories.DescriptionColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsPictureNull() As Boolean
                Return Me.IsNull(Me.tableCategories.PictureColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetPictureNull()
                Me(Me.tableCategories.PictureColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function GetProductsRows() As ProductsRow()
                If (Me.Table.ChildRelations("CategoriesProducts") Is Nothing) Then
                    Return New ProductsRow() {}
                Else
                    Return (CType(MyBase.GetChildRows(Me.Table.ChildRelations("CategoriesProducts")), ProductsRow()))
                End If
            End Function
        End Class

        ''' <summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Partial Public Class EmployeesRow
            Inherits DataRow

            Private tableEmployees As EmployeesDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableEmployees = (CType(Me.Table, EmployeesDataTable))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property EmployeeID() As Integer
                Get
                    Return (CInt(Fix(Me(Me.tableEmployees.EmployeeIDColumn))))
                End Get
                Set(ByVal value As Integer)
                    Me(Me.tableEmployees.EmployeeIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property LastName() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableEmployees.LastNameColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableEmployees.LastNameColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property FirstName() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableEmployees.FirstNameColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableEmployees.FirstNameColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Title() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableEmployees.TitleColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableEmployees.TitleColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property TitleOfCourtesy() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableEmployees.TitleOfCourtesyColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TitleOfCourtesy' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableEmployees.TitleOfCourtesyColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property BirthDate() As Date
                Get
                    Try
                        Return (CDate(Me(Me.tableEmployees.BirthDateColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDate' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Date)
                    Me(Me.tableEmployees.BirthDateColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property HireDate() As Date
                Get
                    Try
                        Return (CDate(Me(Me.tableEmployees.HireDateColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'HireDate' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Date)
                    Me(Me.tableEmployees.HireDateColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Address() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableEmployees.AddressColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableEmployees.AddressColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property City() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableEmployees.CityColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableEmployees.CityColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Region() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableEmployees.RegionColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableEmployees.RegionColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property PostalCode() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableEmployees.PostalCodeColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'PostalCode' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableEmployees.PostalCodeColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Country() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableEmployees.CountryColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableEmployees.CountryColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property HomePhone() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableEmployees.HomePhoneColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableEmployees.HomePhoneColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Extension() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableEmployees.ExtensionColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Extension' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableEmployees.ExtensionColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Notes() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableEmployees.NotesColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableEmployees.NotesColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property ReportsTo() As Integer
                Get
                    Try
                        Return (CInt(Fix(Me(Me.tableEmployees.ReportsToColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ReportsTo' in table 'Employees' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Integer)
                    Me(Me.tableEmployees.ReportsToColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsLastNameNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.LastNameColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetLastNameNull()
                Me(Me.tableEmployees.LastNameColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsFirstNameNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.FirstNameColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetFirstNameNull()
                Me(Me.tableEmployees.FirstNameColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsTitleNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.TitleColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetTitleNull()
                Me(Me.tableEmployees.TitleColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsTitleOfCourtesyNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.TitleOfCourtesyColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetTitleOfCourtesyNull()
                Me(Me.tableEmployees.TitleOfCourtesyColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsBirthDateNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.BirthDateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetBirthDateNull()
                Me(Me.tableEmployees.BirthDateColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsHireDateNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.HireDateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetHireDateNull()
                Me(Me.tableEmployees.HireDateColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsAddressNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.AddressColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetAddressNull()
                Me(Me.tableEmployees.AddressColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsCityNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.CityColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetCityNull()
                Me(Me.tableEmployees.CityColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsRegionNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.RegionColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetRegionNull()
                Me(Me.tableEmployees.RegionColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsPostalCodeNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.PostalCodeColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetPostalCodeNull()
                Me(Me.tableEmployees.PostalCodeColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsCountryNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.CountryColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetCountryNull()
                Me(Me.tableEmployees.CountryColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsHomePhoneNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.HomePhoneColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetHomePhoneNull()
                Me(Me.tableEmployees.HomePhoneColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsExtensionNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.ExtensionColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetExtensionNull()
                Me(Me.tableEmployees.ExtensionColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsNotesNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.NotesColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetNotesNull()
                Me(Me.tableEmployees.NotesColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsReportsToNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.ReportsToColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetReportsToNull()
                Me(Me.tableEmployees.ReportsToColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Partial Public Class LabelsRow
            Inherits DataRow

            Private tableLabels As LabelsDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableLabels = (CType(Me.Table, LabelsDataTable))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property LabelId() As Guid
                Get
                    Return (CType(Me(Me.tableLabels.LabelIdColumn), Global.System.Guid))
                End Get
                Set(ByVal value As Guid)
                    Me(Me.tableLabels.LabelIdColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Text() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableLabels.TextColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Text' in table 'Labels' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableLabels.TextColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Description() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableLabels.DescriptionColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Labels' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableLabels.DescriptionColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Color() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableLabels.ColorColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Color' in table 'Labels' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableLabels.ColorColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsTextNull() As Boolean
                Return Me.IsNull(Me.tableLabels.TextColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetTextNull()
                Me(Me.tableLabels.TextColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableLabels.DescriptionColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetDescriptionNull()
                Me(Me.tableLabels.DescriptionColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsColorNull() As Boolean
                Return Me.IsNull(Me.tableLabels.ColorColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetColorNull()
                Me(Me.tableLabels.ColorColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Partial Public Class ProductsRow
            Inherits DataRow

            Private tableProducts As ProductsDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableProducts = (CType(Me.Table, ProductsDataTable))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property ProductID() As Integer
                Get
                    Return (CInt(Fix(Me(Me.tableProducts.ProductIDColumn))))
                End Get
                Set(ByVal value As Integer)
                    Me(Me.tableProducts.ProductIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property ProductName() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableProducts.ProductNameColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ProductName' in table 'Products' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableProducts.ProductNameColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property SupplierID() As Integer
                Get
                    Try
                        Return (CInt(Fix(Me(Me.tableProducts.SupplierIDColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SupplierID' in table 'Products' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Integer)
                    Me(Me.tableProducts.SupplierIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property CategoryID() As Integer
                Get
                    Try
                        Return (CInt(Fix(Me(Me.tableProducts.CategoryIDColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CategoryID' in table 'Products' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Integer)
                    Me(Me.tableProducts.CategoryIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property QuantityPerUnit() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableProducts.QuantityPerUnitColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'QuantityPerUnit' in table 'Products' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableProducts.QuantityPerUnitColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property UnitPrice() As Decimal
                Get
                    Try
                        Return (CDec(Me(Me.tableProducts.UnitPriceColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'Products' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Decimal)
                    Me(Me.tableProducts.UnitPriceColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property UnitsInStock() As Short
                Get
                    Try
                        Return (CShort(Fix(Me(Me.tableProducts.UnitsInStockColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'UnitsInStock' in table 'Products' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Short)
                    Me(Me.tableProducts.UnitsInStockColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property UnitsOnOrder() As Short
                Get
                    Try
                        Return (CShort(Fix(Me(Me.tableProducts.UnitsOnOrderColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'UnitsOnOrder' in table 'Products' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Short)
                    Me(Me.tableProducts.UnitsOnOrderColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property ReorderLevel() As Short
                Get
                    Try
                        Return (CShort(Fix(Me(Me.tableProducts.ReorderLevelColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ReorderLevel' in table 'Products' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Short)
                    Me(Me.tableProducts.ReorderLevelColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Discontinued() As Boolean
                Get
                    Try
                        Return (CBool(Me(Me.tableProducts.DiscontinuedColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Discontinued' in table 'Products' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Boolean)
                    Me(Me.tableProducts.DiscontinuedColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property CategoriesRow() As CategoriesRow
                Get
                    Return (CType(Me.GetParentRow(Me.Table.ParentRelations("CategoriesProducts")), CategoriesRow))
                End Get
                Set(ByVal value As CategoriesRow)
                    Me.SetParentRow(value, Me.Table.ParentRelations("CategoriesProducts"))
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsProductNameNull() As Boolean
                Return Me.IsNull(Me.tableProducts.ProductNameColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetProductNameNull()
                Me(Me.tableProducts.ProductNameColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsSupplierIDNull() As Boolean
                Return Me.IsNull(Me.tableProducts.SupplierIDColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetSupplierIDNull()
                Me(Me.tableProducts.SupplierIDColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsCategoryIDNull() As Boolean
                Return Me.IsNull(Me.tableProducts.CategoryIDColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetCategoryIDNull()
                Me(Me.tableProducts.CategoryIDColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsQuantityPerUnitNull() As Boolean
                Return Me.IsNull(Me.tableProducts.QuantityPerUnitColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetQuantityPerUnitNull()
                Me(Me.tableProducts.QuantityPerUnitColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsUnitPriceNull() As Boolean
                Return Me.IsNull(Me.tableProducts.UnitPriceColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetUnitPriceNull()
                Me(Me.tableProducts.UnitPriceColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsUnitsInStockNull() As Boolean
                Return Me.IsNull(Me.tableProducts.UnitsInStockColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetUnitsInStockNull()
                Me(Me.tableProducts.UnitsInStockColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsUnitsOnOrderNull() As Boolean
                Return Me.IsNull(Me.tableProducts.UnitsOnOrderColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetUnitsOnOrderNull()
                Me(Me.tableProducts.UnitsOnOrderColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsReorderLevelNull() As Boolean
                Return Me.IsNull(Me.tableProducts.ReorderLevelColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetReorderLevelNull()
                Me(Me.tableProducts.ReorderLevelColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsDiscontinuedNull() As Boolean
                Return Me.IsNull(Me.tableProducts.DiscontinuedColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetDiscontinuedNull()
                Me(Me.tableProducts.DiscontinuedColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
        Partial Public Class StatusesRow
            Inherits DataRow

            Private tableStatuses As StatusesDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableStatuses = (CType(Me.Table, StatusesDataTable))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property StatusId() As Guid
                Get
                    Return (CType(Me(Me.tableStatuses.StatusIdColumn), Global.System.Guid))
                End Get
                Set(ByVal value As Guid)
                    Me(Me.tableStatuses.StatusIdColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Text() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableStatuses.TextColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Text' in table 'Statuses' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableStatuses.TextColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Description() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableStatuses.DescriptionColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Statuses' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableStatuses.DescriptionColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Color() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableStatuses.ColorColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Color' in table 'Statuses' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableStatuses.ColorColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsTextNull() As Boolean
                Return Me.IsNull(Me.tableStatuses.TextColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetTextNull()
                Me(Me.tableStatuses.TextColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableStatuses.DescriptionColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetDescriptionNull()
                Me(Me.tableStatuses.DescriptionColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsColorNull() As Boolean
                Return Me.IsNull(Me.tableStatuses.ColorColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetColorNull()
                Me(Me.tableStatuses.ColorColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Partial Public Class CustomersRow
            Inherits DataRow

            Private tableCustomers As CustomersDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableCustomers = (CType(Me.Table, CustomersDataTable))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property CustomerId() As Guid
                Get
                    Return (CType(Me(Me.tableCustomers.CustomerIdColumn), Global.System.Guid))
                End Get
                Set(ByVal value As Guid)
                    Me(Me.tableCustomers.CustomerIdColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property CompanyName() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableCustomers.CompanyNameColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyName' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableCustomers.CompanyNameColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property ContactName() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableCustomers.ContactNameColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ContactName' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableCustomers.ContactNameColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property ContactTitle() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableCustomers.ContactTitleColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ContactTitle' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableCustomers.ContactTitleColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Address() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableCustomers.AddressColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableCustomers.AddressColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property City() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableCustomers.CityColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableCustomers.CityColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Region() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableCustomers.RegionColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableCustomers.RegionColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property PostalCode() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableCustomers.PostalCodeColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'PostalCode' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableCustomers.PostalCodeColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Country() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableCustomers.CountryColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableCustomers.CountryColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Phone() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableCustomers.PhoneColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Phone' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableCustomers.PhoneColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Fax() As String
                Get
                    Try
                        Return (CStr(Me(Me.tableCustomers.FaxColumn)))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'Customers' is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableCustomers.FaxColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsCompanyNameNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.CompanyNameColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetCompanyNameNull()
                Me(Me.tableCustomers.CompanyNameColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsContactNameNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.ContactNameColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetContactNameNull()
                Me(Me.tableCustomers.ContactNameColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsContactTitleNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.ContactTitleColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetContactTitleNull()
                Me(Me.tableCustomers.ContactTitleColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsAddressNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.AddressColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetAddressNull()
                Me(Me.tableCustomers.AddressColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsCityNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.CityColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetCityNull()
                Me(Me.tableCustomers.CityColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsRegionNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.RegionColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetRegionNull()
                Me(Me.tableCustomers.RegionColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsPostalCodeNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.PostalCodeColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetPostalCodeNull()
                Me(Me.tableCustomers.PostalCodeColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsCountryNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.CountryColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetCountryNull()
                Me(Me.tableCustomers.CountryColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsPhoneNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.PhoneColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetPhoneNull()
                Me(Me.tableCustomers.PhoneColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsFaxNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.FaxColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetFaxNull()
                Me(Me.tableCustomers.FaxColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class AppointmentsRowChangeEvent
            Inherits EventArgs

            Private eventRow As AppointmentsRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New(ByVal row As AppointmentsRow, ByVal action As Global.System.Data.DataRowAction)
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Row() As AppointmentsRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class

        ''' <summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class CategoriesRowChangeEvent
            Inherits EventArgs

            Private eventRow As CategoriesRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New(ByVal row As CategoriesRow, ByVal action As Global.System.Data.DataRowAction)
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Row() As CategoriesRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class

        ''' <summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class EmployeesRowChangeEvent
            Inherits EventArgs

            Private eventRow As EmployeesRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New(ByVal row As EmployeesRow, ByVal action As Global.System.Data.DataRowAction)
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Row() As EmployeesRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class

        ''' <summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class LabelsRowChangeEvent
            Inherits EventArgs

            Private eventRow As LabelsRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New(ByVal row As LabelsRow, ByVal action As Global.System.Data.DataRowAction)
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Row() As LabelsRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class

        ''' <summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class ProductsRowChangeEvent
            Inherits EventArgs

            Private eventRow As ProductsRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New(ByVal row As ProductsRow, ByVal action As Global.System.Data.DataRowAction)
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Row() As ProductsRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class

        ''' <summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class StatusesRowChangeEvent
            Inherits EventArgs

            Private eventRow As StatusesRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New(ByVal row As StatusesRow, ByVal action As Global.System.Data.DataRowAction)
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Row() As StatusesRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class

        ''' <summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
  Public Class CustomersRowChangeEvent
            Inherits EventArgs

            Private eventRow As CustomersRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New(ByVal row As CustomersRow, ByVal action As Global.System.Data.DataRowAction)
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Row() As CustomersRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
Namespace MultiUser.NwindDataSetTableAdapters


	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
 Partial Public Class AppointmentsTableAdapter
        Inherits System.ComponentModel.Component

        Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

        Private _connection As Global.System.Data.OleDb.OleDbConnection

        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.OleDb.OleDbConnection)
                Me._connection = value
                If (Me.Adapter.InsertCommand IsNot Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Me.Adapter.DeleteCommand IsNot Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Me.Adapter.UpdateCommand IsNot Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Me.CommandCollection(i) IsNot Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Appointments"
            tableMapping.ColumnMappings.Add("AppointmentId", "AppointmentId")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("End", "End")
            tableMapping.ColumnMappings.Add("Location", "Location")
            tableMapping.ColumnMappings.Add("Start", "Start")
            tableMapping.ColumnMappings.Add("Subject", "Subject")
            tableMapping.ColumnMappings.Add("Properties", "Properties")
            tableMapping.ColumnMappings.Add("Owner", "Owner")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Appointments` WHERE ((`AppointmentId` = ?) AND ((? = 1 AND `End` IS NULL) OR (`End` = ?)) AND ((? = 1 AND `Location` IS NULL) OR (`Location` = ?)) AND ((? = 1 AND `Start` IS NULL) OR (`Start` = ?)) AND ((? = 1 AND `Subject` IS NULL) OR (`Subject` = ?)) AND ((? = 1 AND `Owner` IS NULL) OR (`Owner` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AppointmentId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AppointmentId", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_End", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "End", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_End", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "End", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Location", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Location", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Start", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Start", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Start", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Start", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Subject", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Subject", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Owner", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Owner", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Owner", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Owner", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Appointments` (`AppointmentId`, `Description`, `End`, `Location`, `S" & "tart`, `Subject`, `Properties`, `Owner`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AppointmentId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AppointmentId", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("End", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "End", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Location", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Start", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Start", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Subject", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Properties", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Properties", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Owner", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Owner", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Appointments` SET `AppointmentId` = ?, `Description` = ?, `End` = ?, `Location` = ?, `Start` = ?, `Subject` = ?, `Properties` = ?, `Owner` = ? WHERE ((`AppointmentId` = ?) AND ((? = 1 AND `End` IS NULL) OR (`End` = ?)) AND ((? = 1 AND `Location` IS NULL) OR (`Location` = ?)) AND ((? = 1 AND `Start` IS NULL) OR (`Start` = ?)) AND ((? = 1 AND `Subject` IS NULL) OR (`Subject` = ?)) AND ((? = 1 AND `Owner` IS NULL) OR (`Owner` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AppointmentId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AppointmentId", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("End", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "End", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Location", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Start", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Start", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Subject", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Properties", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Properties", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Owner", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Owner", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AppointmentId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AppointmentId", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_End", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "End", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_End", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "End", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Location", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Location", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Start", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Start", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Start", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Start", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Subject", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Subject", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Owner", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Owner", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Owner", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Owner", Global.System.Data.DataRowVersion.Original, False, Nothing))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT AppointmentId, Description, [End], Location, Start, Subject, Properties, O" & "wner FROM Appointments"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Function Fill(ByVal dataTable As NwindDataSet.AppointmentsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
        Public Overridable Function GetData() As NwindDataSet.AppointmentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As New NwindDataSet.AppointmentsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataTable As NwindDataSet.AppointmentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataSet As NwindDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Appointments")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Function Delete(ByVal Original_AppointmentId As Guid, ByVal Original_End As Date, ByVal Original_Location As String, ByVal Original_Start? As Global.System.DateTime, ByVal Original_Subject As String, ByVal Original_Owner? As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = (CType(Original_AppointmentId, Guid))
            Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
            Me.Adapter.DeleteCommand.Parameters(2).Value = (CDate(Original_End))
            If (Original_Location Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_Location))
            End If
            If (Original_Start.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(6).Value = (CDate(Original_Start.Value))
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Subject Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(8).Value = (CStr(Original_Subject))
            End If
            If (Original_Owner.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(10).Value = (CInt(Fix(Original_Owner.Value)))
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Function Insert(ByVal AppointmentId As Guid, ByVal Description As String, ByVal [End] As Date, ByVal Location As String, ByVal Start? As Global.System.DateTime, ByVal Subject As String, ByVal Properties As String, ByVal Owner? As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = (CType(AppointmentId, Guid))
            If (Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Description")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(Description))
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = (CDate([End]))
            If (Location Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(Location))
            End If
            If (Start.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = (CDate(Start.Value))
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Subject Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = (CStr(Subject))
            End If
            If (Properties Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = (CStr(Properties))
            End If
            If (Owner.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = (CInt(Fix(Owner.Value)))
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Function Update(ByVal AppointmentId As Guid, ByVal Description As String, ByVal [End] As Date, ByVal Location As String, ByVal Start? As Global.System.DateTime, ByVal Subject As String, ByVal Properties As String, ByVal Owner? As Integer, ByVal Original_AppointmentId As Guid, ByVal Original_End As Date, ByVal Original_Location As String, ByVal Original_Start? As Global.System.DateTime, ByVal Original_Subject As String, ByVal Original_Owner? As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = (CType(AppointmentId, Guid))
            If (Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Description")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(Description))
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = (CDate([End]))
            If (Location Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(Location))
            End If
            If (Start.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = (CDate(Start.Value))
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Subject Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = (CStr(Subject))
            End If
            If (Properties Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(Properties))
            End If
            If (Owner.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = (CInt(Fix(Owner.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = (CType(Original_AppointmentId, Guid))
            Me.Adapter.UpdateCommand.Parameters(9).Value = (CObj(0))
            Me.Adapter.UpdateCommand.Parameters(10).Value = (CDate(Original_End))
            If (Original_Location Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(12).Value = (CStr(Original_Location))
            End If
            If (Original_Start.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(14).Value = (CDate(Original_Start.Value))
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Subject Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(16).Value = (CStr(Original_Subject))
            End If
            If (Original_Owner.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(18).Value = (CInt(Fix(Original_Owner.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Function Update(ByVal Description As String, ByVal [End] As Date, ByVal Location As String, ByVal Start? As Global.System.DateTime, ByVal Subject As String, ByVal Properties As String, ByVal Owner? As Integer, ByVal Original_AppointmentId As Guid, ByVal Original_End As Date, ByVal Original_Location As String, ByVal Original_Start? As Global.System.DateTime, ByVal Original_Subject As String, ByVal Original_Owner? As Integer) As Integer
            Return Me.Update(Original_AppointmentId, Description, [End], Location, Start, Subject, Properties, Owner, Original_AppointmentId, Original_End, Original_Location, Original_Start, Original_Subject, Original_Owner)
        End Function
    End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
 Partial Public Class CategoriesTableAdapter
        Inherits System.ComponentModel.Component

        Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

        Private _connection As Global.System.Data.OleDb.OleDbConnection

        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.OleDb.OleDbConnection)
                Me._connection = value
                If (Me.Adapter.InsertCommand IsNot Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Me.Adapter.DeleteCommand IsNot Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Me.Adapter.UpdateCommand IsNot Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Me.CommandCollection(i) IsNot Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Categories"
            tableMapping.ColumnMappings.Add("CategoryID", "CategoryID")
            tableMapping.ColumnMappings.Add("CategoryName", "CategoryName")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Picture", "Picture")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Categories` WHERE ((`CategoryID` = ?) AND ((? = 1 AND `CategoryName`" & " IS NULL) OR (`CategoryName` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CategoryID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CategoryName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryName", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CategoryName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryName", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Categories` (`CategoryName`, `Description`, `Picture`) VALUES (?, ?," & " ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CategoryName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryName", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Picture", Global.System.Data.OleDb.OleDbType.LongVarBinary, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Picture", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Categories` SET `CategoryName` = ?, `Description` = ?, `Picture` = ? WHER" & "E ((`CategoryID` = ?) AND ((? = 1 AND `CategoryName` IS NULL) OR (`CategoryName`" & " = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CategoryName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryName", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Picture", Global.System.Data.OleDb.OleDbType.LongVarBinary, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Picture", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CategoryID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CategoryName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryName", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CategoryName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryName", Global.System.Data.DataRowVersion.Original, False, Nothing))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CategoryID, CategoryName, Description, Picture FROM Categories"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Function Fill(ByVal dataTable As NwindDataSet.CategoriesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
        Public Overridable Function GetData() As NwindDataSet.CategoriesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As New NwindDataSet.CategoriesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataTable As NwindDataSet.CategoriesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataSet As NwindDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Categories")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Function Delete(ByVal Original_CategoryID As Integer, ByVal Original_CategoryName As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Original_CategoryID))
            If (Original_CategoryName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CategoryName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_CategoryName))
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Function Insert(ByVal CategoryName As String, ByVal Description As String, ByVal Picture() As Byte) As Integer
            If (CategoryName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CategoryName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(CategoryName))
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(Description))
            End If
            If (Picture Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = (CType(Picture, Byte()))
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Function Update(ByVal CategoryName As String, ByVal Description As String, ByVal Picture() As Byte, ByVal Original_CategoryID As Integer, ByVal Original_CategoryName As String) As Integer
            If (CategoryName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CategoryName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(CategoryName))
            End If
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(Description))
            End If
            If (Picture Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = (CType(Picture, Byte()))
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = (CInt(Original_CategoryID))
            If (Original_CategoryName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CategoryName")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(5).Value = (CStr(Original_CategoryName))
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
 Partial Public Class EmployeesTableAdapter
        Inherits System.ComponentModel.Component

        Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

        Private _connection As Global.System.Data.OleDb.OleDbConnection

        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.OleDb.OleDbConnection)
                Me._connection = value
                If (Me.Adapter.InsertCommand IsNot Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Me.Adapter.DeleteCommand IsNot Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Me.Adapter.UpdateCommand IsNot Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Me.CommandCollection(i) IsNot Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Employees"
            tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("Title", "Title")
            tableMapping.ColumnMappings.Add("TitleOfCourtesy", "TitleOfCourtesy")
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate")
            tableMapping.ColumnMappings.Add("HireDate", "HireDate")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("Region", "Region")
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode")
            tableMapping.ColumnMappings.Add("Country", "Country")
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
            tableMapping.ColumnMappings.Add("Extension", "Extension")
            tableMapping.ColumnMappings.Add("Notes", "Notes")
            tableMapping.ColumnMappings.Add("ReportsTo", "ReportsTo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Employees` WHERE ((`EmployeeID` = ?) AND ((? = 1 AND `LastName` IS NULL) OR (`LastName` = ?)) AND ((? = 1 AND `FirstName` IS NULL) OR (`FirstName` = ?)) AND ((? = 1 AND `Title` IS NULL) OR (`Title` = ?)) AND ((? = 1 AND `TitleOfCourtesy` IS NULL) OR (`TitleOfCourtesy` = ?)) AND ((? = 1 AND `BirthDate` IS NULL) OR (`BirthDate` = ?)) AND ((? = 1 AND `HireDate` IS NULL) OR (`HireDate` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `HomePhone` IS NULL) OR (`HomePhone` = ?)) AND ((? = 1 AND `Extension` IS NULL) OR (`Extension` = ?)) AND ((? = 1 AND `ReportsTo` IS NULL) OR (`ReportsTo` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EmployeeID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EmployeeID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LastName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FirstName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Title", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BirthDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BirthDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HireDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HireDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Address", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Region", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PostalCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Country", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HomePhone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Extension", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Extension", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Employees` (`LastName`, `FirstName`, `Title`, `TitleOfCourtesy`, `BirthDate`, `HireDate`, `Address`, `City`, `Region`, `PostalCode`, `Country`, `HomePhone`, `Extension`, `Notes`, `ReportsTo`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BirthDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HireDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Extension", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Notes", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Notes", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Employees` SET `LastName` = ?, `FirstName` = ?, `Title` = ?, `TitleOfCourtesy` = ?, `BirthDate` = ?, `HireDate` = ?, `Address` = ?, `City` = ?, `Region` = ?, `PostalCode` = ?, `Country` = ?, `HomePhone` = ?, `Extension` = ?, `Notes` = ?, `ReportsTo` = ? WHERE ((`EmployeeID` = ?) AND ((? = 1 AND `LastName` IS NULL) OR (`LastName` = ?)) AND ((? = 1 AND `FirstName` IS NULL) OR (`FirstName` = ?)) AND ((? = 1 AND `Title` IS NULL) OR (`Title` = ?)) AND ((? = 1 AND `TitleOfCourtesy` IS NULL) OR (`TitleOfCourtesy` = ?)) AND ((? = 1 AND `BirthDate` IS NULL) OR (`BirthDate` = ?)) AND ((? = 1 AND `HireDate` IS NULL) OR (`HireDate` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `HomePhone` IS NULL) OR (`HomePhone` = ?)) AND ((? = 1 AND `Extension` IS NULL) OR (`Extension` = ?)) AND ((? = 1 AND `ReportsTo` IS NULL) OR (`ReportsTo` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BirthDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HireDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Extension", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Notes", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Notes", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EmployeeID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EmployeeID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LastName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FirstName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Title", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BirthDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BirthDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HireDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HireDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Address", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Region", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PostalCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Country", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HomePhone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Extension", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Extension", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Original, False, Nothing))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT EmployeeID, LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDa" & "te, Address, City, Region, PostalCode, Country, HomePhone, Extension, Notes, Rep" & "ortsTo FROM Employees"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Function Fill(ByVal dataTable As NwindDataSet.EmployeesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
        Public Overridable Function GetData() As NwindDataSet.EmployeesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As New NwindDataSet.EmployeesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataTable As NwindDataSet.EmployeesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataSet As NwindDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Employees")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Function Delete(ByVal Original_EmployeeID As Integer, ByVal Original_LastName As String, ByVal Original_FirstName As String, ByVal Original_Title As String, ByVal Original_TitleOfCourtesy As String, ByVal Original_BirthDate? As Global.System.DateTime, ByVal Original_HireDate? As Global.System.DateTime, ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_HomePhone As String, ByVal Original_Extension As String, ByVal Original_ReportsTo? As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Original_EmployeeID))
            If (Original_LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LastName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_LastName))
            End If
            If (Original_FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FirstName")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_FirstName))
            End If
            If (Original_Title Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(6).Value = (CStr(Original_Title))
            End If
            If (Original_TitleOfCourtesy Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(8).Value = (CStr(Original_TitleOfCourtesy))
            End If
            If (Original_BirthDate.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(10).Value = (CDate(Original_BirthDate.Value))
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_HireDate.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(12).Value = (CDate(Original_HireDate.Value))
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(14).Value = (CStr(Original_Address))
            End If
            If (Original_City Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(16).Value = (CStr(Original_City))
            End If
            If (Original_Region Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(18).Value = (CStr(Original_Region))
            End If
            If (Original_PostalCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(20).Value = (CStr(Original_PostalCode))
            End If
            If (Original_Country Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(22).Value = (CStr(Original_Country))
            End If
            If (Original_HomePhone Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(24).Value = (CStr(Original_HomePhone))
            End If
            If (Original_Extension Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(26).Value = (CStr(Original_Extension))
            End If
            If (Original_ReportsTo.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(28).Value = (CInt(Fix(Original_ReportsTo.Value)))
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Function Insert(ByVal LastName As String, ByVal FirstName As String, ByVal Title As String, ByVal TitleOfCourtesy As String, ByVal BirthDate? As Global.System.DateTime, ByVal HireDate? As Global.System.DateTime, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal HomePhone As String, ByVal Extension As String, ByVal Notes As String, ByVal ReportsTo? As Integer) As Integer
            If (LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LastName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(LastName))
            End If
            If (FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FirstName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(FirstName))
            End If
            If (Title Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = (CStr(Title))
            End If
            If (TitleOfCourtesy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(TitleOfCourtesy))
            End If
            If (BirthDate.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = (CDate(BirthDate.Value))
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (HireDate.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = (CDate(HireDate.Value))
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Address Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = (CStr(Address))
            End If
            If (City Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = (CStr(City))
            End If
            If (Region Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = (CStr(Region))
            End If
            If (PostalCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = (CStr(PostalCode))
            End If
            If (Country Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = (CStr(Country))
            End If
            If (HomePhone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = (CStr(HomePhone))
            End If
            If (Extension Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = (CStr(Extension))
            End If
            If (Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = (CStr(Notes))
            End If
            If (ReportsTo.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = (CInt(Fix(ReportsTo.Value)))
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Function Update(ByVal LastName As String, ByVal FirstName As String, ByVal Title As String, ByVal TitleOfCourtesy As String, ByVal BirthDate? As Global.System.DateTime, ByVal HireDate? As Global.System.DateTime, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal HomePhone As String, ByVal Extension As String, ByVal Notes As String, ByVal ReportsTo? As Integer, ByVal Original_EmployeeID As Integer, ByVal Original_LastName As String, ByVal Original_FirstName As String, ByVal Original_Title As String, ByVal Original_TitleOfCourtesy As String, ByVal Original_BirthDate? As Global.System.DateTime, ByVal Original_HireDate? As Global.System.DateTime, ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_HomePhone As String, ByVal Original_Extension As String, ByVal Original_ReportsTo? As Integer) As Integer
            If (LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LastName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(LastName))
            End If
            If (FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FirstName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(FirstName))
            End If
            If (Title Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = (CStr(Title))
            End If
            If (TitleOfCourtesy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(TitleOfCourtesy))
            End If
            If (BirthDate.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = (CDate(BirthDate.Value))
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (HireDate.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = (CDate(HireDate.Value))
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(Address))
            End If
            If (City Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = (CStr(City))
            End If
            If (Region Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = (CStr(Region))
            End If
            If (PostalCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = (CStr(PostalCode))
            End If
            If (Country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(Country))
            End If
            If (HomePhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = (CStr(HomePhone))
            End If
            If (Extension Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = (CStr(Extension))
            End If
            If (Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = (CStr(Notes))
            End If
            If (ReportsTo.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = (CInt(Fix(ReportsTo.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = (CInt(Original_EmployeeID))
            If (Original_LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LastName")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(17).Value = (CStr(Original_LastName))
            End If
            If (Original_FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FirstName")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(19).Value = (CStr(Original_FirstName))
            End If
            If (Original_Title Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(21).Value = (CStr(Original_Title))
            End If
            If (Original_TitleOfCourtesy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(23).Value = (CStr(Original_TitleOfCourtesy))
            End If
            If (Original_BirthDate.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(25).Value = (CDate(Original_BirthDate.Value))
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_HireDate.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(27).Value = (CDate(Original_HireDate.Value))
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(29).Value = (CStr(Original_Address))
            End If
            If (Original_City Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(31).Value = (CStr(Original_City))
            End If
            If (Original_Region Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(33).Value = (CStr(Original_Region))
            End If
            If (Original_PostalCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(35).Value = (CStr(Original_PostalCode))
            End If
            If (Original_Country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(37).Value = (CStr(Original_Country))
            End If
            If (Original_HomePhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(39).Value = (CStr(Original_HomePhone))
            End If
            If (Original_Extension Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(41).Value = (CStr(Original_Extension))
            End If
            If (Original_ReportsTo.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(43).Value = (CInt(Fix(Original_ReportsTo.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
 Partial Public Class LabelsTableAdapter
        Inherits System.ComponentModel.Component

        Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

        Private _connection As Global.System.Data.OleDb.OleDbConnection

        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.OleDb.OleDbConnection)
                Me._connection = value
                If (Me.Adapter.InsertCommand IsNot Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Me.Adapter.DeleteCommand IsNot Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Me.Adapter.UpdateCommand IsNot Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Me.CommandCollection(i) IsNot Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Labels"
            tableMapping.ColumnMappings.Add("LabelId", "LabelId")
            tableMapping.ColumnMappings.Add("Text", "Text")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Color", "Color")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Labels` WHERE ((`LabelId` = ?) AND ((? = 1 AND `Text` IS NULL) OR (`" & "Text` = ?)) AND ((? = 1 AND `Description` IS NULL) OR (`Description` = ?)) AND (" & "(? = 1 AND `Color` IS NULL) OR (`Color` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LabelId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LabelId", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Text", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Text", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Text", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Text", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Description", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Description", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Color", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Color", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Labels` (`LabelId`, `Text`, `Description`, `Color`) VALUES (?, ?, ?," & " ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LabelId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LabelId", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Text", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Text", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Color", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Labels` SET `LabelId` = ?, `Text` = ?, `Description` = ?, `Color` = ? WHERE ((`LabelId` = ?) AND ((? = 1 AND `Text` IS NULL) OR (`Text` = ?)) AND ((? = 1 AND `Description` IS NULL) OR (`Description` = ?)) AND ((? = 1 AND `Color` IS NULL) OR (`Color` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LabelId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LabelId", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Text", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Text", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Color", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LabelId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LabelId", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Text", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Text", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Text", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Text", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Description", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Description", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Color", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Color", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Original, False, Nothing))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT LabelId, [Text], Description, Color FROM Labels"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Function Fill(ByVal dataTable As NwindDataSet.LabelsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
        Public Overridable Function GetData() As NwindDataSet.LabelsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As New NwindDataSet.LabelsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataTable As NwindDataSet.LabelsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataSet As NwindDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Labels")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Function Delete(ByVal Original_LabelId? As Global.System.Guid, ByVal Original_Text As String, ByVal Original_Description As String, ByVal Original_Color As String) As Integer
            If (Original_LabelId.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = (CType(Original_LabelId.Value, Guid))
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Original_Text Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_Text))
            End If
            If (Original_Description Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_Description))
            End If
            If (Original_Color Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(6).Value = (CStr(Original_Color))
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Function Insert(ByVal LabelId? As Global.System.Guid, ByVal Text As String, ByVal Description As String, ByVal Color As String) As Integer
            If (LabelId.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = (CType(LabelId.Value, Guid))
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Text Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(Text))
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = (CStr(Description))
            End If
            If (Color Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(Color))
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Function Update(ByVal LabelId? As Global.System.Guid, ByVal Text As String, ByVal Description As String, ByVal Color As String, ByVal Original_LabelId? As Global.System.Guid, ByVal Original_Text As String, ByVal Original_Description As String, ByVal Original_Color As String) As Integer
            If (LabelId.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = (CType(LabelId.Value, Guid))
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Text Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(Text))
            End If
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = (CStr(Description))
            End If
            If (Color Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(Color))
            End If
            If (Original_LabelId.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = (CType(Original_LabelId.Value, Guid))
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Text Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(Original_Text))
            End If
            If (Original_Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(8).Value = (CStr(Original_Description))
            End If
            If (Original_Color Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(Original_Color))
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Function Update(ByVal Text As String, ByVal Description As String, ByVal Color As String, ByVal Original_LabelId? As Global.System.Guid, ByVal Original_Text As String, ByVal Original_Description As String, ByVal Original_Color As String) As Integer
            Return Me.Update(Original_LabelId, Text, Description, Color, Original_LabelId, Original_Text, Original_Description, Original_Color)
        End Function
    End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
 Partial Public Class ProductsTableAdapter
        Inherits System.ComponentModel.Component

        Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

        Private _connection As Global.System.Data.OleDb.OleDbConnection

        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.OleDb.OleDbConnection)
                Me._connection = value
                If (Me.Adapter.InsertCommand IsNot Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Me.Adapter.DeleteCommand IsNot Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Me.Adapter.UpdateCommand IsNot Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Me.CommandCollection(i) IsNot Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Products"
            tableMapping.ColumnMappings.Add("ProductID", "ProductID")
            tableMapping.ColumnMappings.Add("ProductName", "ProductName")
            tableMapping.ColumnMappings.Add("SupplierID", "SupplierID")
            tableMapping.ColumnMappings.Add("CategoryID", "CategoryID")
            tableMapping.ColumnMappings.Add("QuantityPerUnit", "QuantityPerUnit")
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice")
            tableMapping.ColumnMappings.Add("UnitsInStock", "UnitsInStock")
            tableMapping.ColumnMappings.Add("UnitsOnOrder", "UnitsOnOrder")
            tableMapping.ColumnMappings.Add("ReorderLevel", "ReorderLevel")
            tableMapping.ColumnMappings.Add("Discontinued", "Discontinued")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Products` WHERE ((`ProductID` = ?) AND ((? = 1 AND `ProductName` IS NULL) OR (`ProductName` = ?)) AND ((? = 1 AND `SupplierID` IS NULL) OR (`SupplierID` = ?)) AND ((? = 1 AND `CategoryID` IS NULL) OR (`CategoryID` = ?)) AND ((? = 1 AND `QuantityPerUnit` IS NULL) OR (`QuantityPerUnit` = ?)) AND ((? = 1 AND `UnitPrice` IS NULL) OR (`UnitPrice` = ?)) AND ((? = 1 AND `UnitsInStock` IS NULL) OR (`UnitsInStock` = ?)) AND ((? = 1 AND `UnitsOnOrder` IS NULL) OR (`UnitsOnOrder` = ?)) AND ((? = 1 AND `ReorderLevel` IS NULL) OR (`ReorderLevel` = ?)) AND ((? = 1 AND `Discontinued` IS NULL) OR (`Discontinued` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ProductID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ProductName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductName", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ProductName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductName", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SupplierID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "SupplierID", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SupplierID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "SupplierID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CategoryID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryID", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CategoryID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_QuantityPerUnit", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "QuantityPerUnit", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_QuantityPerUnit", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "QuantityPerUnit", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UnitPrice", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitPrice", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UnitPrice", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitPrice", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UnitsInStock", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitsInStock", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UnitsInStock", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitsInStock", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UnitsOnOrder", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitsOnOrder", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UnitsOnOrder", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitsOnOrder", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ReorderLevel", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReorderLevel", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ReorderLevel", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReorderLevel", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Discontinued", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Discontinued", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Discontinued", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Discontinued", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Products` (`ProductName`, `SupplierID`, `CategoryID`, `QuantityPerUn" & "it`, `UnitPrice`, `UnitsInStock`, `UnitsOnOrder`, `ReorderLevel`, `Discontinued`" & ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ProductName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductName", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SupplierID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "SupplierID", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CategoryID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryID", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("QuantityPerUnit", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "QuantityPerUnit", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UnitPrice", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitPrice", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UnitsInStock", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitsInStock", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UnitsOnOrder", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitsOnOrder", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ReorderLevel", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReorderLevel", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Discontinued", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Discontinued", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Products` SET `ProductName` = ?, `SupplierID` = ?, `CategoryID` = ?, `QuantityPerUnit` = ?, `UnitPrice` = ?, `UnitsInStock` = ?, `UnitsOnOrder` = ?, `ReorderLevel` = ?, `Discontinued` = ? WHERE ((`ProductID` = ?) AND ((? = 1 AND `ProductName` IS NULL) OR (`ProductName` = ?)) AND ((? = 1 AND `SupplierID` IS NULL) OR (`SupplierID` = ?)) AND ((? = 1 AND `CategoryID` IS NULL) OR (`CategoryID` = ?)) AND ((? = 1 AND `QuantityPerUnit` IS NULL) OR (`QuantityPerUnit` = ?)) AND ((? = 1 AND `UnitPrice` IS NULL) OR (`UnitPrice` = ?)) AND ((? = 1 AND `UnitsInStock` IS NULL) OR (`UnitsInStock` = ?)) AND ((? = 1 AND `UnitsOnOrder` IS NULL) OR (`UnitsOnOrder` = ?)) AND ((? = 1 AND `ReorderLevel` IS NULL) OR (`ReorderLevel` = ?)) AND ((? = 1 AND `Discontinued` IS NULL) OR (`Discontinued` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ProductName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductName", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SupplierID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "SupplierID", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CategoryID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryID", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("QuantityPerUnit", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "QuantityPerUnit", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UnitPrice", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitPrice", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UnitsInStock", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitsInStock", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UnitsOnOrder", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitsOnOrder", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ReorderLevel", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReorderLevel", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Discontinued", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Discontinued", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ProductID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ProductName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductName", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ProductName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductName", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SupplierID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "SupplierID", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SupplierID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "SupplierID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CategoryID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryID", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CategoryID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CategoryID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_QuantityPerUnit", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "QuantityPerUnit", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_QuantityPerUnit", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "QuantityPerUnit", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UnitPrice", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitPrice", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UnitPrice", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitPrice", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UnitsInStock", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitsInStock", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UnitsInStock", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitsInStock", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UnitsOnOrder", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitsOnOrder", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UnitsOnOrder", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitsOnOrder", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ReorderLevel", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReorderLevel", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ReorderLevel", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReorderLevel", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Discontinued", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Discontinued", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Discontinued", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Discontinued", Global.System.Data.DataRowVersion.Original, False, Nothing))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ProductID, ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice" & ", UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued FROM Products"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Function Fill(ByVal dataTable As NwindDataSet.ProductsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
        Public Overridable Function GetData() As NwindDataSet.ProductsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As New NwindDataSet.ProductsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataTable As NwindDataSet.ProductsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataSet As NwindDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Products")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Function Delete(ByVal Original_ProductID As Integer, ByVal Original_ProductName As String, ByVal Original_SupplierID? As Integer, ByVal Original_CategoryID? As Integer, ByVal Original_QuantityPerUnit As String, ByVal Original_UnitPrice? As Decimal, ByVal Original_UnitsInStock? As Short, ByVal Original_UnitsOnOrder? As Short, ByVal Original_ReorderLevel? As Short, ByVal Original_Discontinued As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Original_ProductID))
            If (Original_ProductName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ProductName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_ProductName))
            End If
            If (Original_SupplierID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(4).Value = (CInt(Fix(Original_SupplierID.Value)))
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_CategoryID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(6).Value = (CInt(Fix(Original_CategoryID.Value)))
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_QuantityPerUnit Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(8).Value = (CStr(Original_QuantityPerUnit))
            End If
            If (Original_UnitPrice.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(10).Value = (CDec(Original_UnitPrice.Value))
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_UnitsInStock.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(12).Value = (CShort(Fix(Original_UnitsInStock.Value)))
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_UnitsOnOrder.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(14).Value = (CShort(Fix(Original_UnitsOnOrder.Value)))
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_ReorderLevel.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(16).Value = (CShort(Fix(Original_ReorderLevel.Value)))
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(0))
            Me.Adapter.DeleteCommand.Parameters(18).Value = (CBool(Original_Discontinued))
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Function Insert(ByVal ProductName As String, ByVal SupplierID? As Integer, ByVal CategoryID? As Integer, ByVal QuantityPerUnit As String, ByVal UnitPrice? As Decimal, ByVal UnitsInStock? As Short, ByVal UnitsOnOrder? As Short, ByVal ReorderLevel? As Short, ByVal Discontinued As Boolean) As Integer
            If (ProductName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProductName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(ProductName))
            End If
            If (SupplierID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = (CInt(Fix(SupplierID.Value)))
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CategoryID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = (CInt(Fix(CategoryID.Value)))
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (QuantityPerUnit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(QuantityPerUnit))
            End If
            If (UnitPrice.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = (CDec(UnitPrice.Value))
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (UnitsInStock.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = (CShort(Fix(UnitsInStock.Value)))
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (UnitsOnOrder.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = (CShort(Fix(UnitsOnOrder.Value)))
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ReorderLevel.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = (CShort(Fix(ReorderLevel.Value)))
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = (CBool(Discontinued))
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Function Update(ByVal ProductName As String, ByVal SupplierID? As Integer, ByVal CategoryID? As Integer, ByVal QuantityPerUnit As String, ByVal UnitPrice? As Decimal, ByVal UnitsInStock? As Short, ByVal UnitsOnOrder? As Short, ByVal ReorderLevel? As Short, ByVal Discontinued As Boolean, ByVal Original_ProductID As Integer, ByVal Original_ProductName As String, ByVal Original_SupplierID? As Integer, ByVal Original_CategoryID? As Integer, ByVal Original_QuantityPerUnit As String, ByVal Original_UnitPrice? As Decimal, ByVal Original_UnitsInStock? As Short, ByVal Original_UnitsOnOrder? As Short, ByVal Original_ReorderLevel? As Short, ByVal Original_Discontinued As Boolean) As Integer
            If (ProductName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProductName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(ProductName))
            End If
            If (SupplierID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = (CInt(Fix(SupplierID.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CategoryID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = (CInt(Fix(CategoryID.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (QuantityPerUnit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(QuantityPerUnit))
            End If
            If (UnitPrice.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = (CDec(UnitPrice.Value))
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (UnitsInStock.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = (CShort(Fix(UnitsInStock.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (UnitsOnOrder.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = (CShort(Fix(UnitsOnOrder.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ReorderLevel.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = (CShort(Fix(ReorderLevel.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = (CBool(Discontinued))
            Me.Adapter.UpdateCommand.Parameters(9).Value = (CInt(Original_ProductID))
            If (Original_ProductName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ProductName")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(11).Value = (CStr(Original_ProductName))
            End If
            If (Original_SupplierID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(13).Value = (CInt(Fix(Original_SupplierID.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_CategoryID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(15).Value = (CInt(Fix(Original_CategoryID.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_QuantityPerUnit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(17).Value = (CStr(Original_QuantityPerUnit))
            End If
            If (Original_UnitPrice.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(19).Value = (CDec(Original_UnitPrice.Value))
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_UnitsInStock.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(21).Value = (CShort(Fix(Original_UnitsInStock.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_UnitsOnOrder.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(23).Value = (CShort(Fix(Original_UnitsOnOrder.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_ReorderLevel.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(25).Value = (CShort(Fix(Original_ReorderLevel.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(0))
            Me.Adapter.UpdateCommand.Parameters(27).Value = (CBool(Original_Discontinued))
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
 Partial Public Class StatusesTableAdapter
        Inherits System.ComponentModel.Component

        Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

        Private _connection As Global.System.Data.OleDb.OleDbConnection

        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.OleDb.OleDbConnection)
                Me._connection = value
                If (Me.Adapter.InsertCommand IsNot Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Me.Adapter.DeleteCommand IsNot Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Me.Adapter.UpdateCommand IsNot Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Me.CommandCollection(i) IsNot Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Statuses"
            tableMapping.ColumnMappings.Add("StatusId", "StatusId")
            tableMapping.ColumnMappings.Add("Text", "Text")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Color", "Color")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Statuses` WHERE ((`StatusId` = ?) AND ((? = 1 AND `Text` IS NULL) OR" & " (`Text` = ?)) AND ((? = 1 AND `Description` IS NULL) OR (`Description` = ?)) AN" & "D ((? = 1 AND `Color` IS NULL) OR (`Color` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_StatusId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StatusId", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Text", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Text", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Text", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Text", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Description", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Description", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Color", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Color", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Statuses` (`StatusId`, `Text`, `Description`, `Color`) VALUES (?, ?," & " ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("StatusId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StatusId", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Text", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Text", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Color", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Statuses` SET `StatusId` = ?, `Text` = ?, `Description` = ?, `Color` = ? WHERE ((`StatusId` = ?) AND ((? = 1 AND `Text` IS NULL) OR (`Text` = ?)) AND ((? = 1 AND `Description` IS NULL) OR (`Description` = ?)) AND ((? = 1 AND `Color` IS NULL) OR (`Color` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("StatusId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StatusId", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Text", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Text", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Color", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_StatusId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StatusId", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Text", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Text", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Text", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Text", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Description", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Description", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Color", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Color", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Original, False, Nothing))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT StatusId, [Text], Description, Color FROM Statuses"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Function Fill(ByVal dataTable As NwindDataSet.StatusesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
        Public Overridable Function GetData() As NwindDataSet.StatusesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As New NwindDataSet.StatusesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataTable As NwindDataSet.StatusesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataSet As NwindDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Statuses")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Function Delete(ByVal Original_StatusId? As Global.System.Guid, ByVal Original_Text As String, ByVal Original_Description As String, ByVal Original_Color As String) As Integer
            If (Original_StatusId.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = (CType(Original_StatusId.Value, Guid))
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Original_Text Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_Text))
            End If
            If (Original_Description Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_Description))
            End If
            If (Original_Color Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(6).Value = (CStr(Original_Color))
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Function Insert(ByVal StatusId? As Global.System.Guid, ByVal Text As String, ByVal Description As String, ByVal Color As String) As Integer
            If (StatusId.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = (CType(StatusId.Value, Guid))
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Text Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(Text))
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = (CStr(Description))
            End If
            If (Color Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(Color))
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Function Update(ByVal StatusId? As Global.System.Guid, ByVal Text As String, ByVal Description As String, ByVal Color As String, ByVal Original_StatusId? As Global.System.Guid, ByVal Original_Text As String, ByVal Original_Description As String, ByVal Original_Color As String) As Integer
            If (StatusId.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = (CType(StatusId.Value, Guid))
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Text Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(Text))
            End If
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = (CStr(Description))
            End If
            If (Color Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(Color))
            End If
            If (Original_StatusId.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = (CType(Original_StatusId.Value, Guid))
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Text Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(Original_Text))
            End If
            If (Original_Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(8).Value = (CStr(Original_Description))
            End If
            If (Original_Color Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(Original_Color))
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Function Update(ByVal Text As String, ByVal Description As String, ByVal Color As String, ByVal Original_StatusId? As Global.System.Guid, ByVal Original_Text As String, ByVal Original_Description As String, ByVal Original_Color As String) As Integer
            Return Me.Update(Original_StatusId, Text, Description, Color, Original_StatusId, Original_Text, Original_Description, Original_Color)
        End Function
    End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
 Partial Public Class CustomersTableAdapter
        Inherits System.ComponentModel.Component

        Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

        Private _connection As Global.System.Data.OleDb.OleDbConnection

        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.OleDb.OleDbConnection)
                Me._connection = value
                If (Me.Adapter.InsertCommand IsNot Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Me.Adapter.DeleteCommand IsNot Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Me.Adapter.UpdateCommand IsNot Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Me.CommandCollection(i) IsNot Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Customers"
            tableMapping.ColumnMappings.Add("CustomerId", "CustomerId")
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName")
            tableMapping.ColumnMappings.Add("ContactName", "ContactName")
            tableMapping.ColumnMappings.Add("ContactTitle", "ContactTitle")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("Region", "Region")
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode")
            tableMapping.ColumnMappings.Add("Country", "Country")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("Fax", "Fax")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Customers` WHERE ((`CustomerId` = ?) AND ((? = 1 AND `CompanyName` IS NULL) OR (`CompanyName` = ?)) AND ((? = 1 AND `ContactName` IS NULL) OR (`ContactName` = ?)) AND ((? = 1 AND `ContactTitle` IS NULL) OR (`ContactTitle` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `Phone` IS NULL) OR (`Phone` = ?)) AND ((? = 1 AND `Fax` IS NULL) OR (`Fax` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CustomerId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerId", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CompanyName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CompanyName", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CompanyName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CompanyName", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ContactName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactName", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ContactName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactName", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ContactTitle", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactTitle", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ContactTitle", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactTitle", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Address", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Region", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PostalCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Country", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Phone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Phone", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Phone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Phone", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Fax", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Fax", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Fax", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Fax", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Customers` (`CustomerId`, `CompanyName`, `ContactName`, `ContactTitl" & "e`, `Address`, `City`, `Region`, `PostalCode`, `Country`, `Phone`, `Fax`) VALUES" & " (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CustomerId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerId", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CompanyName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CompanyName", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactName", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactTitle", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactTitle", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Phone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Phone", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fax", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Fax", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Customers` SET `CustomerId` = ?, `CompanyName` = ?, `ContactName` = ?, `ContactTitle` = ?, `Address` = ?, `City` = ?, `Region` = ?, `PostalCode` = ?, `Country` = ?, `Phone` = ?, `Fax` = ? WHERE ((`CustomerId` = ?) AND ((? = 1 AND `CompanyName` IS NULL) OR (`CompanyName` = ?)) AND ((? = 1 AND `ContactName` IS NULL) OR (`ContactName` = ?)) AND ((? = 1 AND `ContactTitle` IS NULL) OR (`ContactTitle` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `Phone` IS NULL) OR (`Phone` = ?)) AND ((? = 1 AND `Fax` IS NULL) OR (`Fax` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CustomerId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerId", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CompanyName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CompanyName", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactName", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactTitle", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactTitle", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Phone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Phone", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fax", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Fax", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CustomerId", Global.System.Data.OleDb.OleDbType.Guid, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerId", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CompanyName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CompanyName", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CompanyName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CompanyName", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ContactName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactName", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ContactName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactName", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ContactTitle", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactTitle", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ContactTitle", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactTitle", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Address", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Region", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PostalCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Country", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Phone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Phone", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Phone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Phone", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Fax", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Fax", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Fax", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Fax", Global.System.Data.DataRowVersion.Original, False, Nothing))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CustomerId, CompanyName, ContactName, ContactTitle, Address, City, Region," & " PostalCode, Country, Phone, Fax FROM Customers"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Function Fill(ByVal dataTable As NwindDataSet.CustomersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
        Public Overridable Function GetData() As NwindDataSet.CustomersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As New NwindDataSet.CustomersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataTable As NwindDataSet.CustomersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataSet As NwindDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Customers")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Function Delete(ByVal Original_CustomerId As Guid, ByVal Original_CompanyName As String, ByVal Original_ContactName As String, ByVal Original_ContactTitle As String, ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_Phone As String, ByVal Original_Fax As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = (CType(Original_CustomerId, Guid))
            If (Original_CompanyName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CompanyName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_CompanyName))
            End If
            If (Original_ContactName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_ContactName))
            End If
            If (Original_ContactTitle Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(6).Value = (CStr(Original_ContactTitle))
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(8).Value = (CStr(Original_Address))
            End If
            If (Original_City Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(10).Value = (CStr(Original_City))
            End If
            If (Original_Region Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(12).Value = (CStr(Original_Region))
            End If
            If (Original_PostalCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(14).Value = (CStr(Original_PostalCode))
            End If
            If (Original_Country Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(16).Value = (CStr(Original_Country))
            End If
            If (Original_Phone Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(18).Value = (CStr(Original_Phone))
            End If
            If (Original_Fax Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(1))
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(0))
                Me.Adapter.DeleteCommand.Parameters(20).Value = (CStr(Original_Fax))
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Function Insert(ByVal CustomerId As Guid, ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal Phone As String, ByVal Fax As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = (CType(CustomerId, Guid))
            If (CompanyName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CompanyName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(CompanyName))
            End If
            If (ContactName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = (CStr(ContactName))
            End If
            If (ContactTitle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(ContactTitle))
            End If
            If (Address Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = (CStr(Address))
            End If
            If (City Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = (CStr(City))
            End If
            If (Region Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = (CStr(Region))
            End If
            If (PostalCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = (CStr(PostalCode))
            End If
            If (Country Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = (CStr(Country))
            End If
            If (Phone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = (CStr(Phone))
            End If
            If (Fax Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = (CStr(Fax))
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Function Update(ByVal CustomerId As Guid, ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal Phone As String, ByVal Fax As String, ByVal Original_CustomerId As Guid, ByVal Original_CompanyName As String, ByVal Original_ContactName As String, ByVal Original_ContactTitle As String, ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_Phone As String, ByVal Original_Fax As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = (CType(CustomerId, Guid))
            If (CompanyName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CompanyName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(CompanyName))
            End If
            If (ContactName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = (CStr(ContactName))
            End If
            If (ContactTitle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(ContactTitle))
            End If
            If (Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = (CStr(Address))
            End If
            If (City Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = (CStr(City))
            End If
            If (Region Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(Region))
            End If
            If (PostalCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = (CStr(PostalCode))
            End If
            If (Country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = (CStr(Country))
            End If
            If (Phone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = (CStr(Phone))
            End If
            If (Fax Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(Fax))
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = (CType(Original_CustomerId, Guid))
            If (Original_CompanyName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CompanyName")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(13).Value = (CStr(Original_CompanyName))
            End If
            If (Original_ContactName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(15).Value = (CStr(Original_ContactName))
            End If
            If (Original_ContactTitle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(17).Value = (CStr(Original_ContactTitle))
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(19).Value = (CStr(Original_Address))
            End If
            If (Original_City Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(21).Value = (CStr(Original_City))
            End If
            If (Original_Region Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(23).Value = (CStr(Original_Region))
            End If
            If (Original_PostalCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(25).Value = (CStr(Original_PostalCode))
            End If
            If (Original_Country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(27).Value = (CStr(Original_Country))
            End If
            If (Original_Phone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(29).Value = (CStr(Original_Phone))
            End If
            If (Original_Fax Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = (CObj(1))
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = (CObj(0))
                Me.Adapter.UpdateCommand.Parameters(31).Value = (CStr(Original_Fax))
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Function Update(ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal Phone As String, ByVal Fax As String, ByVal Original_CustomerId As Guid, ByVal Original_CompanyName As String, ByVal Original_ContactName As String, ByVal Original_ContactTitle As String, ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_Phone As String, ByVal Original_Fax As String) As Integer
            Return Me.Update(Original_CustomerId, CompanyName, ContactName, ContactTitle, Address, City, Region, PostalCode, Country, Phone, Fax, Original_CustomerId, Original_CompanyName, Original_ContactName, Original_ContactTitle, Original_Address, Original_City, Original_Region, Original_PostalCode, Original_Country, Original_Phone, Original_Fax)
        End Function
    End Class
End Namespace
