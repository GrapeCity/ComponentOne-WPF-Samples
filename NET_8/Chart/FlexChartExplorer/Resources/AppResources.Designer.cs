//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlexChartExplorer.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class AppResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AppResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FlexChartExplorer.Resources.AppResources", typeof(AppResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoLabels.
        /// </summary>
        public static string AutoLabelDesc {
            get {
                return ResourceManager.GetString("AutoLabelDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The demo shows automatic label positioning. When DataLabel.Position is Auto the chart performs automatic label layout trying to avoid their overlapping..
        /// </summary>
        public static string AutoLabelsTag {
            get {
                return ResourceManager.GetString("AutoLabelsTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoLabels.
        /// </summary>
        public static string AutoLabelsTitle {
            get {
                return ResourceManager.GetString("AutoLabelsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axes.
        /// </summary>
        public static string AxesDesc {
            get {
                return ResourceManager.GetString("AxesDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows the FlexChart with two y-axes..
        /// </summary>
        public static string AxesTag {
            get {
                return ResourceManager.GetString("AxesTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axes.
        /// </summary>
        public static string AxesTitle {
            get {
                return ResourceManager.GetString("AxesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axis Binding.
        /// </summary>
        public static string AxisBindingDesc {
            get {
                return ResourceManager.GetString("AxisBindingDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows the FlexChart&apos;s axis binding feature..
        /// </summary>
        public static string AxisBindingTag {
            get {
                return ResourceManager.GetString("AxisBindingTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axis Binding.
        /// </summary>
        public static string AxisBindingTitle {
            get {
                return ResourceManager.GetString("AxisBindingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axis Grouping.
        /// </summary>
        public static string AxisGroupingDesc {
            get {
                return ResourceManager.GetString("AxisGroupingDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows grouping of axis labels..
        /// </summary>
        public static string AxisGroupingTag {
            get {
                return ResourceManager.GetString("AxisGroupingTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axis Grouping.
        /// </summary>
        public static string AxisGroupingTitle {
            get {
                return ResourceManager.GetString("AxisGroupingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axis Labels.
        /// </summary>
        public static string AxisLabelsDesc {
            get {
                return ResourceManager.GetString("AxisLabelsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows various Axis options to avoid label overlapping..
        /// </summary>
        public static string AxisLabelsTag {
            get {
                return ResourceManager.GetString("AxisLabelsTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axis Labels.
        /// </summary>
        public static string AxisLabelsTitle {
            get {
                return ResourceManager.GetString("AxisLabelsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axis Markers.
        /// </summary>
        public static string AxisMarkersDesc {
            get {
                return ResourceManager.GetString("AxisMarkersDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to display line markers over the axes. Both axes have markers which follow the pointer and display its position in data coordinates..
        /// </summary>
        public static string AxisMarkersTag {
            get {
                return ResourceManager.GetString("AxisMarkersTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axis Markers.
        /// </summary>
        public static string AxisMarkersTitle {
            get {
                return ResourceManager.GetString("AxisMarkersTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding.
        /// </summary>
        public static string BindingDesc {
            get {
                return ResourceManager.GetString("BindingDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how you can use the FlexChart to show two sets of values from a single array of data. This is the most common usage scenario for the FlexChart.
        ///    The sample does the following:
        ///    1.Set the chart&apos;s DataSource property to an array of data objects. Each data object has values for &apos;date&apos;, &apos;sales&apos;, and &apos;downloads&apos;.
        ///    2.Set the chart&apos;s bindingX property to &apos;date&apos;.
        ///    3.Add a Series object to the chart&apos;s series array and set its binding property to &apos;sales&apos;.
        ///    4.Add a second Series obj [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BindingTag {
            get {
                return ResourceManager.GetString("BindingTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding.
        /// </summary>
        public static string BindingTitle {
            get {
                return ResourceManager.GetString("BindingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Box &amp; Whisker.
        /// </summary>
        public static string BoxWhiskerDesc {
            get {
                return ResourceManager.GetString("BoxWhiskerDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Box &amp; Whisker series is normally used to compare distributions between different sets of numerical data.
        /// </summary>
        public static string BoxWhiskerTag {
            get {
                return ResourceManager.GetString("BoxWhiskerTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Box &amp; Whisker.
        /// </summary>
        public static string BoxWhiskerTitle {
            get {
                return ResourceManager.GetString("BoxWhiskerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Break-Even Chart.
        /// </summary>
        public static string BreakEvenDesc {
            get {
                return ResourceManager.GetString("BreakEvenDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Break-Even chart is a chart that shows the sales volume level at which total costs equal sales..
        /// </summary>
        public static string BreakEvenTag {
            get {
                return ResourceManager.GetString("BreakEvenTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Break-Even.
        /// </summary>
        public static string BreakEvenTitle {
            get {
                return ResourceManager.GetString("BreakEvenTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bubble.
        /// </summary>
        public static string BubbleDesc {
            get {
                return ResourceManager.GetString("BubbleDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to create bubble charts using the FlexChart control.
        ///    Bubble charts are similar to other chart types, except in addition to X and Y you must specify a binding for the bubble size.This is done by setting the binding property to a comma - delimited string that specifies the name of the properties to be used for the Y and size values for each bubble.
        ///    In this example, the chart is bound to a list containing objects with &apos;x&apos;, &apos;y&apos;, and &apos;size&apos; properties.The chart contains a single ser [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BubbleTag {
            get {
                return ResourceManager.GetString("BubbleTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bubble.
        /// </summary>
        public static string BubbleTitle {
            get {
                return ResourceManager.GetString("BubbleTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to copyright (c) ComponentOne.
        /// </summary>
        public static string C1CopyRight {
            get {
                return ResourceManager.GetString("C1CopyRight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chart Footer.
        /// </summary>
        public static string ChartFooter {
            get {
                return ResourceManager.GetString("ChartFooter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chart Header.
        /// </summary>
        public static string ChartHeader {
            get {
                return ResourceManager.GetString("ChartHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Combination of range column and heatmap plots.
        /// </summary>
        public static string ColumnHeatmapDesc {
            get {
                return ResourceManager.GetString("ColumnHeatmapDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows combination of ranged column chart and heatmap. The heatmap displayed simplified presentation of the same data on the time axis..
        /// </summary>
        public static string ColumnHeatmapTag {
            get {
                return ResourceManager.GetString("ColumnHeatmapTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Column &amp; Heatmap.
        /// </summary>
        public static string ColumnHeatmapTitle {
            get {
                return ResourceManager.GetString("ColumnHeatmapTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DateTime Axis Grouping.
        /// </summary>
        public static string DateTimeAxisGroupingDesc {
            get {
                return ResourceManager.GetString("DateTimeAxisGroupingDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows grouping of date-time axis labels..
        /// </summary>
        public static string DateTimeAxisGroupingTag {
            get {
                return ResourceManager.GetString("DateTimeAxisGroupingTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DateTime Axis Grouping.
        /// </summary>
        public static string DateTimeAxisGroupingTitle {
            get {
                return ResourceManager.GetString("DateTimeAxisGroupingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Bar.
        /// </summary>
        public static string ErrorBarDesc {
            get {
                return ResourceManager.GetString("ErrorBarDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Error bar helps you see margins of error and standard deviations at a glance..
        /// </summary>
        public static string ErrorBarTag {
            get {
                return ResourceManager.GetString("ErrorBarTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Bar.
        /// </summary>
        public static string ErrorBarTitle {
            get {
                return ResourceManager.GetString("ErrorBarTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Factors Influencing Purchase Decisions.
        /// </summary>
        public static string Factors {
            get {
                return ResourceManager.GetString("Factors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Financial Chart.
        /// </summary>
        public static string FinancialCharDesc {
            get {
                return ResourceManager.GetString("FinancialCharDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Financial Chart.
        /// </summary>
        public static string FinancialChartTitle {
            get {
                return ResourceManager.GetString("FinancialChartTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to create financial charts with the FlexChart control.
        ///    The FlexChart supports two types of financial chart: Candlestick and HiLowOpenClose.To use them, set the chartType property to the type you want, and set the series binding property to a string that specifies the fields that contain the high, low, open, and close values in the data source..
        /// </summary>
        public static string FinancialTag {
            get {
                return ResourceManager.GetString("FinancialTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header And Footer.
        /// </summary>
        public static string HeaderFooterDesc {
            get {
                return ResourceManager.GetString("HeaderFooterDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how you can add a header and a footer to the chart.
        ///    The header and footer properties determine the content, and the headerStyle and footerStyle properties determine the appearance of the header and footer..
        /// </summary>
        public static string HeaderFooterTag {
            get {
                return ResourceManager.GetString("HeaderFooterTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header And Footer.
        /// </summary>
        public static string HeaderFooterTitle {
            get {
                return ResourceManager.GetString("HeaderFooterTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Heatmap Plot.
        /// </summary>
        public static string HeatmapDesc {
            get {
                return ResourceManager.GetString("HeatmapDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shows Heatmap plot with gradient color scale. The data from two-dimensional array is shown as a table. The color of table&apos;s cell depends on the corresponding data value..
        /// </summary>
        public static string HeatmapTag {
            get {
                return ResourceManager.GetString("HeatmapTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Heatmap.
        /// </summary>
        public static string HeatmapTitle {
            get {
                return ResourceManager.GetString("HeatmapTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Histogram.
        /// </summary>
        public static string HistogramDesc {
            get {
                return ResourceManager.GetString("HistogramDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Histogram chart is used to study the distribution of non-categorical data by dividing it into bins of specified width. It plots the frequency of data items that fall in each of these bins. This sample shows: 
        ///    1. Histogram chart with columns 
        ///    2. Frequency Polygon: A variation of Histogram charts where the columns are replaced by a curve.These are helpful for comparing multiple sets of data. 
        ///    3. Normal Curve: A bell - shaped curve, also known as Gaussian curve, which shows the probability dis [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HistogramTag {
            get {
                return ResourceManager.GetString("HistogramTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Histogram.
        /// </summary>
        public static string HistogramTitle {
            get {
                return ResourceManager.GetString("HistogramTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hit Test.
        /// </summary>
        public static string HitTestDesc {
            get {
                return ResourceManager.GetString("HitTestDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view demonstrates the use of the FlexChart&apos;s hitTest method.
        ///    The hitTest method takes a point and returns the nearest chart element.It can be used to provide interactive features such as clickable regions, drill - downs, etc.
        ///    Move mouse over chart to see information about the chart element that is closest to the mouse..
        /// </summary>
        public static string HitTestTag {
            get {
                return ResourceManager.GetString("HitTestTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hit Test.
        /// </summary>
        public static string HitTestTitle {
            get {
                return ResourceManager.GetString("HitTestTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Image Export.
        /// </summary>
        public static string ImageExportDesc {
            get {
                return ResourceManager.GetString("ImageExportDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save FlexChart as image..
        /// </summary>
        public static string ImageExportTag {
            get {
                return ResourceManager.GetString("ImageExportTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Image Export.
        /// </summary>
        public static string ImageExportTitle {
            get {
                return ResourceManager.GetString("ImageExportTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Introduction.
        /// </summary>
        public static string IntroductionDesc {
            get {
                return ResourceManager.GetString("IntroductionDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows the FlexChart&apos;s basic features. It binds the chart to a data source and allows you to select the chart type, series stacking, and rotation.
        ///    If you move the mouse over a chart element, a tooltip will appear showing details about the data point.
        ///    The simplest way to use the FlexChart is to:
        ///    1.Set the chart&apos;s DataSource property to an array of data objects.
        ///    2.Set the chart&apos;s bindingX property to the name of the property that contains the X values (in this example fruit names) [rest of string was truncated]&quot;;.
        /// </summary>
        public static string IntroductionTag {
            get {
                return ResourceManager.GetString("IntroductionTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Introduction.
        /// </summary>
        public static string IntroductionTitle {
            get {
                return ResourceManager.GetString("IntroductionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Labels.
        /// </summary>
        public static string LabelsDesc {
            get {
                return ResourceManager.GetString("LabelsDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view demonstrates how you can use the FlexChart&apos;s dataLabel property to add labels to each data point..
        /// </summary>
        public static string LabelsTag {
            get {
                return ResourceManager.GetString("LabelsTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Labels.
        /// </summary>
        public static string LabelsTitle {
            get {
                return ResourceManager.GetString("LabelsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Legend.
        /// </summary>
        public static string LegendDesc {
            get {
                return ResourceManager.GetString("LegendDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how you can use the FlexChart legend properties. 
        ///    The sample does the following: 
        ///    1.Set legend position property to decide how you locate the legend.such as &quot;Auto&quot;, &quot;Left&quot;, &quot;Top&quot;, &quot;Right&quot; and &quot;Bottom&quot;. 
        ///    2.Set legend orientations. 
        ///    3.Set the mode of legend text wrapping.such as &quot;None&quot;, &quot;Wrap&quot; and &quot;Truncate&quot;. 
        ///    4.Set a value more than 0 to legend item maxWidth property, set 0 to disable legend textWrapping. 
        ///    5.Set the LegendGroup property of each series to group it [rest of string was truncated]&quot;;.
        /// </summary>
        public static string LegendTag {
            get {
                return ResourceManager.GetString("LegendTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Legend.
        /// </summary>
        public static string LegendTitle {
            get {
                return ResourceManager.GetString("LegendTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Monthly Sales Summary.
        /// </summary>
        public static string MonthlySale {
            get {
                return ResourceManager.GetString("MonthlySale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Numeric Axis Grouping.
        /// </summary>
        public static string NumericAxisGroupingDesc {
            get {
                return ResourceManager.GetString("NumericAxisGroupingDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows grouping of numeric axis labels..
        /// </summary>
        public static string NumericAxisGroupingTag {
            get {
                return ResourceManager.GetString("NumericAxisGroupingTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Numeric Axis Grouping.
        /// </summary>
        public static string NumericAxisGroupingTitle {
            get {
                return ResourceManager.GetString("NumericAxisGroupingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pareto.
        /// </summary>
        public static string ParetoDesc {
            get {
                return ResourceManager.GetString("ParetoDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Pareto is a special histogram chart with columns sorted in descending order and a rising line that represents the cumulative total percentage. Pareto charts makes it easier to analyze most significant issues and prioritise corrective actions..
        /// </summary>
        public static string ParetoTag {
            get {
                return ResourceManager.GetString("ParetoTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pareto.
        /// </summary>
        public static string ParetoTitle {
            get {
                return ResourceManager.GetString("ParetoTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PieChart Selection.
        /// </summary>
        public static string PieCharSelectionDesc {
            get {
                return ResourceManager.GetString("PieCharSelectionDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PieChart.
        /// </summary>
        public static string PieChartDesc {
            get {
                return ResourceManager.GetString("PieChartDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PieChart Selection.
        /// </summary>
        public static string PieChartSelectionTitle {
            get {
                return ResourceManager.GetString("PieChartSelectionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PieChart Slice Color.
        /// </summary>
        public static string PieChartSliceDesc {
            get {
                return ResourceManager.GetString("PieChartSliceDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PieChart Slice Color.
        /// </summary>
        public static string PieChartSliceTitle {
            get {
                return ResourceManager.GetString("PieChartSliceTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PieChart.
        /// </summary>
        public static string PieChartTitle {
            get {
                return ResourceManager.GetString("PieChartTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows the FlexPie&apos;s basic features. It binds the chart to a data source.
        ///    If you move the mouse over a chart element, a tooltip will appear showing details about the data point..
        /// </summary>
        public static string PieIntroductionTag {
            get {
                return ResourceManager.GetString("PieIntroductionTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows the FlexPie&apos;s selection feature..
        /// </summary>
        public static string PieSelectionTag {
            get {
                return ResourceManager.GetString("PieSelectionTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to customize FlexPie silce colors. The color intensity depends on the corresponding data value. It also demonstrates animation when loading new or updating existing data..
        /// </summary>
        public static string PieSliceColorTag {
            get {
                return ResourceManager.GetString("PieSliceColorTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plot Areas.
        /// </summary>
        public static string PlotAreasDesc {
            get {
                return ResourceManager.GetString("PlotAreasDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows the FlexChart with several plot areas..
        /// </summary>
        public static string PlotAreasTag {
            get {
                return ResourceManager.GetString("PlotAreasTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plot Areas.
        /// </summary>
        public static string PlotAreasTitle {
            get {
                return ResourceManager.GetString("PlotAreasTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ranged Histogram.
        /// </summary>
        public static string RangedHistogramDesc {
            get {
                return ResourceManager.GetString("RangedHistogramDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows main functionality of Ranged Histogram. 
        ///    An unique Histogram chart that can be used to study categorical as well as non-categorical data. Provides multiple binning options as well as support for Overflow and Underflow bins..
        /// </summary>
        public static string RangedHistogramTag {
            get {
                return ResourceManager.GetString("RangedHistogramTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ranged Histogram.
        /// </summary>
        public static string RangedHistogramTitle {
            get {
                return ResourceManager.GetString("RangedHistogramTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Selection.
        /// </summary>
        public static string SelectionDesc {
            get {
                return ResourceManager.GetString("SelectionDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view demonstrates the FlexChart&apos;s selection feature.
        ///    The selectionMode property determines whether the chart should select series or points when the user clicks on the chart..
        /// </summary>
        public static string SelectionTag {
            get {
                return ResourceManager.GetString("SelectionTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Selection.
        /// </summary>
        public static string SelectionTitle {
            get {
                return ResourceManager.GetString("SelectionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Series Binding.
        /// </summary>
        public static string SeriesBindingDesc {
            get {
                return ResourceManager.GetString("SeriesBindingDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how you can use the FlexChart to show data from multiple data sources, one per series.
        ///    The sample does the following:
        ///    1.Set the chart&apos;s bindingX and binding properties to &apos;x&apos; and &apos;y&apos;.
        ///    2.Add a Series object to the chart&apos;s series array and set its DataSource property to an array of objects that have &apos;x&apos; and &apos;y&apos; properties.
        ///    3.Add a second Series object to the chart&apos;s series array and set its DataSource property to a different array of objects that have &apos;x&apos; and &apos;y&apos; properties [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SeriesBindingTag {
            get {
                return ResourceManager.GetString("SeriesBindingTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Series Binding.
        /// </summary>
        public static string SeriesBindingTitle {
            get {
                return ResourceManager.GetString("SeriesBindingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FlexChartExplorer.
        /// </summary>
        public static string Title {
            get {
                return ResourceManager.GetString("Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TreeMap.
        /// </summary>
        public static string TreeMapDesc {
            get {
                return ResourceManager.GetString("TreeMapDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TreeMap Node Color.
        /// </summary>
        public static string TreeMapNodeColorDesc {
            get {
                return ResourceManager.GetString("TreeMapNodeColorDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TreeMaps can be used to display two quantitive variables simultaneously, one represented by each rectangle&apos;s size and the other represented by its colour. 
        ///    This view demonstrates how you can use TreeMap.NodeRendering event to specify color of each node..
        /// </summary>
        public static string TreeMapNodeColorTag {
            get {
                return ResourceManager.GetString("TreeMapNodeColorTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TreeMap Node Color.
        /// </summary>
        public static string TreeMapNodeColorTitle {
            get {
                return ResourceManager.GetString("TreeMapNodeColorTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows main functionality of TreeMap control. 
        ///    TreeMap charts are compact way of visualizing hierarchical data in form of nested rectangles with area of each rectangle depicting the quantity of each category..
        /// </summary>
        public static string TreeMapTag {
            get {
                return ResourceManager.GetString("TreeMapTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TreeMap.
        /// </summary>
        public static string TreeMapTitle {
            get {
                return ResourceManager.GetString("TreeMapTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trend Line.
        /// </summary>
        public static string TrendLineDesc {
            get {
                return ResourceManager.GetString("TrendLineDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows TrendLine in FlexChart.
        ///    You can use different trendline types by setting the FitType property of TrendLine. The points on the plot can be dragged by mouse which updates the trend line and its equation automatically..
        /// </summary>
        public static string TrendLineTag {
            get {
                return ResourceManager.GetString("TrendLineTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trend Line.
        /// </summary>
        public static string TrendLineTitle {
            get {
                return ResourceManager.GetString("TrendLineTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waterfall.
        /// </summary>
        public static string WaterfallDesc {
            get {
                return ResourceManager.GetString("WaterfallDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows Waterfall Series in FlexChart.
        ///    The Waterfall series is normally used to demonstrate how the starting position either increases or decreases through a series of changes..
        /// </summary>
        public static string WaterfallTag {
            get {
                return ResourceManager.GetString("WaterfallTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waterfall.
        /// </summary>
        public static string WaterfallTitle {
            get {
                return ResourceManager.GetString("WaterfallTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to World GDP Ranking.
        /// </summary>
        public static string WorldGDPRanking {
            get {
                return ResourceManager.GetString("WorldGDPRanking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zones.
        /// </summary>
        public static string ZonesDesc {
            get {
                return ResourceManager.GetString("ZonesDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The view creates a scatter chart of student grades, highlighting each grade range using zones.
        ///    The zones are drawn in rendering event of FlexChart. Statistic values are calculated and plotted..
        /// </summary>
        public static string ZonesTag {
            get {
                return ResourceManager.GetString("ZonesTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zones.
        /// </summary>
        public static string ZonesTitle {
            get {
                return ResourceManager.GetString("ZonesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zoom.
        /// </summary>
        public static string ZoomDesc {
            get {
                return ResourceManager.GetString("ZoomDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view shows how to implement a custom zoom for the FlexChart control.
        ///    Use the mouse or touch to select a rectangular area on the plot area.The chart will zoom in on the selected area.When you are done, click the &apos;Reset Zoom&apos; button below the chart to return to the original view..
        /// </summary>
        public static string ZoomTag {
            get {
                return ResourceManager.GetString("ZoomTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zoom.
        /// </summary>
        public static string ZoomTitle {
            get {
                return ResourceManager.GetString("ZoomTitle", resourceCulture);
            }
        }
    }
}
